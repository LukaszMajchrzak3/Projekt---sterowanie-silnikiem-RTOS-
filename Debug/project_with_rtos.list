
project_with_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ee8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08011088  08011088  00012088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011694  08011694  000131e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011694  08011694  00012694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801169c  0801169c  000131e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801169c  0801169c  0001269c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080116a0  080116a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080116a4  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000131e4  2**0
                  CONTENTS
 10 .bss          00001f08  200001e4  200001e4  000131e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200020ec  200020ec  000131e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000131e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fd4c  00000000  00000000  00013214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004296  00000000  00000000  00032f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  000371f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000131f  00000000  00000000  00038a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024772  00000000  00000000  00039da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f95f  00000000  00000000  0005e519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0866  00000000  00000000  0007de78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015e6de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007e38  00000000  00000000  0015e724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0016655c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011070 	.word	0x08011070

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08011070 	.word	0x08011070

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff23 	bl	8000aec <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fc99 	bl	8000608 <__aeabi_dmul>
 8000cd6:	f7ff ff6f 	bl	8000bb8 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc1a 	bl	8000514 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fc90 	bl	8000608 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fad2 	bl	8000298 <__aeabi_dsub>
 8000cf4:	f7ff ff60 	bl	8000bb8 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <delay>:
#define timer htim3


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <delay+0x30>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2200      	movs	r2, #0
 8000d14:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000d16:	bf00      	nop
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <delay+0x30>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d1e:	88fb      	ldrh	r3, [r7, #6]
 8000d20:	429a      	cmp	r2, r3
 8000d22:	d3f9      	bcc.n	8000d18 <delay+0x14>
}
 8000d24:	bf00      	nop
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	2000032c 	.word	0x2000032c

08000d38 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	461a      	mov	r2, r3
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d50:	f003 ff2e 	bl	8004bb0 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d6a:	f003 ff21 	bl	8004bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	089b      	lsrs	r3, r3, #2
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4816      	ldr	r0, [pc, #88]	@ (8000dd8 <send_to_lcd+0xa0>)
 8000d80:	f003 ff16 	bl	8004bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	2102      	movs	r1, #2
 8000d94:	4810      	ldr	r0, [pc, #64]	@ (8000dd8 <send_to_lcd+0xa0>)
 8000d96:	f003 ff0b 	bl	8004bb0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	461a      	mov	r2, r3
 8000da4:	2101      	movs	r1, #1
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <send_to_lcd+0xa4>)
 8000da8:	f003 ff02 	bl	8004bb0 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2110      	movs	r1, #16
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db4:	f003 fefc 	bl	8004bb0 <HAL_GPIO_WritePin>
	delay (20);
 8000db8:	2014      	movs	r0, #20
 8000dba:	f7ff ffa3 	bl	8000d04 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2110      	movs	r1, #16
 8000dc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc6:	f003 fef3 	bl	8004bb0 <HAL_GPIO_WritePin>
	delay (20);
 8000dca:	2014      	movs	r0, #20
 8000dcc:	f7ff ff9a 	bl	8000d04 <delay>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	48000800 	.word	0x48000800
 8000ddc:	48000400 	.word	0x48000400

08000de0 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 8000df0:	7bfb      	ldrb	r3, [r7, #15]
 8000df2:	2100      	movs	r1, #0
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff9f 	bl	8000d38 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 030f 	and.w	r3, r3, #15
 8000e00:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f7ff ff96 	bl	8000d38 <send_to_lcd>
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	2101      	movs	r1, #1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff85 	bl	8000d38 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 030f 	and.w	r3, r3, #15
 8000e34:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8000e36:	7bfb      	ldrb	r3, [r7, #15]
 8000e38:	2101      	movs	r1, #1
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff7c 	bl	8000d38 <send_to_lcd>
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <lcd_clear>:

void lcd_clear (void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	f7ff ffc7 	bl	8000de0 <lcd_send_cmd>
	osDelay(2);
 8000e52:	2002      	movs	r0, #2
 8000e54:	f008 fc86 	bl	8009764 <osDelay>
}
 8000e58:	bf00      	nop
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d003      	beq.n	8000e74 <lcd_put_cur+0x18>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d005      	beq.n	8000e7e <lcd_put_cur+0x22>
 8000e72:	e009      	b.n	8000e88 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e7a:	603b      	str	r3, [r7, #0]
            break;
 8000e7c:	e004      	b.n	8000e88 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000e84:	603b      	str	r3, [r7, #0]
            break;
 8000e86:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ffa7 	bl	8000de0 <lcd_send_cmd>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <lcd_init>:


void lcd_init (void)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	osDelay(50);  // wait for >40ms
 8000e9e:	2032      	movs	r0, #50	@ 0x32
 8000ea0:	f008 fc60 	bl	8009764 <osDelay>
	lcd_send_cmd (0x30);
 8000ea4:	2030      	movs	r0, #48	@ 0x30
 8000ea6:	f7ff ff9b 	bl	8000de0 <lcd_send_cmd>
	osDelay(5);  // wait for >4.1ms
 8000eaa:	2005      	movs	r0, #5
 8000eac:	f008 fc5a 	bl	8009764 <osDelay>
	lcd_send_cmd (0x30);
 8000eb0:	2030      	movs	r0, #48	@ 0x30
 8000eb2:	f7ff ff95 	bl	8000de0 <lcd_send_cmd>
	osDelay(1);  // wait for >100us
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	f008 fc54 	bl	8009764 <osDelay>
	lcd_send_cmd (0x30);
 8000ebc:	2030      	movs	r0, #48	@ 0x30
 8000ebe:	f7ff ff8f 	bl	8000de0 <lcd_send_cmd>
	osDelay(10);
 8000ec2:	200a      	movs	r0, #10
 8000ec4:	f008 fc4e 	bl	8009764 <osDelay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ec8:	2020      	movs	r0, #32
 8000eca:	f7ff ff89 	bl	8000de0 <lcd_send_cmd>
	osDelay(10);
 8000ece:	200a      	movs	r0, #10
 8000ed0:	f008 fc48 	bl	8009764 <osDelay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000ed4:	2028      	movs	r0, #40	@ 0x28
 8000ed6:	f7ff ff83 	bl	8000de0 <lcd_send_cmd>
	osDelay(1);
 8000eda:	2001      	movs	r0, #1
 8000edc:	f008 fc42 	bl	8009764 <osDelay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000ee0:	2008      	movs	r0, #8
 8000ee2:	f7ff ff7d 	bl	8000de0 <lcd_send_cmd>
	osDelay(1);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f008 fc3c 	bl	8009764 <osDelay>
	lcd_send_cmd (0x01);  // clear display
 8000eec:	2001      	movs	r0, #1
 8000eee:	f7ff ff77 	bl	8000de0 <lcd_send_cmd>
	osDelay(1);
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f008 fc36 	bl	8009764 <osDelay>
	osDelay(1);
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f008 fc33 	bl	8009764 <osDelay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000efe:	2006      	movs	r0, #6
 8000f00:	f7ff ff6e 	bl	8000de0 <lcd_send_cmd>
	osDelay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f008 fc2d 	bl	8009764 <osDelay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f0a:	200c      	movs	r0, #12
 8000f0c:	f7ff ff68 	bl	8000de0 <lcd_send_cmd>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f1c:	e006      	b.n	8000f2c <lcd_send_string+0x18>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	1c5a      	adds	r2, r3, #1
 8000f22:	607a      	str	r2, [r7, #4]
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff74 	bl	8000e14 <lcd_send_data>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1f4      	bne.n	8000f1e <lcd_send_string+0xa>
}
 8000f34:	bf00      	nop
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f42:	b091      	sub	sp, #68	@ 0x44
 8000f44:	af08      	add	r7, sp, #32
 8000f46:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart2, single_message_received, 11);
 8000f48:	220b      	movs	r2, #11
 8000f4a:	4987      	ldr	r1, [pc, #540]	@ (8001168 <HAL_UART_RxCpltCallback+0x228>)
 8000f4c:	4887      	ldr	r0, [pc, #540]	@ (800116c <HAL_UART_RxCpltCallback+0x22c>)
 8000f4e:	f007 f9b0 	bl	80082b2 <HAL_UART_Receive_DMA>
	char *charTable = (char *)malloc(10 * sizeof(char));
 8000f52:	200a      	movs	r0, #10
 8000f54:	f00b f8a2 	bl	800c09c <malloc>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	61fb      	str	r3, [r7, #28]
	sscanf((char*)single_message_received,"%c%c%c%c%c%c%c%c%c%c;",&charTable[0],&charTable[1],&charTable[2],&charTable[3],&charTable[4],&charTable[5],&charTable[6],&charTable[7],&charTable[8],&charTable[9]);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f103 0c01 	add.w	ip, r3, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3302      	adds	r3, #2
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	3203      	adds	r2, #3
 8000f6c:	69f9      	ldr	r1, [r7, #28]
 8000f6e:	3104      	adds	r1, #4
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	3005      	adds	r0, #5
 8000f74:	69fc      	ldr	r4, [r7, #28]
 8000f76:	3406      	adds	r4, #6
 8000f78:	69fd      	ldr	r5, [r7, #28]
 8000f7a:	3507      	adds	r5, #7
 8000f7c:	69fe      	ldr	r6, [r7, #28]
 8000f7e:	3608      	adds	r6, #8
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	3309      	adds	r3, #9
 8000f84:	9307      	str	r3, [sp, #28]
 8000f86:	9606      	str	r6, [sp, #24]
 8000f88:	9505      	str	r5, [sp, #20]
 8000f8a:	9404      	str	r4, [sp, #16]
 8000f8c:	9003      	str	r0, [sp, #12]
 8000f8e:	9102      	str	r1, [sp, #8]
 8000f90:	9201      	str	r2, [sp, #4]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	4663      	mov	r3, ip
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	4975      	ldr	r1, [pc, #468]	@ (8001170 <HAL_UART_RxCpltCallback+0x230>)
 8000f9c:	4872      	ldr	r0, [pc, #456]	@ (8001168 <HAL_UART_RxCpltCallback+0x228>)
 8000f9e:	f00c f881 	bl	800d0a4 <siscanf>
	if((charTable[0] == 'S') & (charTable[1] == 'T') & (charTable[2] == 'A') & (charTable[3] == 'R') & (charTable[4] == 'T') & (charTable[5] == 'M') & (charTable[6] == 'O') & (charTable[7] == 'T') & (charTable[8] == 'O') & (charTable[9] == 'R'))
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b53      	cmp	r3, #83	@ 0x53
 8000fa8:	bf0c      	ite	eq
 8000faa:	2301      	moveq	r3, #1
 8000fac:	2300      	movne	r3, #0
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b54      	cmp	r3, #84	@ 0x54
 8000fb8:	bf0c      	ite	eq
 8000fba:	2301      	moveq	r3, #1
 8000fbc:	2300      	movne	r3, #0
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3302      	adds	r3, #2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b41      	cmp	r3, #65	@ 0x41
 8000fce:	bf0c      	ite	eq
 8000fd0:	2301      	moveq	r3, #1
 8000fd2:	2300      	movne	r3, #0
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	69fa      	ldr	r2, [r7, #28]
 8000fda:	3203      	adds	r2, #3
 8000fdc:	7812      	ldrb	r2, [r2, #0]
 8000fde:	2a52      	cmp	r2, #82	@ 0x52
 8000fe0:	bf0c      	ite	eq
 8000fe2:	2201      	moveq	r2, #1
 8000fe4:	2200      	movne	r2, #0
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	4013      	ands	r3, r2
 8000fea:	69fa      	ldr	r2, [r7, #28]
 8000fec:	3204      	adds	r2, #4
 8000fee:	7812      	ldrb	r2, [r2, #0]
 8000ff0:	2a54      	cmp	r2, #84	@ 0x54
 8000ff2:	bf0c      	ite	eq
 8000ff4:	2201      	moveq	r2, #1
 8000ff6:	2200      	movne	r2, #0
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	69fa      	ldr	r2, [r7, #28]
 8000ffe:	3205      	adds	r2, #5
 8001000:	7812      	ldrb	r2, [r2, #0]
 8001002:	2a4d      	cmp	r2, #77	@ 0x4d
 8001004:	bf0c      	ite	eq
 8001006:	2201      	moveq	r2, #1
 8001008:	2200      	movne	r2, #0
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	4013      	ands	r3, r2
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	3206      	adds	r2, #6
 8001012:	7812      	ldrb	r2, [r2, #0]
 8001014:	2a4f      	cmp	r2, #79	@ 0x4f
 8001016:	bf0c      	ite	eq
 8001018:	2201      	moveq	r2, #1
 800101a:	2200      	movne	r2, #0
 800101c:	b2d2      	uxtb	r2, r2
 800101e:	4013      	ands	r3, r2
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	3207      	adds	r2, #7
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	2a54      	cmp	r2, #84	@ 0x54
 8001028:	bf0c      	ite	eq
 800102a:	2201      	moveq	r2, #1
 800102c:	2200      	movne	r2, #0
 800102e:	b2d2      	uxtb	r2, r2
 8001030:	4013      	ands	r3, r2
 8001032:	69fa      	ldr	r2, [r7, #28]
 8001034:	3208      	adds	r2, #8
 8001036:	7812      	ldrb	r2, [r2, #0]
 8001038:	2a4f      	cmp	r2, #79	@ 0x4f
 800103a:	bf0c      	ite	eq
 800103c:	2201      	moveq	r2, #1
 800103e:	2200      	movne	r2, #0
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	4013      	ands	r3, r2
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	3209      	adds	r2, #9
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	2a52      	cmp	r2, #82	@ 0x52
 800104c:	bf0c      	ite	eq
 800104e:	2201      	moveq	r2, #1
 8001050:	2200      	movne	r2, #0
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	4013      	ands	r3, r2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d014      	beq.n	8001084 <HAL_UART_RxCpltCallback+0x144>
	{
		brake_dyn = 0;
 800105a:	4b46      	ldr	r3, [pc, #280]	@ (8001174 <HAL_UART_RxCpltCallback+0x234>)
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
		en_brake = 0;
 8001060:	4b45      	ldr	r3, [pc, #276]	@ (8001178 <HAL_UART_RxCpltCallback+0x238>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
		sprintf(single_message_response, "Silnik zalaczony!\r\n");
 8001066:	4945      	ldr	r1, [pc, #276]	@ (800117c <HAL_UART_RxCpltCallback+0x23c>)
 8001068:	4845      	ldr	r0, [pc, #276]	@ (8001180 <HAL_UART_RxCpltCallback+0x240>)
 800106a:	f00b fffb 	bl	800d064 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)single_message_response, strlen(single_message_response), 50000);
 800106e:	4844      	ldr	r0, [pc, #272]	@ (8001180 <HAL_UART_RxCpltCallback+0x240>)
 8001070:	f7ff f906 	bl	8000280 <strlen>
 8001074:	4603      	mov	r3, r0
 8001076:	b29a      	uxth	r2, r3
 8001078:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800107c:	4940      	ldr	r1, [pc, #256]	@ (8001180 <HAL_UART_RxCpltCallback+0x240>)
 800107e:	483b      	ldr	r0, [pc, #236]	@ (800116c <HAL_UART_RxCpltCallback+0x22c>)
 8001080:	f007 f88e 	bl	80081a0 <HAL_UART_Transmit>
	}
	if((charTable[0] == 'B') & (charTable[1] == 'R') & (charTable[2] == 'A') & (charTable[3] == 'K') & (charTable[4] == 'E') & (charTable[5] == '_') & (charTable[6] == 'D') & (charTable[7] == 'N') & (charTable[8] == 'M') & (charTable[9] == 'C'))
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b42      	cmp	r3, #66	@ 0x42
 800108a:	bf0c      	ite	eq
 800108c:	2301      	moveq	r3, #1
 800108e:	2300      	movne	r3, #0
 8001090:	b2da      	uxtb	r2, r3
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3301      	adds	r3, #1
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b52      	cmp	r3, #82	@ 0x52
 800109a:	bf0c      	ite	eq
 800109c:	2301      	moveq	r3, #1
 800109e:	2300      	movne	r3, #0
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	4013      	ands	r3, r2
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	461a      	mov	r2, r3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	3302      	adds	r3, #2
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b41      	cmp	r3, #65	@ 0x41
 80010b0:	bf0c      	ite	eq
 80010b2:	2301      	moveq	r3, #1
 80010b4:	2300      	movne	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4013      	ands	r3, r2
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	3203      	adds	r2, #3
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	2a4b      	cmp	r2, #75	@ 0x4b
 80010c2:	bf0c      	ite	eq
 80010c4:	2201      	moveq	r2, #1
 80010c6:	2200      	movne	r2, #0
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	4013      	ands	r3, r2
 80010cc:	69fa      	ldr	r2, [r7, #28]
 80010ce:	3204      	adds	r2, #4
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	2a45      	cmp	r2, #69	@ 0x45
 80010d4:	bf0c      	ite	eq
 80010d6:	2201      	moveq	r2, #1
 80010d8:	2200      	movne	r2, #0
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	4013      	ands	r3, r2
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	3205      	adds	r2, #5
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	2a5f      	cmp	r2, #95	@ 0x5f
 80010e6:	bf0c      	ite	eq
 80010e8:	2201      	moveq	r2, #1
 80010ea:	2200      	movne	r2, #0
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	4013      	ands	r3, r2
 80010f0:	69fa      	ldr	r2, [r7, #28]
 80010f2:	3206      	adds	r2, #6
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	2a44      	cmp	r2, #68	@ 0x44
 80010f8:	bf0c      	ite	eq
 80010fa:	2201      	moveq	r2, #1
 80010fc:	2200      	movne	r2, #0
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	4013      	ands	r3, r2
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	3207      	adds	r2, #7
 8001106:	7812      	ldrb	r2, [r2, #0]
 8001108:	2a4e      	cmp	r2, #78	@ 0x4e
 800110a:	bf0c      	ite	eq
 800110c:	2201      	moveq	r2, #1
 800110e:	2200      	movne	r2, #0
 8001110:	b2d2      	uxtb	r2, r2
 8001112:	4013      	ands	r3, r2
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	3208      	adds	r2, #8
 8001118:	7812      	ldrb	r2, [r2, #0]
 800111a:	2a4d      	cmp	r2, #77	@ 0x4d
 800111c:	bf0c      	ite	eq
 800111e:	2201      	moveq	r2, #1
 8001120:	2200      	movne	r2, #0
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	4013      	ands	r3, r2
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	3209      	adds	r2, #9
 800112a:	7812      	ldrb	r2, [r2, #0]
 800112c:	2a43      	cmp	r2, #67	@ 0x43
 800112e:	bf0c      	ite	eq
 8001130:	2201      	moveq	r2, #1
 8001132:	2200      	movne	r2, #0
 8001134:	b2d2      	uxtb	r2, r2
 8001136:	4013      	ands	r3, r2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d025      	beq.n	8001188 <HAL_UART_RxCpltCallback+0x248>
	{
		brake_dyn = 1;
 800113c:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <HAL_UART_RxCpltCallback+0x234>)
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
		en_brake = 0;
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <HAL_UART_RxCpltCallback+0x238>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
		sprintf(single_message_response, "Hamowanie dynamiczne!\r\n");
 8001148:	490e      	ldr	r1, [pc, #56]	@ (8001184 <HAL_UART_RxCpltCallback+0x244>)
 800114a:	480d      	ldr	r0, [pc, #52]	@ (8001180 <HAL_UART_RxCpltCallback+0x240>)
 800114c:	f00b ff8a 	bl	800d064 <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)single_message_response, strlen(single_message_response), 50000);
 8001150:	480b      	ldr	r0, [pc, #44]	@ (8001180 <HAL_UART_RxCpltCallback+0x240>)
 8001152:	f7ff f895 	bl	8000280 <strlen>
 8001156:	4603      	mov	r3, r0
 8001158:	b29a      	uxth	r2, r3
 800115a:	f24c 3350 	movw	r3, #50000	@ 0xc350
 800115e:	4908      	ldr	r1, [pc, #32]	@ (8001180 <HAL_UART_RxCpltCallback+0x240>)
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <HAL_UART_RxCpltCallback+0x22c>)
 8001162:	f007 f81d 	bl	80081a0 <HAL_UART_Transmit>
 8001166:	e00f      	b.n	8001188 <HAL_UART_RxCpltCallback+0x248>
 8001168:	2000053c 	.word	0x2000053c
 800116c:	20000410 	.word	0x20000410
 8001170:	080110b4 	.word	0x080110b4
 8001174:	20000008 	.word	0x20000008
 8001178:	200004f8 	.word	0x200004f8
 800117c:	080110cc 	.word	0x080110cc
 8001180:	20000548 	.word	0x20000548
 8001184:	080110e0 	.word	0x080110e0

	}
	if((charTable[0] == 'C') & (charTable[1] == 'O') & (charTable[2] == 'N') & (charTable[3] == 'T') & (charTable[4] == 'R') & (charTable[5] == '_') & (charTable[6] == 'S') & (charTable[7] == 'T') & (charTable[8] == 'O') & (charTable[9] == 'P'))
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b43      	cmp	r3, #67	@ 0x43
 800118e:	bf0c      	ite	eq
 8001190:	2301      	moveq	r3, #1
 8001192:	2300      	movne	r3, #0
 8001194:	b2da      	uxtb	r2, r3
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	3301      	adds	r3, #1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b4f      	cmp	r3, #79	@ 0x4f
 800119e:	bf0c      	ite	eq
 80011a0:	2301      	moveq	r3, #1
 80011a2:	2300      	movne	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	4013      	ands	r3, r2
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	3302      	adds	r3, #2
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b4e      	cmp	r3, #78	@ 0x4e
 80011b4:	bf0c      	ite	eq
 80011b6:	2301      	moveq	r3, #1
 80011b8:	2300      	movne	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	4013      	ands	r3, r2
 80011be:	69fa      	ldr	r2, [r7, #28]
 80011c0:	3203      	adds	r2, #3
 80011c2:	7812      	ldrb	r2, [r2, #0]
 80011c4:	2a54      	cmp	r2, #84	@ 0x54
 80011c6:	bf0c      	ite	eq
 80011c8:	2201      	moveq	r2, #1
 80011ca:	2200      	movne	r2, #0
 80011cc:	b2d2      	uxtb	r2, r2
 80011ce:	4013      	ands	r3, r2
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	3204      	adds	r2, #4
 80011d4:	7812      	ldrb	r2, [r2, #0]
 80011d6:	2a52      	cmp	r2, #82	@ 0x52
 80011d8:	bf0c      	ite	eq
 80011da:	2201      	moveq	r2, #1
 80011dc:	2200      	movne	r2, #0
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	4013      	ands	r3, r2
 80011e2:	69fa      	ldr	r2, [r7, #28]
 80011e4:	3205      	adds	r2, #5
 80011e6:	7812      	ldrb	r2, [r2, #0]
 80011e8:	2a5f      	cmp	r2, #95	@ 0x5f
 80011ea:	bf0c      	ite	eq
 80011ec:	2201      	moveq	r2, #1
 80011ee:	2200      	movne	r2, #0
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	4013      	ands	r3, r2
 80011f4:	69fa      	ldr	r2, [r7, #28]
 80011f6:	3206      	adds	r2, #6
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	2a53      	cmp	r2, #83	@ 0x53
 80011fc:	bf0c      	ite	eq
 80011fe:	2201      	moveq	r2, #1
 8001200:	2200      	movne	r2, #0
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	4013      	ands	r3, r2
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	3207      	adds	r2, #7
 800120a:	7812      	ldrb	r2, [r2, #0]
 800120c:	2a54      	cmp	r2, #84	@ 0x54
 800120e:	bf0c      	ite	eq
 8001210:	2201      	moveq	r2, #1
 8001212:	2200      	movne	r2, #0
 8001214:	b2d2      	uxtb	r2, r2
 8001216:	4013      	ands	r3, r2
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	3208      	adds	r2, #8
 800121c:	7812      	ldrb	r2, [r2, #0]
 800121e:	2a4f      	cmp	r2, #79	@ 0x4f
 8001220:	bf0c      	ite	eq
 8001222:	2201      	moveq	r2, #1
 8001224:	2200      	movne	r2, #0
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	4013      	ands	r3, r2
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	3209      	adds	r2, #9
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	2a50      	cmp	r2, #80	@ 0x50
 8001232:	bf0c      	ite	eq
 8001234:	2201      	moveq	r2, #1
 8001236:	2200      	movne	r2, #0
 8001238:	b2d2      	uxtb	r2, r2
 800123a:	4013      	ands	r3, r2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d014      	beq.n	800126a <HAL_UART_RxCpltCallback+0x32a>
	{
		en_brake = 1;
 8001240:	4b7a      	ldr	r3, [pc, #488]	@ (800142c <HAL_UART_RxCpltCallback+0x4ec>)
 8001242:	2201      	movs	r2, #1
 8001244:	601a      	str	r2, [r3, #0]
		brake_dyn = 0;
 8001246:	4b7a      	ldr	r3, [pc, #488]	@ (8001430 <HAL_UART_RxCpltCallback+0x4f0>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
		sprintf(single_message_response, "Aktywne hamowanie!\r\n");
 800124c:	4979      	ldr	r1, [pc, #484]	@ (8001434 <HAL_UART_RxCpltCallback+0x4f4>)
 800124e:	487a      	ldr	r0, [pc, #488]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 8001250:	f00b ff08 	bl	800d064 <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)single_message_response, strlen(single_message_response), 50000);
 8001254:	4878      	ldr	r0, [pc, #480]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 8001256:	f7ff f813 	bl	8000280 <strlen>
 800125a:	4603      	mov	r3, r0
 800125c:	b29a      	uxth	r2, r3
 800125e:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001262:	4975      	ldr	r1, [pc, #468]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 8001264:	4875      	ldr	r0, [pc, #468]	@ (800143c <HAL_UART_RxCpltCallback+0x4fc>)
 8001266:	f006 ff9b 	bl	80081a0 <HAL_UART_Transmit>
	}
	if((charTable[0] == 'V') & (charTable[1] == 'E') & (charTable[2] == 'L') & (charTable[3] == ':') & (charTable[8] == ';') & (charTable[9] == ';'))
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b56      	cmp	r3, #86	@ 0x56
 8001270:	bf0c      	ite	eq
 8001272:	2301      	moveq	r3, #1
 8001274:	2300      	movne	r3, #0
 8001276:	b2da      	uxtb	r2, r3
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	3301      	adds	r3, #1
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b45      	cmp	r3, #69	@ 0x45
 8001280:	bf0c      	ite	eq
 8001282:	2301      	moveq	r3, #1
 8001284:	2300      	movne	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	4013      	ands	r3, r2
 800128a:	b2db      	uxtb	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3302      	adds	r3, #2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b4c      	cmp	r3, #76	@ 0x4c
 8001296:	bf0c      	ite	eq
 8001298:	2301      	moveq	r3, #1
 800129a:	2300      	movne	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	4013      	ands	r3, r2
 80012a0:	69fa      	ldr	r2, [r7, #28]
 80012a2:	3203      	adds	r2, #3
 80012a4:	7812      	ldrb	r2, [r2, #0]
 80012a6:	2a3a      	cmp	r2, #58	@ 0x3a
 80012a8:	bf0c      	ite	eq
 80012aa:	2201      	moveq	r2, #1
 80012ac:	2200      	movne	r2, #0
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	4013      	ands	r3, r2
 80012b2:	69fa      	ldr	r2, [r7, #28]
 80012b4:	3208      	adds	r2, #8
 80012b6:	7812      	ldrb	r2, [r2, #0]
 80012b8:	2a3b      	cmp	r2, #59	@ 0x3b
 80012ba:	bf0c      	ite	eq
 80012bc:	2201      	moveq	r2, #1
 80012be:	2200      	movne	r2, #0
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	4013      	ands	r3, r2
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	3209      	adds	r2, #9
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	2a3b      	cmp	r2, #59	@ 0x3b
 80012cc:	bf0c      	ite	eq
 80012ce:	2201      	moveq	r2, #1
 80012d0:	2200      	movne	r2, #0
 80012d2:	b2d2      	uxtb	r2, r2
 80012d4:	4013      	ands	r3, r2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d039      	beq.n	800134e <HAL_UART_RxCpltCallback+0x40e>
	{
		int num1int = charTable[4] - 48;
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3304      	adds	r3, #4
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	3b30      	subs	r3, #48	@ 0x30
 80012e2:	61bb      	str	r3, [r7, #24]
		int num2int = charTable[5] - 48;
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	3305      	adds	r3, #5
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	3b30      	subs	r3, #48	@ 0x30
 80012ec:	617b      	str	r3, [r7, #20]
		int num3int = charTable[6] - 48;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	3306      	adds	r3, #6
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	3b30      	subs	r3, #48	@ 0x30
 80012f6:	613b      	str	r3, [r7, #16]
		int num4int = charTable[7] - 48;
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	3307      	adds	r3, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	3b30      	subs	r3, #48	@ 0x30
 8001300:	60fb      	str	r3, [r7, #12]
//		int ref_vel_local = 0;
		ref_vel = num1int*1000 + num2int*100 + num3int*10 + num4int*1;
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001308:	fb03 f202 	mul.w	r2, r3, r2
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	2164      	movs	r1, #100	@ 0x64
 8001310:	fb01 f303 	mul.w	r3, r1, r3
 8001314:	18d1      	adds	r1, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	18ca      	adds	r2, r1, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4413      	add	r3, r2
 8001326:	4a46      	ldr	r2, [pc, #280]	@ (8001440 <HAL_UART_RxCpltCallback+0x500>)
 8001328:	6013      	str	r3, [r2, #0]
//		ref_vel = ref_vel_local;
		sprintf(single_message_response, "Nowa predkosc: %i RPM\r\n",ref_vel);
 800132a:	4b45      	ldr	r3, [pc, #276]	@ (8001440 <HAL_UART_RxCpltCallback+0x500>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	4944      	ldr	r1, [pc, #272]	@ (8001444 <HAL_UART_RxCpltCallback+0x504>)
 8001332:	4841      	ldr	r0, [pc, #260]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 8001334:	f00b fe96 	bl	800d064 <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t*)single_message_response, strlen(single_message_response), 50000);
 8001338:	483f      	ldr	r0, [pc, #252]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 800133a:	f7fe ffa1 	bl	8000280 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001346:	493c      	ldr	r1, [pc, #240]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 8001348:	483c      	ldr	r0, [pc, #240]	@ (800143c <HAL_UART_RxCpltCallback+0x4fc>)
 800134a:	f006 ff29 	bl	80081a0 <HAL_UART_Transmit>
	}
	if((charTable[0] == 'D') & (charTable[1] == 'I') & (charTable[2] == 'R') & (charTable[3] == '_') & (charTable[4] == 'C') & (charTable[5] == 'L') & (charTable[6] == 'K') & (charTable[7] == 'W') & (charTable[8] == 'I') & (charTable[9] == 'S'))
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b44      	cmp	r3, #68	@ 0x44
 8001354:	bf0c      	ite	eq
 8001356:	2301      	moveq	r3, #1
 8001358:	2300      	movne	r3, #0
 800135a:	b2da      	uxtb	r2, r3
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	3301      	adds	r3, #1
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b49      	cmp	r3, #73	@ 0x49
 8001364:	bf0c      	ite	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	2300      	movne	r3, #0
 800136a:	b2db      	uxtb	r3, r3
 800136c:	4013      	ands	r3, r2
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3302      	adds	r3, #2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b52      	cmp	r3, #82	@ 0x52
 800137a:	bf0c      	ite	eq
 800137c:	2301      	moveq	r3, #1
 800137e:	2300      	movne	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4013      	ands	r3, r2
 8001384:	69fa      	ldr	r2, [r7, #28]
 8001386:	3203      	adds	r2, #3
 8001388:	7812      	ldrb	r2, [r2, #0]
 800138a:	2a5f      	cmp	r2, #95	@ 0x5f
 800138c:	bf0c      	ite	eq
 800138e:	2201      	moveq	r2, #1
 8001390:	2200      	movne	r2, #0
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	4013      	ands	r3, r2
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	3204      	adds	r2, #4
 800139a:	7812      	ldrb	r2, [r2, #0]
 800139c:	2a43      	cmp	r2, #67	@ 0x43
 800139e:	bf0c      	ite	eq
 80013a0:	2201      	moveq	r2, #1
 80013a2:	2200      	movne	r2, #0
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	4013      	ands	r3, r2
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	3205      	adds	r2, #5
 80013ac:	7812      	ldrb	r2, [r2, #0]
 80013ae:	2a4c      	cmp	r2, #76	@ 0x4c
 80013b0:	bf0c      	ite	eq
 80013b2:	2201      	moveq	r2, #1
 80013b4:	2200      	movne	r2, #0
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	4013      	ands	r3, r2
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	3206      	adds	r2, #6
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	2a4b      	cmp	r2, #75	@ 0x4b
 80013c2:	bf0c      	ite	eq
 80013c4:	2201      	moveq	r2, #1
 80013c6:	2200      	movne	r2, #0
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	4013      	ands	r3, r2
 80013cc:	69fa      	ldr	r2, [r7, #28]
 80013ce:	3207      	adds	r2, #7
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	2a57      	cmp	r2, #87	@ 0x57
 80013d4:	bf0c      	ite	eq
 80013d6:	2201      	moveq	r2, #1
 80013d8:	2200      	movne	r2, #0
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	4013      	ands	r3, r2
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	3208      	adds	r2, #8
 80013e2:	7812      	ldrb	r2, [r2, #0]
 80013e4:	2a49      	cmp	r2, #73	@ 0x49
 80013e6:	bf0c      	ite	eq
 80013e8:	2201      	moveq	r2, #1
 80013ea:	2200      	movne	r2, #0
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	4013      	ands	r3, r2
 80013f0:	69fa      	ldr	r2, [r7, #28]
 80013f2:	3209      	adds	r2, #9
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	2a53      	cmp	r2, #83	@ 0x53
 80013f8:	bf0c      	ite	eq
 80013fa:	2201      	moveq	r2, #1
 80013fc:	2200      	movne	r2, #0
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	4013      	ands	r3, r2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d024      	beq.n	8001450 <HAL_UART_RxCpltCallback+0x510>
	{
		direction = 0;
 8001406:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_UART_RxCpltCallback+0x508>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
//		HAL_GPIO_WritePin(DIRECTION_CTRL_GPIO_Port, DIRECTION_CTRL_Pin, GPIO_PIN_RESET);
//		sprintf(single_message_response, "Kierunek obrotow: przeciwny do wsk. zegara\r\n");
		sprintf(single_message_response, "Zmiana kierunku\r\n");
 800140c:	490f      	ldr	r1, [pc, #60]	@ (800144c <HAL_UART_RxCpltCallback+0x50c>)
 800140e:	480a      	ldr	r0, [pc, #40]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 8001410:	f00b fe28 	bl	800d064 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)single_message_response, strlen(single_message_response), 50000);
 8001414:	4808      	ldr	r0, [pc, #32]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 8001416:	f7fe ff33 	bl	8000280 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001422:	4905      	ldr	r1, [pc, #20]	@ (8001438 <HAL_UART_RxCpltCallback+0x4f8>)
 8001424:	4805      	ldr	r0, [pc, #20]	@ (800143c <HAL_UART_RxCpltCallback+0x4fc>)
 8001426:	f006 febb 	bl	80081a0 <HAL_UART_Transmit>
 800142a:	e011      	b.n	8001450 <HAL_UART_RxCpltCallback+0x510>
 800142c:	200004f8 	.word	0x200004f8
 8001430:	20000008 	.word	0x20000008
 8001434:	080110f8 	.word	0x080110f8
 8001438:	20000548 	.word	0x20000548
 800143c:	20000410 	.word	0x20000410
 8001440:	20000000 	.word	0x20000000
 8001444:	08011110 	.word	0x08011110
 8001448:	200004fc 	.word	0x200004fc
 800144c:	08011128 	.word	0x08011128
	}
	if((charTable[0] == 'D') & (charTable[1] == 'I') & (charTable[2] == 'R') & (charTable[3] == '_') & (charTable[4] == 'C') & (charTable[5] == 'N') & (charTable[6] == 'T') & (charTable[7] == 'R') & (charTable[8] == 'C') & (charTable[9] == 'L'))
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b44      	cmp	r3, #68	@ 0x44
 8001456:	bf0c      	ite	eq
 8001458:	2301      	moveq	r3, #1
 800145a:	2300      	movne	r3, #0
 800145c:	b2da      	uxtb	r2, r3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b49      	cmp	r3, #73	@ 0x49
 8001466:	bf0c      	ite	eq
 8001468:	2301      	moveq	r3, #1
 800146a:	2300      	movne	r3, #0
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4013      	ands	r3, r2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	3302      	adds	r3, #2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b52      	cmp	r3, #82	@ 0x52
 800147c:	bf0c      	ite	eq
 800147e:	2301      	moveq	r3, #1
 8001480:	2300      	movne	r3, #0
 8001482:	b2db      	uxtb	r3, r3
 8001484:	4013      	ands	r3, r2
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	3203      	adds	r2, #3
 800148a:	7812      	ldrb	r2, [r2, #0]
 800148c:	2a5f      	cmp	r2, #95	@ 0x5f
 800148e:	bf0c      	ite	eq
 8001490:	2201      	moveq	r2, #1
 8001492:	2200      	movne	r2, #0
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	4013      	ands	r3, r2
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	3204      	adds	r2, #4
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	2a43      	cmp	r2, #67	@ 0x43
 80014a0:	bf0c      	ite	eq
 80014a2:	2201      	moveq	r2, #1
 80014a4:	2200      	movne	r2, #0
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	4013      	ands	r3, r2
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	3205      	adds	r2, #5
 80014ae:	7812      	ldrb	r2, [r2, #0]
 80014b0:	2a4e      	cmp	r2, #78	@ 0x4e
 80014b2:	bf0c      	ite	eq
 80014b4:	2201      	moveq	r2, #1
 80014b6:	2200      	movne	r2, #0
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	4013      	ands	r3, r2
 80014bc:	69fa      	ldr	r2, [r7, #28]
 80014be:	3206      	adds	r2, #6
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	2a54      	cmp	r2, #84	@ 0x54
 80014c4:	bf0c      	ite	eq
 80014c6:	2201      	moveq	r2, #1
 80014c8:	2200      	movne	r2, #0
 80014ca:	b2d2      	uxtb	r2, r2
 80014cc:	4013      	ands	r3, r2
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	3207      	adds	r2, #7
 80014d2:	7812      	ldrb	r2, [r2, #0]
 80014d4:	2a52      	cmp	r2, #82	@ 0x52
 80014d6:	bf0c      	ite	eq
 80014d8:	2201      	moveq	r2, #1
 80014da:	2200      	movne	r2, #0
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	4013      	ands	r3, r2
 80014e0:	69fa      	ldr	r2, [r7, #28]
 80014e2:	3208      	adds	r2, #8
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	2a43      	cmp	r2, #67	@ 0x43
 80014e8:	bf0c      	ite	eq
 80014ea:	2201      	moveq	r2, #1
 80014ec:	2200      	movne	r2, #0
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	4013      	ands	r3, r2
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	3209      	adds	r2, #9
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	2a4c      	cmp	r2, #76	@ 0x4c
 80014fa:	bf0c      	ite	eq
 80014fc:	2201      	moveq	r2, #1
 80014fe:	2200      	movne	r2, #0
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	4013      	ands	r3, r2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d011      	beq.n	800152c <HAL_UART_RxCpltCallback+0x5ec>
	{
		direction = 1;
 8001508:	4b0a      	ldr	r3, [pc, #40]	@ (8001534 <HAL_UART_RxCpltCallback+0x5f4>)
 800150a:	2201      	movs	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
//		HAL_GPIO_WritePin(DIRECTION_CTRL_GPIO_Port, DIRECTION_CTRL_Pin, GPIO_PIN_SET);
//		sprintf(single_message_response, "Kierunek obrotow: zgodny ze wsk. zegara\r\n");
		sprintf(single_message_response, "Zmiana kierunku\r\n");
 800150e:	490a      	ldr	r1, [pc, #40]	@ (8001538 <HAL_UART_RxCpltCallback+0x5f8>)
 8001510:	480a      	ldr	r0, [pc, #40]	@ (800153c <HAL_UART_RxCpltCallback+0x5fc>)
 8001512:	f00b fda7 	bl	800d064 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*)single_message_response, strlen(single_message_response), 50000);
 8001516:	4809      	ldr	r0, [pc, #36]	@ (800153c <HAL_UART_RxCpltCallback+0x5fc>)
 8001518:	f7fe feb2 	bl	8000280 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	b29a      	uxth	r2, r3
 8001520:	f24c 3350 	movw	r3, #50000	@ 0xc350
 8001524:	4905      	ldr	r1, [pc, #20]	@ (800153c <HAL_UART_RxCpltCallback+0x5fc>)
 8001526:	4806      	ldr	r0, [pc, #24]	@ (8001540 <HAL_UART_RxCpltCallback+0x600>)
 8001528:	f006 fe3a 	bl	80081a0 <HAL_UART_Transmit>

	}
	//sprintf(single_message_received, "");
}
 800152c:	bf00      	nop
 800152e:	3724      	adds	r7, #36	@ 0x24
 8001530:	46bd      	mov	sp, r7
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001534:	200004fc 	.word	0x200004fc
 8001538:	08011128 	.word	0x08011128
 800153c:	20000548 	.word	0x20000548
 8001540:	20000410 	.word	0x20000410

08001544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001544:	b598      	push	{r3, r4, r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001548:	f001 fa6e 	bl	8002a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154c:	f000 f890 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f000 fb86 	bl	8001c60 <MX_GPIO_Init>
  MX_DMA_Init();
 8001554:	f000 fb5e 	bl	8001c14 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001558:	f000 fb2c 	bl	8001bb4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800155c:	f000 fa62 	bl	8001a24 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001560:	f000 f8f4 	bl	800174c <MX_ADC1_Init>
  MX_TIM8_Init();
 8001564:	f000 faac 	bl	8001ac0 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001568:	f000 fafe 	bl	8001b68 <MX_TIM16_Init>
  MX_TIM2_Init();
 800156c:	f000 f9e4 	bl	8001938 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001570:	f000 f95c 	bl	800182c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim3);
 8001574:	482c      	ldr	r0, [pc, #176]	@ (8001628 <main+0xe4>)
 8001576:	f005 f86f 	bl	8006658 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim16);
 800157a:	482c      	ldr	r0, [pc, #176]	@ (800162c <main+0xe8>)
 800157c:	f005 f86c 	bl	8006658 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8001580:	482b      	ldr	r0, [pc, #172]	@ (8001630 <main+0xec>)
 8001582:	f005 f869 	bl	8006658 <HAL_TIM_Base_Start>

  //lcd_init ();

  //pwm_level = 1000.0;

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001586:	2100      	movs	r1, #0
 8001588:	482a      	ldr	r0, [pc, #168]	@ (8001634 <main+0xf0>)
 800158a:	f005 f99f 	bl	80068cc <HAL_TIM_PWM_Start>

   if(brake_dyn == 0)
 800158e:	4b2a      	ldr	r3, [pc, #168]	@ (8001638 <main+0xf4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d116      	bne.n	80015c4 <main+0x80>
   {
 	  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000.0-pwm_level); //wypelnienie
 8001596:	4b29      	ldr	r3, [pc, #164]	@ (800163c <main+0xf8>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe ffca 	bl	8000534 <__aeabi_i2d>
 80015a0:	4602      	mov	r2, r0
 80015a2:	460b      	mov	r3, r1
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	4925      	ldr	r1, [pc, #148]	@ (8001640 <main+0xfc>)
 80015aa:	f7fe fe75 	bl	8000298 <__aeabi_dsub>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4920      	ldr	r1, [pc, #128]	@ (8001634 <main+0xf0>)
 80015b4:	680c      	ldr	r4, [r1, #0]
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff fafd 	bl	8000bb8 <__aeabi_d2uiz>
 80015be:	4603      	mov	r3, r0
 80015c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80015c2:	e00e      	b.n	80015e2 <main+0x9e>
   }
   else if(brake_dyn == 1)
 80015c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <main+0xf4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d10a      	bne.n	80015e2 <main+0x9e>
   {
 	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000.0);
 80015cc:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <main+0xf0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015d4:	635a      	str	r2, [r3, #52]	@ 0x34
 	  HAL_GPIO_WritePin(BRAKE_DYN_GPIO_Port, BRAKE_DYN_Pin, GPIO_PIN_SET);
 80015d6:	2201      	movs	r2, #1
 80015d8:	2140      	movs	r1, #64	@ 0x40
 80015da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015de:	f003 fae7 	bl	8004bb0 <HAL_GPIO_WritePin>
   }

//   UART_StartReception_IT();

   HAL_UART_Receive_DMA(&huart2, single_message_received, 11);
 80015e2:	220b      	movs	r2, #11
 80015e4:	4917      	ldr	r1, [pc, #92]	@ (8001644 <main+0x100>)
 80015e6:	4818      	ldr	r0, [pc, #96]	@ (8001648 <main+0x104>)
 80015e8:	f006 fe63 	bl	80082b2 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80015ec:	f007 ffa8 	bl	8009540 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of freq_measure */
  freq_measureHandle = osThreadNew(start_freq_meas, NULL, &freq_measure_attributes);
 80015f0:	4a16      	ldr	r2, [pc, #88]	@ (800164c <main+0x108>)
 80015f2:	2100      	movs	r1, #0
 80015f4:	4816      	ldr	r0, [pc, #88]	@ (8001650 <main+0x10c>)
 80015f6:	f008 f80b 	bl	8009610 <osThreadNew>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4a15      	ldr	r2, [pc, #84]	@ (8001654 <main+0x110>)
 80015fe:	6013      	str	r3, [r2, #0]

  /* creation of motor_control */
  motor_controlHandle = osThreadNew(start_motor_control, NULL, &motor_control_attributes);
 8001600:	4a15      	ldr	r2, [pc, #84]	@ (8001658 <main+0x114>)
 8001602:	2100      	movs	r1, #0
 8001604:	4815      	ldr	r0, [pc, #84]	@ (800165c <main+0x118>)
 8001606:	f008 f803 	bl	8009610 <osThreadNew>
 800160a:	4603      	mov	r3, r0
 800160c:	4a14      	ldr	r2, [pc, #80]	@ (8001660 <main+0x11c>)
 800160e:	6013      	str	r3, [r2, #0]

  /* creation of lcd_text */
  lcd_textHandle = osThreadNew(start_lcd_work, NULL, &lcd_text_attributes);
 8001610:	4a14      	ldr	r2, [pc, #80]	@ (8001664 <main+0x120>)
 8001612:	2100      	movs	r1, #0
 8001614:	4814      	ldr	r0, [pc, #80]	@ (8001668 <main+0x124>)
 8001616:	f007 fffb 	bl	8009610 <osThreadNew>
 800161a:	4603      	mov	r3, r0
 800161c:	4a13      	ldr	r2, [pc, #76]	@ (800166c <main+0x128>)
 800161e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001620:	f007 ffc2 	bl	80095a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <main+0xe0>
 8001628:	2000032c 	.word	0x2000032c
 800162c:	200003c4 	.word	0x200003c4
 8001630:	20000378 	.word	0x20000378
 8001634:	200002e0 	.word	0x200002e0
 8001638:	20000008 	.word	0x20000008
 800163c:	20000004 	.word	0x20000004
 8001640:	408f4000 	.word	0x408f4000
 8001644:	2000053c 	.word	0x2000053c
 8001648:	20000410 	.word	0x20000410
 800164c:	080111a8 	.word	0x080111a8
 8001650:	08001dc5 	.word	0x08001dc5
 8001654:	200004dc 	.word	0x200004dc
 8001658:	080111cc 	.word	0x080111cc
 800165c:	08001f11 	.word	0x08001f11
 8001660:	200004e0 	.word	0x200004e0
 8001664:	080111f0 	.word	0x080111f0
 8001668:	0800214d 	.word	0x0800214d
 800166c:	200004e4 	.word	0x200004e4

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b0a6      	sub	sp, #152	@ 0x98
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800167a:	2228      	movs	r2, #40	@ 0x28
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f00b fd7f 	bl	800d182 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2258      	movs	r2, #88	@ 0x58
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f00b fd71 	bl	800d182 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a0:	2301      	movs	r3, #1
 80016a2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016a8:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016bc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ca:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 faa6 	bl	8004c20 <HAL_RCC_OscConfig>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016da:	f000 fdf5 	bl	80022c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016de:	230f      	movs	r3, #15
 80016e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e2:	2302      	movs	r3, #2
 80016e4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80016f8:	2102      	movs	r1, #2
 80016fa:	4618      	mov	r0, r3
 80016fc:	f004 fae4 	bl	8005cc8 <HAL_RCC_ClockConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001706:	f000 fddf 	bl	80022c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM1
 800170a:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <SystemClock_Config+0xd8>)
 800170c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8001712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001718:	2300      	movs	r3, #0
 800171a:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 800171c:	2300      	movs	r3, #0
 800171e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 8001720:	2300      	movs	r3, #0
 8001722:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8001724:	2300      	movs	r3, #0
 8001726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8001728:	2300      	movs	r3, #0
 800172a:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fd1c 	bl	800616c <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800173a:	f000 fdc5 	bl	80022c8 <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3798      	adds	r7, #152	@ 0x98
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	00b03082 	.word	0x00b03082

0800174c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800175e:	1d3b      	adds	r3, r7, #4
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
 800176c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800176e:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <MX_ADC1_Init+0xdc>)
 8001770:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001774:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001776:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <MX_ADC1_Init+0xdc>)
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	4b2a      	ldr	r3, [pc, #168]	@ (8001828 <MX_ADC1_Init+0xdc>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001782:	4b29      	ldr	r3, [pc, #164]	@ (8001828 <MX_ADC1_Init+0xdc>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001788:	4b27      	ldr	r3, [pc, #156]	@ (8001828 <MX_ADC1_Init+0xdc>)
 800178a:	2200      	movs	r2, #0
 800178c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b26      	ldr	r3, [pc, #152]	@ (8001828 <MX_ADC1_Init+0xdc>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001796:	4b24      	ldr	r3, [pc, #144]	@ (8001828 <MX_ADC1_Init+0xdc>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b22      	ldr	r3, [pc, #136]	@ (8001828 <MX_ADC1_Init+0xdc>)
 800179e:	2201      	movs	r2, #1
 80017a0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <MX_ADC1_Init+0xdc>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001828 <MX_ADC1_Init+0xdc>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <MX_ADC1_Init+0xdc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <MX_ADC1_Init+0xdc>)
 80017b8:	2204      	movs	r2, #4
 80017ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001828 <MX_ADC1_Init+0xdc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <MX_ADC1_Init+0xdc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c8:	4817      	ldr	r0, [pc, #92]	@ (8001828 <MX_ADC1_Init+0xdc>)
 80017ca:	f001 f981 	bl	8002ad0 <HAL_ADC_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80017d4:	f000 fd78 	bl	80022c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4811      	ldr	r0, [pc, #68]	@ (8001828 <MX_ADC1_Init+0xdc>)
 80017e4:	f002 fb8c 	bl	8003f00 <HAL_ADCEx_MultiModeConfigChannel>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80017ee:	f000 fd6b 	bl	80022c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80017f2:	2308      	movs	r3, #8
 80017f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017f6:	2301      	movs	r3, #1
 80017f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800180a:	1d3b      	adds	r3, r7, #4
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	@ (8001828 <MX_ADC1_Init+0xdc>)
 8001810:	f002 f88c 	bl	800392c <HAL_ADC_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800181a:	f000 fd55 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	@ 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000200 	.word	0x20000200

0800182c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08c      	sub	sp, #48	@ 0x30
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	2200      	movs	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	609a      	str	r2, [r3, #8]
 800183e:	60da      	str	r2, [r3, #12]
 8001840:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001842:	f107 030c 	add.w	r3, r7, #12
 8001846:	2200      	movs	r2, #0
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	605a      	str	r2, [r3, #4]
 800184c:	609a      	str	r2, [r3, #8]
 800184e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800185a:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <MX_TIM1_Init+0x104>)
 800185c:	4a35      	ldr	r2, [pc, #212]	@ (8001934 <MX_TIM1_Init+0x108>)
 800185e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001860:	4b33      	ldr	r3, [pc, #204]	@ (8001930 <MX_TIM1_Init+0x104>)
 8001862:	2200      	movs	r2, #0
 8001864:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001866:	4b32      	ldr	r3, [pc, #200]	@ (8001930 <MX_TIM1_Init+0x104>)
 8001868:	2200      	movs	r2, #0
 800186a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800186c:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <MX_TIM1_Init+0x104>)
 800186e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001872:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001874:	4b2e      	ldr	r3, [pc, #184]	@ (8001930 <MX_TIM1_Init+0x104>)
 8001876:	2200      	movs	r2, #0
 8001878:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800187a:	4b2d      	ldr	r3, [pc, #180]	@ (8001930 <MX_TIM1_Init+0x104>)
 800187c:	2200      	movs	r2, #0
 800187e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001880:	4b2b      	ldr	r3, [pc, #172]	@ (8001930 <MX_TIM1_Init+0x104>)
 8001882:	2200      	movs	r2, #0
 8001884:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001886:	482a      	ldr	r0, [pc, #168]	@ (8001930 <MX_TIM1_Init+0x104>)
 8001888:	f005 f92c 	bl	8006ae4 <HAL_TIM_IC_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001892:	f000 fd19 	bl	80022c8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001896:	2304      	movs	r3, #4
 8001898:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800189a:	2350      	movs	r3, #80	@ 0x50
 800189c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800189e:	2300      	movs	r3, #0
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sSlaveConfig.TriggerFilter = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80018aa:	f107 031c 	add.w	r3, r7, #28
 80018ae:	4619      	mov	r1, r3
 80018b0:	481f      	ldr	r0, [pc, #124]	@ (8001930 <MX_TIM1_Init+0x104>)
 80018b2:	f005 fcea 	bl	800728a <HAL_TIM_SlaveConfigSynchro>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80018bc:	f000 fd04 	bl	80022c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80018c4:	2301      	movs	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	4619      	mov	r1, r3
 80018d8:	4815      	ldr	r0, [pc, #84]	@ (8001930 <MX_TIM1_Init+0x104>)
 80018da:	f005 fa5c 	bl	8006d96 <HAL_TIM_IC_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80018e4:	f000 fcf0 	bl	80022c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80018e8:	2302      	movs	r3, #2
 80018ea:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80018ec:	2302      	movs	r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	2204      	movs	r2, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	480d      	ldr	r0, [pc, #52]	@ (8001930 <MX_TIM1_Init+0x104>)
 80018fa:	f005 fa4c 	bl	8006d96 <HAL_TIM_IC_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001904:	f000 fce0 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	@ (8001930 <MX_TIM1_Init+0x104>)
 800191a:	f006 fb49 	bl	8007fb0 <HAL_TIMEx_MasterConfigSynchronization>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001924:	f000 fcd0 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	3730      	adds	r7, #48	@ 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000294 	.word	0x20000294
 8001934:	40012c00 	.word	0x40012c00

08001938 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08e      	sub	sp, #56	@ 0x38
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800196a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 800196c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001970:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001972:	4b2b      	ldr	r3, [pc, #172]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 8001974:	2247      	movs	r2, #71	@ 0x47
 8001976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b29      	ldr	r3, [pc, #164]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800197e:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 8001980:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800198c:	4b24      	ldr	r3, [pc, #144]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 800198e:	2280      	movs	r2, #128	@ 0x80
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001992:	4823      	ldr	r0, [pc, #140]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 8001994:	f004 fe08 	bl	80065a8 <HAL_TIM_Base_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800199e:	f000 fc93 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ac:	4619      	mov	r1, r3
 80019ae:	481c      	ldr	r0, [pc, #112]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 80019b0:	f005 fba2 	bl	80070f8 <HAL_TIM_ConfigClockSource>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019ba:	f000 fc85 	bl	80022c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019be:	4818      	ldr	r0, [pc, #96]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 80019c0:	f004 ff22 	bl	8006808 <HAL_TIM_PWM_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019ca:	f000 fc7d 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4810      	ldr	r0, [pc, #64]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 80019de:	f006 fae7 	bl	8007fb0 <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019e8:	f000 fc6e 	bl	80022c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ec:	2360      	movs	r3, #96	@ 0x60
 80019ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32;
 80019f0:	2320      	movs	r3, #32
 80019f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4807      	ldr	r0, [pc, #28]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 8001a04:	f005 fa64 	bl	8006ed0 <HAL_TIM_PWM_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a0e:	f000 fc5b 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a12:	4803      	ldr	r0, [pc, #12]	@ (8001a20 <MX_TIM2_Init+0xe8>)
 8001a14:	f000 fd96 	bl	8002544 <HAL_TIM_MspPostInit>

}
 8001a18:	bf00      	nop
 8001a1a:	3738      	adds	r7, #56	@ 0x38
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	200002e0 	.word	0x200002e0

08001a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001a44:	4a1d      	ldr	r2, [pc, #116]	@ (8001abc <MX_TIM3_Init+0x98>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001a4a:	2247      	movs	r2, #71	@ 0x47
 8001a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65534;
 8001a54:	4b18      	ldr	r3, [pc, #96]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001a56:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b15      	ldr	r3, [pc, #84]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a68:	4813      	ldr	r0, [pc, #76]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001a6a:	f004 fd9d 	bl	80065a8 <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a74:	f000 fc28 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001a86:	f005 fb37 	bl	80070f8 <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a90:	f000 fc1a 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	@ (8001ab8 <MX_TIM3_Init+0x94>)
 8001aa2:	f006 fa85 	bl	8007fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001aac:	f000 fc0c 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	2000032c 	.word	0x2000032c
 8001abc:	40000400 	.word	0x40000400

08001ac0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ade:	4b20      	ldr	r3, [pc, #128]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001ae0:	4a20      	ldr	r2, [pc, #128]	@ (8001b64 <MX_TIM8_Init+0xa4>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001af0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001af2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001af6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001afe:	4b18      	ldr	r3, [pc, #96]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b0a:	4815      	ldr	r0, [pc, #84]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001b0c:	f004 fd4c 	bl	80065a8 <HAL_TIM_Base_Init>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8001b16:	f000 fbd7 	bl	80022c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	4619      	mov	r1, r3
 8001b26:	480e      	ldr	r0, [pc, #56]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001b28:	f005 fae6 	bl	80070f8 <HAL_TIM_ConfigClockSource>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8001b32:	f000 fbc9 	bl	80022c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001b42:	1d3b      	adds	r3, r7, #4
 8001b44:	4619      	mov	r1, r3
 8001b46:	4806      	ldr	r0, [pc, #24]	@ (8001b60 <MX_TIM8_Init+0xa0>)
 8001b48:	f006 fa32 	bl	8007fb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001b52:	f000 fbb9 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	3720      	adds	r7, #32
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000378 	.word	0x20000378
 8001b64:	40013400 	.word	0x40013400

08001b68 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <MX_TIM16_Init+0x44>)
 8001b6e:	4a10      	ldr	r2, [pc, #64]	@ (8001bb0 <MX_TIM16_Init+0x48>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 71;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_TIM16_Init+0x44>)
 8001b74:	2247      	movs	r2, #71	@ 0x47
 8001b76:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b0c      	ldr	r3, [pc, #48]	@ (8001bac <MX_TIM16_Init+0x44>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <MX_TIM16_Init+0x44>)
 8001b80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b84:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <MX_TIM16_Init+0x44>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001b8c:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <MX_TIM16_Init+0x44>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b92:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <MX_TIM16_Init+0x44>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001b98:	4804      	ldr	r0, [pc, #16]	@ (8001bac <MX_TIM16_Init+0x44>)
 8001b9a:	f004 fd05 	bl	80065a8 <HAL_TIM_Base_Init>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001ba4:	f000 fb90 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	200003c4 	.word	0x200003c4
 8001bb0:	40014400 	.word	0x40014400

08001bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bb8:	4b14      	ldr	r3, [pc, #80]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bba:	4a15      	ldr	r2, [pc, #84]	@ (8001c10 <MX_USART2_UART_Init+0x5c>)
 8001bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bbe:	4b13      	ldr	r3, [pc, #76]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc6:	4b11      	ldr	r3, [pc, #68]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bda:	220c      	movs	r2, #12
 8001bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be4:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bea:	4b08      	ldr	r3, [pc, #32]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf0:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf6:	4805      	ldr	r0, [pc, #20]	@ (8001c0c <MX_USART2_UART_Init+0x58>)
 8001bf8:	f006 fa84 	bl	8008104 <HAL_UART_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001c02:	f000 fb61 	bl	80022c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000410 	.word	0x20000410
 8001c10:	40004400 	.word	0x40004400

08001c14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <MX_DMA_Init+0x48>)
 8001c1c:	695b      	ldr	r3, [r3, #20]
 8001c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c5c <MX_DMA_Init+0x48>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6153      	str	r3, [r2, #20]
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <MX_DMA_Init+0x48>)
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8001c32:	2200      	movs	r2, #0
 8001c34:	2105      	movs	r1, #5
 8001c36:	200b      	movs	r0, #11
 8001c38:	f002 fbd6 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c3c:	200b      	movs	r0, #11
 8001c3e:	f002 fbef 	bl	8004420 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2105      	movs	r1, #5
 8001c46:	2010      	movs	r0, #16
 8001c48:	f002 fbce 	bl	80043e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001c4c:	2010      	movs	r0, #16
 8001c4e:	f002 fbe7 	bl	8004420 <HAL_NVIC_EnableIRQ>

}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000

08001c60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08a      	sub	sp, #40	@ 0x28
 8001c64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
 8001c70:	609a      	str	r2, [r3, #8]
 8001c72:	60da      	str	r2, [r3, #12]
 8001c74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c76:	4b50      	ldr	r3, [pc, #320]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	4a4f      	ldr	r2, [pc, #316]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001c7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001c80:	6153      	str	r3, [r2, #20]
 8001c82:	4b4d      	ldr	r3, [pc, #308]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001c90:	695b      	ldr	r3, [r3, #20]
 8001c92:	4a49      	ldr	r2, [pc, #292]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001c94:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c98:	6153      	str	r3, [r2, #20]
 8001c9a:	4b47      	ldr	r3, [pc, #284]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b44      	ldr	r3, [pc, #272]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	4a43      	ldr	r2, [pc, #268]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	6153      	str	r3, [r2, #20]
 8001cb2:	4b41      	ldr	r3, [pc, #260]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cc8:	6153      	str	r3, [r2, #20]
 8001cca:	4b3b      	ldr	r3, [pc, #236]	@ (8001db8 <MX_GPIO_Init+0x158>)
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cd2:	607b      	str	r3, [r7, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, A5_Pin|A4_Pin, GPIO_PIN_RESET);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2103      	movs	r1, #3
 8001cda:	4838      	ldr	r0, [pc, #224]	@ (8001dbc <MX_GPIO_Init+0x15c>)
 8001cdc:	f002 ff68 	bl	8004bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A0_Pin|A1_Pin|A2_Pin|BRAKE_DYN_Pin
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f240 21d3 	movw	r1, #723	@ 0x2d3
 8001ce6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cea:	f002 ff61 	bl	8004bb0 <HAL_GPIO_WritePin>
                          |BRAKE_EN_Pin|D8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A3_Pin|PWM_SIGNAL_Pin|DIRECTION_CTRL_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2191      	movs	r1, #145	@ 0x91
 8001cf2:	4833      	ldr	r0, [pc, #204]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001cf4:	f002 ff5c 	bl	8004bb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001cf8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cfe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	482b      	ldr	r0, [pc, #172]	@ (8001dbc <MX_GPIO_Init+0x15c>)
 8001d10:	f002 fdc4 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : A5_Pin A4_Pin */
  GPIO_InitStruct.Pin = A5_Pin|A4_Pin;
 8001d14:	2303      	movs	r3, #3
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4824      	ldr	r0, [pc, #144]	@ (8001dbc <MX_GPIO_Init+0x15c>)
 8001d2c:	f002 fdb6 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin D8_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|D8_Pin;
 8001d30:	f240 2313 	movw	r3, #531	@ 0x213
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d42:	f107 0314 	add.w	r3, r7, #20
 8001d46:	4619      	mov	r1, r3
 8001d48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d4c:	f002 fda6 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : BRAKE_DYN_Pin BRAKE_EN_Pin */
  GPIO_InitStruct.Pin = BRAKE_DYN_Pin|BRAKE_EN_Pin;
 8001d50:	23c0      	movs	r3, #192	@ 0xc0
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d54:	2311      	movs	r3, #17
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d6a:	f002 fd97 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pins : A3_Pin PWM_SIGNAL_Pin */
  GPIO_InitStruct.Pin = A3_Pin|PWM_SIGNAL_Pin;
 8001d6e:	2311      	movs	r3, #17
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d72:	2301      	movs	r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	480e      	ldr	r0, [pc, #56]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001d86:	f002 fd89 	bl	800489c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIRECTION_CTRL_Pin */
  GPIO_InitStruct.Pin = DIRECTION_CTRL_Pin;
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d8e:	2311      	movs	r3, #17
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIRECTION_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4807      	ldr	r0, [pc, #28]	@ (8001dc0 <MX_GPIO_Init+0x160>)
 8001da2:	f002 fd7b 	bl	800489c <HAL_GPIO_Init>

  /**/
  HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 8001da6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001daa:	f002 ff19 	bl	8004be0 <HAL_I2CEx_EnableFastModePlus>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001dae:	bf00      	nop
 8001db0:	3728      	adds	r7, #40	@ 0x28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	48000800 	.word	0x48000800
 8001dc0:	48000400 	.word	0x48000400

08001dc4 <start_freq_meas>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_freq_meas */
void start_freq_meas(void *argument)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 8001dcc:	4843      	ldr	r0, [pc, #268]	@ (8001edc <start_freq_meas+0x118>)
 8001dce:	f001 f879 	bl	8002ec4 <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc1, ADC1_TIMEOUT) == HAL_OK)
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4841      	ldr	r0, [pc, #260]	@ (8001edc <start_freq_meas+0x118>)
 8001dd6:	f001 f98b 	bl	80030f0 <HAL_ADC_PollForConversion>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f5      	bne.n	8001dcc <start_freq_meas+0x8>
	  {
		  pot1_mV = ADC_REG2VOLTAGE(HAL_ADC_GetValue(&hadc1));
 8001de0:	483e      	ldr	r0, [pc, #248]	@ (8001edc <start_freq_meas+0x118>)
 8001de2:	f001 fa87 	bl	80032f4 <HAL_ADC_GetValue>
 8001de6:	ee07 0a90 	vmov	s15, r0
 8001dea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dee:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8001ee0 <start_freq_meas+0x11c>
 8001df2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001df6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001ee4 <start_freq_meas+0x120>
 8001dfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dfe:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8001ee8 <start_freq_meas+0x124>
 8001e02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e0a:	ee17 2a90 	vmov	r2, s15
 8001e0e:	4b37      	ldr	r3, [pc, #220]	@ (8001eec <start_freq_meas+0x128>)
 8001e10:	601a      	str	r2, [r3, #0]
			if((was_reached == 0) & (pot1_mV > 2800)) //2500
 8001e12:	4b37      	ldr	r3, [pc, #220]	@ (8001ef0 <start_freq_meas+0x12c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	bf0c      	ite	eq
 8001e1a:	2301      	moveq	r3, #1
 8001e1c:	2300      	movne	r3, #0
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b32      	ldr	r3, [pc, #200]	@ (8001eec <start_freq_meas+0x128>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8001e28:	bfcc      	ite	gt
 8001e2a:	2301      	movgt	r3, #1
 8001e2c:	2300      	movle	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <start_freq_meas+0x7a>
			{
				was_reached = 1;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <start_freq_meas+0x12c>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
			}

			if((was_reached == 1) & (pot1_mV < 100) & (previous_value < 100))
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef0 <start_freq_meas+0x12c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <start_freq_meas+0x128>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b63      	cmp	r3, #99	@ 0x63
 8001e52:	bfd4      	ite	le
 8001e54:	2301      	movle	r3, #1
 8001e56:	2300      	movgt	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <start_freq_meas+0x130>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b63      	cmp	r3, #99	@ 0x63
 8001e66:	bfd4      	ite	le
 8001e68:	2301      	movle	r3, #1
 8001e6a:	2300      	movgt	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0ab      	beq.n	8001dcc <start_freq_meas+0x8>
			{
				was_reached = 0;
 8001e74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <start_freq_meas+0x12c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
				if(change_operation == 0)
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <start_freq_meas+0x134>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <start_freq_meas+0xd2>
				{
					timer_val = __HAL_TIM_GET_COUNTER(&htim16);
 8001e82:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <start_freq_meas+0x138>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f00 <start_freq_meas+0x13c>)
 8001e8c:	801a      	strh	r2, [r3, #0]
					change_operation = 1;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <start_freq_meas+0x134>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e79a      	b.n	8001dcc <start_freq_meas+0x8>
				}
				else if(change_operation == 1)
 8001e96:	4b18      	ldr	r3, [pc, #96]	@ (8001ef8 <start_freq_meas+0x134>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d196      	bne.n	8001dcc <start_freq_meas+0x8>
				{
					timer_val = __HAL_TIM_GET_COUNTER(&htim16) - timer_val;
 8001e9e:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <start_freq_meas+0x138>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <start_freq_meas+0x13c>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <start_freq_meas+0x13c>)
 8001eb0:	801a      	strh	r2, [r3, #0]
					change_operation = 0;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <start_freq_meas+0x134>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
					cur_period = timer_val;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <start_freq_meas+0x13c>)
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <start_freq_meas+0x140>)
 8001ebe:	801a      	strh	r2, [r3, #0]
					freq = 1000000/cur_period;
 8001ec0:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <start_freq_meas+0x140>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <start_freq_meas+0x144>)
 8001ec8:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <start_freq_meas+0x148>)
 8001ed0:	801a      	strh	r2, [r3, #0]
					osDelay(1);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f007 fc46 	bl	8009764 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8001ed8:	e778      	b.n	8001dcc <start_freq_meas+0x8>
 8001eda:	bf00      	nop
 8001edc:	20000200 	.word	0x20000200
 8001ee0:	457ff000 	.word	0x457ff000
 8001ee4:	454e4000 	.word	0x454e4000
 8001ee8:	00000000 	.word	0x00000000
 8001eec:	200004e8 	.word	0x200004e8
 8001ef0:	20000500 	.word	0x20000500
 8001ef4:	200004ec 	.word	0x200004ec
 8001ef8:	20000568 	.word	0x20000568
 8001efc:	200003c4 	.word	0x200003c4
 8001f00:	20000566 	.word	0x20000566
 8001f04:	200004f2 	.word	0x200004f2
 8001f08:	000f4240 	.word	0x000f4240
 8001f0c:	200004f0 	.word	0x200004f0

08001f10 <start_motor_control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_motor_control */
void start_motor_control(void *argument)
{
 8001f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN start_motor_control */
  /* Infinite loop */
  for(;;)
  {
	  if(brake_dyn == 1)
 8001f1a:	4b80      	ldr	r3, [pc, #512]	@ (800211c <start_motor_control+0x20c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d114      	bne.n	8001f4c <start_motor_control+0x3c>
	  {
		  HAL_GPIO_WritePin(BRAKE_DYN_GPIO_Port, BRAKE_DYN_Pin, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	2140      	movs	r1, #64	@ 0x40
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2a:	f002 fe41 	bl	8004bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(BRAKE_EN_GPIO_Port, BRAKE_EN_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2180      	movs	r1, #128	@ 0x80
 8001f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f36:	f002 fe3b 	bl	8004bb0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000.0-0.0);
 8001f3a:	4b79      	ldr	r3, [pc, #484]	@ (8002120 <start_motor_control+0x210>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f42:	635a      	str	r2, [r3, #52]	@ 0x34
		  timer_val = 0;
 8001f44:	4b77      	ldr	r3, [pc, #476]	@ (8002124 <start_motor_control+0x214>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	801a      	strh	r2, [r3, #0]
 8001f4a:	e0d2      	b.n	80020f2 <start_motor_control+0x1e2>
	  }
	  else if(en_brake == 1)
 8001f4c:	4b76      	ldr	r3, [pc, #472]	@ (8002128 <start_motor_control+0x218>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d114      	bne.n	8001f7e <start_motor_control+0x6e>
	  {
		  HAL_GPIO_WritePin(BRAKE_DYN_GPIO_Port, BRAKE_DYN_Pin, GPIO_PIN_RESET);
 8001f54:	2200      	movs	r2, #0
 8001f56:	2140      	movs	r1, #64	@ 0x40
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f5c:	f002 fe28 	bl	8004bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(BRAKE_EN_GPIO_Port, BRAKE_EN_Pin, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	2180      	movs	r1, #128	@ 0x80
 8001f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f68:	f002 fe22 	bl	8004bb0 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000.0-0.0);
 8001f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8002120 <start_motor_control+0x210>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001f74:	635a      	str	r2, [r3, #52]	@ 0x34
		  timer_val = 0;
 8001f76:	4b6b      	ldr	r3, [pc, #428]	@ (8002124 <start_motor_control+0x214>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	801a      	strh	r2, [r3, #0]
 8001f7c:	e0b9      	b.n	80020f2 <start_motor_control+0x1e2>
	  }
	  else if((brake_dyn == 0) & (en_brake == 0))
 8001f7e:	4b67      	ldr	r3, [pc, #412]	@ (800211c <start_motor_control+0x20c>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b69      	ldr	r3, [pc, #420]	@ (8002128 <start_motor_control+0x218>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f040 80b2 	bne.w	80020f2 <start_motor_control+0x1e2>
	  {
		  HAL_GPIO_WritePin(BRAKE_DYN_GPIO_Port, BRAKE_DYN_Pin, GPIO_PIN_RESET);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2140      	movs	r1, #64	@ 0x40
 8001f92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f96:	f002 fe0b 	bl	8004bb0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(BRAKE_EN_GPIO_Port, BRAKE_EN_Pin, GPIO_PIN_RESET);
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fa2:	f002 fe05 	bl	8004bb0 <HAL_GPIO_WritePin>

		  if(vel <= ref_vel)
 8001fa6:	4b61      	ldr	r3, [pc, #388]	@ (800212c <start_motor_control+0x21c>)
 8001fa8:	881b      	ldrh	r3, [r3, #0]
 8001faa:	461a      	mov	r2, r3
 8001fac:	4b60      	ldr	r3, [pc, #384]	@ (8002130 <start_motor_control+0x220>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	dc05      	bgt.n	8001fc0 <start_motor_control+0xb0>
		  {
			  pwm_level = pwm_level + 1;
 8001fb4:	4b5f      	ldr	r3, [pc, #380]	@ (8002134 <start_motor_control+0x224>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	4a5e      	ldr	r2, [pc, #376]	@ (8002134 <start_motor_control+0x224>)
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e00b      	b.n	8001fd8 <start_motor_control+0xc8>
		  }
		  else if(vel > ref_vel)
 8001fc0:	4b5a      	ldr	r3, [pc, #360]	@ (800212c <start_motor_control+0x21c>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8002130 <start_motor_control+0x220>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	dd04      	ble.n	8001fd8 <start_motor_control+0xc8>
		  {
			  pwm_level = pwm_level - 1;
 8001fce:	4b59      	ldr	r3, [pc, #356]	@ (8002134 <start_motor_control+0x224>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	4a57      	ldr	r2, [pc, #348]	@ (8002134 <start_motor_control+0x224>)
 8001fd6:	6013      	str	r3, [r2, #0]
		  }

		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000.0-pwm_level);
 8001fd8:	4b56      	ldr	r3, [pc, #344]	@ (8002134 <start_motor_control+0x224>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe faa9 	bl	8000534 <__aeabi_i2d>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	f04f 0000 	mov.w	r0, #0
 8001fea:	4953      	ldr	r1, [pc, #332]	@ (8002138 <start_motor_control+0x228>)
 8001fec:	f7fe f954 	bl	8000298 <__aeabi_dsub>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	494a      	ldr	r1, [pc, #296]	@ (8002120 <start_motor_control+0x210>)
 8001ff6:	680c      	ldr	r4, [r1, #0]
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fddc 	bl	8000bb8 <__aeabi_d2uiz>
 8002000:	4603      	mov	r3, r0
 8002002:	6363      	str	r3, [r4, #52]	@ 0x34

		  if(fabs(ref_vel-vel) > 260.0)
 8002004:	4b4a      	ldr	r3, [pc, #296]	@ (8002130 <start_motor_control+0x220>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a48      	ldr	r2, [pc, #288]	@ (800212c <start_motor_control+0x21c>)
 800200a:	8812      	ldrh	r2, [r2, #0]
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa90 	bl	8000534 <__aeabi_i2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4690      	mov	r8, r2
 800201a:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	4b46      	ldr	r3, [pc, #280]	@ (800213c <start_motor_control+0x22c>)
 8002024:	4640      	mov	r0, r8
 8002026:	4649      	mov	r1, r9
 8002028:	f7fe fd7e 	bl	8000b28 <__aeabi_dcmpgt>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <start_motor_control+0x12a>
		  {
			  osDelay(10);
 8002032:	200a      	movs	r0, #10
 8002034:	f007 fb96 	bl	8009764 <osDelay>
 8002038:	e05b      	b.n	80020f2 <start_motor_control+0x1e2>
		  }
		  else if((fabs(ref_vel-vel) <= 260.0) & (fabs(ref_vel-vel) > 70.0))
 800203a:	4b3d      	ldr	r3, [pc, #244]	@ (8002130 <start_motor_control+0x220>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a3b      	ldr	r2, [pc, #236]	@ (800212c <start_motor_control+0x21c>)
 8002040:	8812      	ldrh	r2, [r2, #0]
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7fe fa75 	bl	8000534 <__aeabi_i2d>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4692      	mov	sl, r2
 8002050:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002054:	2301      	movs	r3, #1
 8002056:	461c      	mov	r4, r3
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b37      	ldr	r3, [pc, #220]	@ (800213c <start_motor_control+0x22c>)
 800205e:	4650      	mov	r0, sl
 8002060:	4659      	mov	r1, fp
 8002062:	f7fe fd4d 	bl	8000b00 <__aeabi_dcmple>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <start_motor_control+0x160>
 800206c:	2300      	movs	r3, #0
 800206e:	461c      	mov	r4, r3
 8002070:	b2e4      	uxtb	r4, r4
 8002072:	4b2f      	ldr	r3, [pc, #188]	@ (8002130 <start_motor_control+0x220>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2d      	ldr	r2, [pc, #180]	@ (800212c <start_motor_control+0x21c>)
 8002078:	8812      	ldrh	r2, [r2, #0]
 800207a:	1a9b      	subs	r3, r3, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa59 	bl	8000534 <__aeabi_i2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4615      	mov	r5, r2
 8002088:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800208c:	2301      	movs	r3, #1
 800208e:	72fb      	strb	r3, [r7, #11]
 8002090:	f04f 0200 	mov.w	r2, #0
 8002094:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <start_motor_control+0x230>)
 8002096:	4628      	mov	r0, r5
 8002098:	4631      	mov	r1, r6
 800209a:	f7fe fd45 	bl	8000b28 <__aeabi_dcmpgt>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <start_motor_control+0x198>
 80020a4:	2300      	movs	r3, #0
 80020a6:	72fb      	strb	r3, [r7, #11]
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	4023      	ands	r3, r4
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <start_motor_control+0x1aa>
		  {
			  osDelay(40);
 80020b2:	2028      	movs	r0, #40	@ 0x28
 80020b4:	f007 fb56 	bl	8009764 <osDelay>
 80020b8:	e01b      	b.n	80020f2 <start_motor_control+0x1e2>
		  }
		  else if(fabs(ref_vel-vel) <= 70.0)
 80020ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <start_motor_control+0x220>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <start_motor_control+0x21c>)
 80020c0:	8812      	ldrh	r2, [r2, #0]
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7fe fa35 	bl	8000534 <__aeabi_i2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	603a      	str	r2, [r7, #0]
 80020d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <start_motor_control+0x230>)
 80020dc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80020e0:	f7fe fd0e 	bl	8000b00 <__aeabi_dcmple>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <start_motor_control+0x1e2>
		  {
			  osDelay(500);
 80020ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80020ee:	f007 fb39 	bl	8009764 <osDelay>
		  }
	  }

	  if(direction == 0)
 80020f2:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <start_motor_control+0x234>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <start_motor_control+0x1f6>
	  {
		  HAL_GPIO_WritePin(DIRECTION_CTRL_GPIO_Port, DIRECTION_CTRL_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2180      	movs	r1, #128	@ 0x80
 80020fe:	4812      	ldr	r0, [pc, #72]	@ (8002148 <start_motor_control+0x238>)
 8002100:	f002 fd56 	bl	8004bb0 <HAL_GPIO_WritePin>
 8002104:	e709      	b.n	8001f1a <start_motor_control+0xa>
	  }
	  else if(direction == 1)
 8002106:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <start_motor_control+0x234>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	f47f af05 	bne.w	8001f1a <start_motor_control+0xa>
	  {
		  HAL_GPIO_WritePin(DIRECTION_CTRL_GPIO_Port, DIRECTION_CTRL_Pin, GPIO_PIN_SET);
 8002110:	2201      	movs	r2, #1
 8002112:	2180      	movs	r1, #128	@ 0x80
 8002114:	480c      	ldr	r0, [pc, #48]	@ (8002148 <start_motor_control+0x238>)
 8002116:	f002 fd4b 	bl	8004bb0 <HAL_GPIO_WritePin>
	  if(brake_dyn == 1)
 800211a:	e6fe      	b.n	8001f1a <start_motor_control+0xa>
 800211c:	20000008 	.word	0x20000008
 8002120:	200002e0 	.word	0x200002e0
 8002124:	20000566 	.word	0x20000566
 8002128:	200004f8 	.word	0x200004f8
 800212c:	200004f4 	.word	0x200004f4
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004
 8002138:	408f4000 	.word	0x408f4000
 800213c:	40704000 	.word	0x40704000
 8002140:	40518000 	.word	0x40518000
 8002144:	200004fc 	.word	0x200004fc
 8002148:	48000400 	.word	0x48000400

0800214c <start_lcd_work>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_lcd_work */
void start_lcd_work(void *argument)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_lcd_work */
	lcd_init();
 8002154:	f7fe fea1 	bl	8000e9a <lcd_init>
  /* Infinite loop */
  for(;;)
  {
	  if(brake_dyn == 1)
 8002158:	4b41      	ldr	r3, [pc, #260]	@ (8002260 <start_lcd_work+0x114>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d116      	bne.n	800218e <start_lcd_work+0x42>
	  {
		  lcd_clear();
 8002160:	f7fe fe72 	bl	8000e48 <lcd_clear>
		  lcd_put_cur(0, 0);
 8002164:	2100      	movs	r1, #0
 8002166:	2000      	movs	r0, #0
 8002168:	f7fe fe78 	bl	8000e5c <lcd_put_cur>
		  lcd_send_string("HAMOWANIE");
 800216c:	483d      	ldr	r0, [pc, #244]	@ (8002264 <start_lcd_work+0x118>)
 800216e:	f7fe fed1 	bl	8000f14 <lcd_send_string>
		  lcd_put_cur(1, 0);
 8002172:	2100      	movs	r1, #0
 8002174:	2001      	movs	r0, #1
 8002176:	f7fe fe71 	bl	8000e5c <lcd_put_cur>
		  lcd_send_string("DYNAMICZNE!");
 800217a:	483b      	ldr	r0, [pc, #236]	@ (8002268 <start_lcd_work+0x11c>)
 800217c:	f7fe feca 	bl	8000f14 <lcd_send_string>
		  timer_val = 0;
 8002180:	4b3a      	ldr	r3, [pc, #232]	@ (800226c <start_lcd_work+0x120>)
 8002182:	2200      	movs	r2, #0
 8002184:	801a      	strh	r2, [r3, #0]
		  osDelay(10);
 8002186:	200a      	movs	r0, #10
 8002188:	f007 faec 	bl	8009764 <osDelay>
 800218c:	e7e4      	b.n	8002158 <start_lcd_work+0xc>
	  }
	  else if(en_brake == 1)
 800218e:	4b38      	ldr	r3, [pc, #224]	@ (8002270 <start_lcd_work+0x124>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d116      	bne.n	80021c4 <start_lcd_work+0x78>
	  {
		  lcd_clear();
 8002196:	f7fe fe57 	bl	8000e48 <lcd_clear>
		  lcd_put_cur(0, 0);
 800219a:	2100      	movs	r1, #0
 800219c:	2000      	movs	r0, #0
 800219e:	f7fe fe5d 	bl	8000e5c <lcd_put_cur>
		  lcd_send_string("HAMOWANIE");
 80021a2:	4830      	ldr	r0, [pc, #192]	@ (8002264 <start_lcd_work+0x118>)
 80021a4:	f7fe feb6 	bl	8000f14 <lcd_send_string>
		  lcd_put_cur(1, 0);
 80021a8:	2100      	movs	r1, #0
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7fe fe56 	bl	8000e5c <lcd_put_cur>
		  lcd_send_string("AKTYWNE!");
 80021b0:	4830      	ldr	r0, [pc, #192]	@ (8002274 <start_lcd_work+0x128>)
 80021b2:	f7fe feaf 	bl	8000f14 <lcd_send_string>
		  timer_val = 0;
 80021b6:	4b2d      	ldr	r3, [pc, #180]	@ (800226c <start_lcd_work+0x120>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	801a      	strh	r2, [r3, #0]
		  osDelay(10);
 80021bc:	200a      	movs	r0, #10
 80021be:	f007 fad1 	bl	8009764 <osDelay>
 80021c2:	e7c9      	b.n	8002158 <start_lcd_work+0xc>
	  }
	  else if((brake_dyn == 0) & (en_brake == 0))
 80021c4:	4b26      	ldr	r3, [pc, #152]	@ (8002260 <start_lcd_work+0x114>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b29      	ldr	r3, [pc, #164]	@ (8002270 <start_lcd_work+0x124>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1c2      	bne.n	8002158 <start_lcd_work+0xc>
	  {
			lcd_clear();
 80021d2:	f7fe fe39 	bl	8000e48 <lcd_clear>
			lcd_put_cur(0, 0);
 80021d6:	2100      	movs	r1, #0
 80021d8:	2000      	movs	r0, #0
 80021da:	f7fe fe3f 	bl	8000e5c <lcd_put_cur>
			lcd_send_string("Predkosc:");
 80021de:	4826      	ldr	r0, [pc, #152]	@ (8002278 <start_lcd_work+0x12c>)
 80021e0:	f7fe fe98 	bl	8000f14 <lcd_send_string>
			vel = freq*60/4;
 80021e4:	4b25      	ldr	r3, [pc, #148]	@ (800227c <start_lcd_work+0x130>)
 80021e6:	881b      	ldrh	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	4b23      	ldr	r3, [pc, #140]	@ (8002280 <start_lcd_work+0x134>)
 80021f2:	801a      	strh	r2, [r3, #0]
			uart_buf_len = sprintf(led_buf, "%uRPM",vel);
 80021f4:	4b22      	ldr	r3, [pc, #136]	@ (8002280 <start_lcd_work+0x134>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	461a      	mov	r2, r3
 80021fa:	4922      	ldr	r1, [pc, #136]	@ (8002284 <start_lcd_work+0x138>)
 80021fc:	4822      	ldr	r0, [pc, #136]	@ (8002288 <start_lcd_work+0x13c>)
 80021fe:	f00a ff31 	bl	800d064 <siprintf>
 8002202:	4603      	mov	r3, r0
 8002204:	4a21      	ldr	r2, [pc, #132]	@ (800228c <start_lcd_work+0x140>)
 8002206:	6013      	str	r3, [r2, #0]
			lcd_send_string(led_buf);
 8002208:	481f      	ldr	r0, [pc, #124]	@ (8002288 <start_lcd_work+0x13c>)
 800220a:	f7fe fe83 	bl	8000f14 <lcd_send_string>
			lcd_put_cur(1, 0);
 800220e:	2100      	movs	r1, #0
 8002210:	2001      	movs	r0, #1
 8002212:	f7fe fe23 	bl	8000e5c <lcd_put_cur>
			uart_buf_len = sprintf(led_buf, "PWM:%d ",pwm_level/10);
 8002216:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <start_lcd_work+0x144>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1e      	ldr	r2, [pc, #120]	@ (8002294 <start_lcd_work+0x148>)
 800221c:	fb82 1203 	smull	r1, r2, r2, r3
 8002220:	1092      	asrs	r2, r2, #2
 8002222:	17db      	asrs	r3, r3, #31
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	461a      	mov	r2, r3
 8002228:	491b      	ldr	r1, [pc, #108]	@ (8002298 <start_lcd_work+0x14c>)
 800222a:	4817      	ldr	r0, [pc, #92]	@ (8002288 <start_lcd_work+0x13c>)
 800222c:	f00a ff1a 	bl	800d064 <siprintf>
 8002230:	4603      	mov	r3, r0
 8002232:	4a16      	ldr	r2, [pc, #88]	@ (800228c <start_lcd_work+0x140>)
 8002234:	6013      	str	r3, [r2, #0]
			lcd_send_string(led_buf);
 8002236:	4814      	ldr	r0, [pc, #80]	@ (8002288 <start_lcd_work+0x13c>)
 8002238:	f7fe fe6c 	bl	8000f14 <lcd_send_string>
			uart_buf_len = sprintf(led_buf, "Ref.:%i",ref_vel);
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <start_lcd_work+0x150>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	461a      	mov	r2, r3
 8002242:	4917      	ldr	r1, [pc, #92]	@ (80022a0 <start_lcd_work+0x154>)
 8002244:	4810      	ldr	r0, [pc, #64]	@ (8002288 <start_lcd_work+0x13c>)
 8002246:	f00a ff0d 	bl	800d064 <siprintf>
 800224a:	4603      	mov	r3, r0
 800224c:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <start_lcd_work+0x140>)
 800224e:	6013      	str	r3, [r2, #0]
			lcd_send_string(led_buf);
 8002250:	480d      	ldr	r0, [pc, #52]	@ (8002288 <start_lcd_work+0x13c>)
 8002252:	f7fe fe5f 	bl	8000f14 <lcd_send_string>
			osDelay(750);
 8002256:	f240 20ee 	movw	r0, #750	@ 0x2ee
 800225a:	f007 fa83 	bl	8009764 <osDelay>
	  if(brake_dyn == 1)
 800225e:	e77b      	b.n	8002158 <start_lcd_work+0xc>
 8002260:	20000008 	.word	0x20000008
 8002264:	0801113c 	.word	0x0801113c
 8002268:	08011148 	.word	0x08011148
 800226c:	20000566 	.word	0x20000566
 8002270:	200004f8 	.word	0x200004f8
 8002274:	08011154 	.word	0x08011154
 8002278:	08011160 	.word	0x08011160
 800227c:	200004f0 	.word	0x200004f0
 8002280:	200004f4 	.word	0x200004f4
 8002284:	0801116c 	.word	0x0801116c
 8002288:	20000508 	.word	0x20000508
 800228c:	20000504 	.word	0x20000504
 8002290:	20000004 	.word	0x20000004
 8002294:	66666667 	.word	0x66666667
 8002298:	08011174 	.word	0x08011174
 800229c:	20000000 	.word	0x20000000
 80022a0:	0801117c 	.word	0x0801117c

080022a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022b6:	f000 fbcd 	bl	8002a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40001000 	.word	0x40001000

080022c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022cc:	b672      	cpsid	i
}
 80022ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <Error_Handler+0x8>

080022d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022da:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <HAL_MspInit+0x4c>)
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_MspInit+0x4c>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6193      	str	r3, [r2, #24]
 80022e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002320 <HAL_MspInit+0x4c>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <HAL_MspInit+0x4c>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <HAL_MspInit+0x4c>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022fc:	61d3      	str	r3, [r2, #28]
 80022fe:	4b08      	ldr	r3, [pc, #32]	@ (8002320 <HAL_MspInit+0x4c>)
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800230a:	2200      	movs	r2, #0
 800230c:	210f      	movs	r1, #15
 800230e:	f06f 0001 	mvn.w	r0, #1
 8002312:	f002 f869 	bl	80043e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40021000 	.word	0x40021000

08002324 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0314 	add.w	r3, r7, #20
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002344:	d154      	bne.n	80023f0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002346:	4b2c      	ldr	r3, [pc, #176]	@ (80023f8 <HAL_ADC_MspInit+0xd4>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	4a2b      	ldr	r2, [pc, #172]	@ (80023f8 <HAL_ADC_MspInit+0xd4>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002350:	6153      	str	r3, [r2, #20]
 8002352:	4b29      	ldr	r3, [pc, #164]	@ (80023f8 <HAL_ADC_MspInit+0xd4>)
 8002354:	695b      	ldr	r3, [r3, #20]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235e:	4b26      	ldr	r3, [pc, #152]	@ (80023f8 <HAL_ADC_MspInit+0xd4>)
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	4a25      	ldr	r2, [pc, #148]	@ (80023f8 <HAL_ADC_MspInit+0xd4>)
 8002364:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002368:	6153      	str	r3, [r2, #20]
 800236a:	4b23      	ldr	r3, [pc, #140]	@ (80023f8 <HAL_ADC_MspInit+0xd4>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002376:	2304      	movs	r3, #4
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237a:	2303      	movs	r3, #3
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002382:	f107 0314 	add.w	r3, r7, #20
 8002386:	4619      	mov	r1, r3
 8002388:	481c      	ldr	r0, [pc, #112]	@ (80023fc <HAL_ADC_MspInit+0xd8>)
 800238a:	f002 fa87 	bl	800489c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800238e:	4b1c      	ldr	r3, [pc, #112]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 8002390:	4a1c      	ldr	r2, [pc, #112]	@ (8002404 <HAL_ADC_MspInit+0xe0>)
 8002392:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002394:	4b1a      	ldr	r3, [pc, #104]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 8002396:	2200      	movs	r2, #0
 8002398:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800239a:	4b19      	ldr	r3, [pc, #100]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 800239c:	2200      	movs	r2, #0
 800239e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80023a0:	4b17      	ldr	r3, [pc, #92]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 80023a2:	2280      	movs	r2, #128	@ 0x80
 80023a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023a6:	4b16      	ldr	r3, [pc, #88]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 80023a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80023ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023ae:	4b14      	ldr	r3, [pc, #80]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 80023b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80023b6:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 80023b8:	2220      	movs	r2, #32
 80023ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023bc:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 80023be:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80023c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80023c4:	480e      	ldr	r0, [pc, #56]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 80023c6:	f002 f839 	bl	800443c <HAL_DMA_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80023d0:	f7ff ff7a 	bl	80022c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 80023d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80023da:	4a09      	ldr	r2, [pc, #36]	@ (8002400 <HAL_ADC_MspInit+0xdc>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80023e0:	2200      	movs	r2, #0
 80023e2:	2105      	movs	r1, #5
 80023e4:	2012      	movs	r0, #18
 80023e6:	f001 ffff 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80023ea:	2012      	movs	r0, #18
 80023ec:	f002 f818 	bl	8004420 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023f0:	bf00      	nop
 80023f2:	3728      	adds	r7, #40	@ 0x28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000
 80023fc:	48000800 	.word	0x48000800
 8002400:	20000250 	.word	0x20000250
 8002404:	40020008 	.word	0x40020008

08002408 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a18      	ldr	r2, [pc, #96]	@ (8002488 <HAL_TIM_IC_MspInit+0x80>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d129      	bne.n	800247e <HAL_TIM_IC_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800242a:	4b18      	ldr	r3, [pc, #96]	@ (800248c <HAL_TIM_IC_MspInit+0x84>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	4a17      	ldr	r2, [pc, #92]	@ (800248c <HAL_TIM_IC_MspInit+0x84>)
 8002430:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002434:	6193      	str	r3, [r2, #24]
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <HAL_TIM_IC_MspInit+0x84>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002442:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_TIM_IC_MspInit+0x84>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	4a11      	ldr	r2, [pc, #68]	@ (800248c <HAL_TIM_IC_MspInit+0x84>)
 8002448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800244c:	6153      	str	r3, [r2, #20]
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <HAL_TIM_IC_MspInit+0x84>)
 8002450:	695b      	ldr	r3, [r3, #20]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800245a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800245e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800246c:	2306      	movs	r3, #6
 800246e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 0314 	add.w	r3, r7, #20
 8002474:	4619      	mov	r1, r3
 8002476:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800247a:	f002 fa0f 	bl	800489c <HAL_GPIO_Init>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800247e:	bf00      	nop
 8002480:	3728      	adds	r7, #40	@ 0x28
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40012c00 	.word	0x40012c00
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002490:	b480      	push	{r7}
 8002492:	b087      	sub	sp, #28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024a0:	d10c      	bne.n	80024bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024a2:	4b24      	ldr	r3, [pc, #144]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	4a23      	ldr	r2, [pc, #140]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024a8:	f043 0301 	orr.w	r3, r3, #1
 80024ac:	61d3      	str	r3, [r2, #28]
 80024ae:	4b21      	ldr	r3, [pc, #132]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80024ba:	e034      	b.n	8002526 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <HAL_TIM_Base_MspInit+0xa8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d10c      	bne.n	80024e0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024cc:	f043 0302 	orr.w	r3, r3, #2
 80024d0:	61d3      	str	r3, [r2, #28]
 80024d2:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	693b      	ldr	r3, [r7, #16]
}
 80024de:	e022      	b.n	8002526 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a15      	ldr	r2, [pc, #84]	@ (800253c <HAL_TIM_Base_MspInit+0xac>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d10c      	bne.n	8002504 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024ea:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	4a11      	ldr	r2, [pc, #68]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024f4:	6193      	str	r3, [r2, #24]
 80024f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
}
 8002502:	e010      	b.n	8002526 <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM16)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a0d      	ldr	r2, [pc, #52]	@ (8002540 <HAL_TIM_Base_MspInit+0xb0>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10b      	bne.n	8002526 <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800250e:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	4a08      	ldr	r2, [pc, #32]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 8002514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002518:	6193      	str	r3, [r2, #24]
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_TIM_Base_MspInit+0xa4>)
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002522:	60bb      	str	r3, [r7, #8]
 8002524:	68bb      	ldr	r3, [r7, #8]
}
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	40000400 	.word	0x40000400
 800253c:	40013400 	.word	0x40013400
 8002540:	40014400 	.word	0x40014400

08002544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b088      	sub	sp, #32
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 030c 	add.w	r3, r7, #12
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002564:	d11c      	bne.n	80025a0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002566:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_TIM_MspPostInit+0x64>)
 8002568:	695b      	ldr	r3, [r3, #20]
 800256a:	4a0f      	ldr	r2, [pc, #60]	@ (80025a8 <HAL_TIM_MspPostInit+0x64>)
 800256c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002570:	6153      	str	r3, [r2, #20]
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_TIM_MspPostInit+0x64>)
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800257e:	2320      	movs	r3, #32
 8002580:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800258e:	2301      	movs	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	4619      	mov	r1, r3
 8002598:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800259c:	f002 f97e 	bl	800489c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80025a0:	bf00      	nop
 80025a2:	3720      	adds	r7, #32
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	@ 0x28
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0314 	add.w	r3, r7, #20
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002684 <HAL_UART_MspInit+0xd8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d156      	bne.n	800267c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002688 <HAL_UART_MspInit+0xdc>)
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002688 <HAL_UART_MspInit+0xdc>)
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d8:	61d3      	str	r3, [r2, #28]
 80025da:	4b2b      	ldr	r3, [pc, #172]	@ (8002688 <HAL_UART_MspInit+0xdc>)
 80025dc:	69db      	ldr	r3, [r3, #28]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e6:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_UART_MspInit+0xdc>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	4a27      	ldr	r2, [pc, #156]	@ (8002688 <HAL_UART_MspInit+0xdc>)
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f0:	6153      	str	r3, [r2, #20]
 80025f2:	4b25      	ldr	r3, [pc, #148]	@ (8002688 <HAL_UART_MspInit+0xdc>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025fe:	230c      	movs	r3, #12
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800260e:	2307      	movs	r3, #7
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800261c:	f002 f93e 	bl	800489c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002620:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <HAL_UART_MspInit+0xe0>)
 8002622:	4a1b      	ldr	r2, [pc, #108]	@ (8002690 <HAL_UART_MspInit+0xe4>)
 8002624:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002626:	4b19      	ldr	r3, [pc, #100]	@ (800268c <HAL_UART_MspInit+0xe0>)
 8002628:	2200      	movs	r2, #0
 800262a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800262c:	4b17      	ldr	r3, [pc, #92]	@ (800268c <HAL_UART_MspInit+0xe0>)
 800262e:	2200      	movs	r2, #0
 8002630:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002632:	4b16      	ldr	r3, [pc, #88]	@ (800268c <HAL_UART_MspInit+0xe0>)
 8002634:	2280      	movs	r2, #128	@ 0x80
 8002636:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002638:	4b14      	ldr	r3, [pc, #80]	@ (800268c <HAL_UART_MspInit+0xe0>)
 800263a:	2200      	movs	r2, #0
 800263c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263e:	4b13      	ldr	r3, [pc, #76]	@ (800268c <HAL_UART_MspInit+0xe0>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <HAL_UART_MspInit+0xe0>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <HAL_UART_MspInit+0xe0>)
 800264c:	2200      	movs	r2, #0
 800264e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002650:	480e      	ldr	r0, [pc, #56]	@ (800268c <HAL_UART_MspInit+0xe0>)
 8002652:	f001 fef3 	bl	800443c <HAL_DMA_Init>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 800265c:	f7ff fe34 	bl	80022c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a0a      	ldr	r2, [pc, #40]	@ (800268c <HAL_UART_MspInit+0xe0>)
 8002664:	675a      	str	r2, [r3, #116]	@ 0x74
 8002666:	4a09      	ldr	r2, [pc, #36]	@ (800268c <HAL_UART_MspInit+0xe0>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800266c:	2200      	movs	r2, #0
 800266e:	2105      	movs	r1, #5
 8002670:	2026      	movs	r0, #38	@ 0x26
 8002672:	f001 feb9 	bl	80043e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002676:	2026      	movs	r0, #38	@ 0x26
 8002678:	f001 fed2 	bl	8004420 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800267c:	bf00      	nop
 800267e:	3728      	adds	r7, #40	@ 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40004400 	.word	0x40004400
 8002688:	40021000 	.word	0x40021000
 800268c:	20000498 	.word	0x20000498
 8002690:	4002006c 	.word	0x4002006c

08002694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	@ 0x38
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80026a4:	4b33      	ldr	r3, [pc, #204]	@ (8002774 <HAL_InitTick+0xe0>)
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	4a32      	ldr	r2, [pc, #200]	@ (8002774 <HAL_InitTick+0xe0>)
 80026aa:	f043 0310 	orr.w	r3, r3, #16
 80026ae:	61d3      	str	r3, [r2, #28]
 80026b0:	4b30      	ldr	r3, [pc, #192]	@ (8002774 <HAL_InitTick+0xe0>)
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	60fb      	str	r3, [r7, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026bc:	f107 0210 	add.w	r2, r7, #16
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fd1e 	bl	8006108 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026cc:	6a3b      	ldr	r3, [r7, #32]
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026d6:	f003 fcd3 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 80026da:	6378      	str	r0, [r7, #52]	@ 0x34
 80026dc:	e004      	b.n	80026e8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026de:	f003 fccf 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 80026e2:	4603      	mov	r3, r0
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ea:	4a23      	ldr	r2, [pc, #140]	@ (8002778 <HAL_InitTick+0xe4>)
 80026ec:	fba2 2303 	umull	r2, r3, r2, r3
 80026f0:	0c9b      	lsrs	r3, r3, #18
 80026f2:	3b01      	subs	r3, #1
 80026f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80026f6:	4b21      	ldr	r3, [pc, #132]	@ (800277c <HAL_InitTick+0xe8>)
 80026f8:	4a21      	ldr	r2, [pc, #132]	@ (8002780 <HAL_InitTick+0xec>)
 80026fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80026fc:	4b1f      	ldr	r3, [pc, #124]	@ (800277c <HAL_InitTick+0xe8>)
 80026fe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002702:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002704:	4a1d      	ldr	r2, [pc, #116]	@ (800277c <HAL_InitTick+0xe8>)
 8002706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002708:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800270a:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <HAL_InitTick+0xe8>)
 800270c:	2200      	movs	r2, #0
 800270e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002710:	4b1a      	ldr	r3, [pc, #104]	@ (800277c <HAL_InitTick+0xe8>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002716:	4b19      	ldr	r3, [pc, #100]	@ (800277c <HAL_InitTick+0xe8>)
 8002718:	2200      	movs	r2, #0
 800271a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800271c:	4817      	ldr	r0, [pc, #92]	@ (800277c <HAL_InitTick+0xe8>)
 800271e:	f003 ff43 	bl	80065a8 <HAL_TIM_Base_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002728:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800272c:	2b00      	cmp	r3, #0
 800272e:	d11b      	bne.n	8002768 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002730:	4812      	ldr	r0, [pc, #72]	@ (800277c <HAL_InitTick+0xe8>)
 8002732:	f003 fff9 	bl	8006728 <HAL_TIM_Base_Start_IT>
 8002736:	4603      	mov	r3, r0
 8002738:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800273c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002740:	2b00      	cmp	r3, #0
 8002742:	d111      	bne.n	8002768 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002744:	2036      	movs	r0, #54	@ 0x36
 8002746:	f001 fe6b 	bl	8004420 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d808      	bhi.n	8002762 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	2036      	movs	r0, #54	@ 0x36
 8002756:	f001 fe47 	bl	80043e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800275a:	4a0a      	ldr	r2, [pc, #40]	@ (8002784 <HAL_InitTick+0xf0>)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	e002      	b.n	8002768 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002768:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800276c:	4618      	mov	r0, r3
 800276e:	3738      	adds	r7, #56	@ 0x38
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000
 8002778:	431bde83 	.word	0x431bde83
 800277c:	2000056c 	.word	0x2000056c
 8002780:	40001000 	.word	0x40001000
 8002784:	20000010 	.word	0x20000010

08002788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <NMI_Handler+0x4>

08002790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <HardFault_Handler+0x4>

08002798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <MemManage_Handler+0x4>

080027a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <BusFault_Handler+0x4>

080027a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <UsageFault_Handler+0x4>

080027b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
	...

080027c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027c4:	4802      	ldr	r0, [pc, #8]	@ (80027d0 <DMA1_Channel1_IRQHandler+0x10>)
 80027c6:	f001 ff5b 	bl	8004680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000250 	.word	0x20000250

080027d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80027d8:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <DMA1_Channel6_IRQHandler+0x10>)
 80027da:	f001 ff51 	bl	8004680 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000498 	.word	0x20000498

080027e8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027ec:	4802      	ldr	r0, [pc, #8]	@ (80027f8 <ADC1_2_IRQHandler+0x10>)
 80027ee:	f000 fd8f 	bl	8003310 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000200 	.word	0x20000200

080027fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002800:	4802      	ldr	r0, [pc, #8]	@ (800280c <USART2_IRQHandler+0x10>)
 8002802:	f005 fd9b 	bl	800833c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000410 	.word	0x20000410

08002810 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <TIM6_DAC_IRQHandler+0x10>)
 8002816:	f004 f9bc 	bl	8006b92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	2000056c 	.word	0x2000056c

08002824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  return 1;
 8002828:	2301      	movs	r3, #1
}
 800282a:	4618      	mov	r0, r3
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_kill>:

int _kill(int pid, int sig)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800283e:	f00a fd59 	bl	800d2f4 <__errno>
 8002842:	4603      	mov	r3, r0
 8002844:	2216      	movs	r2, #22
 8002846:	601a      	str	r2, [r3, #0]
  return -1;
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <_exit>:

void _exit (int status)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800285c:	f04f 31ff 	mov.w	r1, #4294967295
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7ff ffe7 	bl	8002834 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002866:	bf00      	nop
 8002868:	e7fd      	b.n	8002866 <_exit+0x12>

0800286a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b086      	sub	sp, #24
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	e00a      	b.n	8002892 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800287c:	f3af 8000 	nop.w
 8002880:	4601      	mov	r1, r0
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	60ba      	str	r2, [r7, #8]
 8002888:	b2ca      	uxtb	r2, r1
 800288a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	3301      	adds	r3, #1
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	429a      	cmp	r2, r3
 8002898:	dbf0      	blt.n	800287c <_read+0x12>
  }

  return len;
 800289a:	687b      	ldr	r3, [r7, #4]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
 80028b4:	e009      	b.n	80028ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	60ba      	str	r2, [r7, #8]
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3301      	adds	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	dbf1      	blt.n	80028b6 <_write+0x12>
  }
  return len;
 80028d2:	687b      	ldr	r3, [r7, #4]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_close>:

int _close(int file)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002904:	605a      	str	r2, [r3, #4]
  return 0;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <_isatty>:

int _isatty(int file)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800291c:	2301      	movs	r3, #1
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800294c:	4a14      	ldr	r2, [pc, #80]	@ (80029a0 <_sbrk+0x5c>)
 800294e:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <_sbrk+0x60>)
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002958:	4b13      	ldr	r3, [pc, #76]	@ (80029a8 <_sbrk+0x64>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d102      	bne.n	8002966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002960:	4b11      	ldr	r3, [pc, #68]	@ (80029a8 <_sbrk+0x64>)
 8002962:	4a12      	ldr	r2, [pc, #72]	@ (80029ac <_sbrk+0x68>)
 8002964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <_sbrk+0x64>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	429a      	cmp	r2, r3
 8002972:	d207      	bcs.n	8002984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002974:	f00a fcbe 	bl	800d2f4 <__errno>
 8002978:	4603      	mov	r3, r0
 800297a:	220c      	movs	r2, #12
 800297c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800297e:	f04f 33ff 	mov.w	r3, #4294967295
 8002982:	e009      	b.n	8002998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002984:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <_sbrk+0x64>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800298a:	4b07      	ldr	r3, [pc, #28]	@ (80029a8 <_sbrk+0x64>)
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	4a05      	ldr	r2, [pc, #20]	@ (80029a8 <_sbrk+0x64>)
 8002994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002996:	68fb      	ldr	r3, [r7, #12]
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20010000 	.word	0x20010000
 80029a4:	00000400 	.word	0x00000400
 80029a8:	200005b8 	.word	0x200005b8
 80029ac:	200020f0 	.word	0x200020f0

080029b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <SystemInit+0x20>)
 80029b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ba:	4a05      	ldr	r2, [pc, #20]	@ (80029d0 <SystemInit+0x20>)
 80029bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a0c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80029d8:	f7ff ffea 	bl	80029b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029dc:	480c      	ldr	r0, [pc, #48]	@ (8002a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80029de:	490d      	ldr	r1, [pc, #52]	@ (8002a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a18 <LoopForever+0xe>)
  movs r3, #0
 80029e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029e4:	e002      	b.n	80029ec <LoopCopyDataInit>

080029e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ea:	3304      	adds	r3, #4

080029ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f0:	d3f9      	bcc.n	80029e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029f2:	4a0a      	ldr	r2, [pc, #40]	@ (8002a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80029f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002a20 <LoopForever+0x16>)
  movs r3, #0
 80029f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029f8:	e001      	b.n	80029fe <LoopFillZerobss>

080029fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029fc:	3204      	adds	r2, #4

080029fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a00:	d3fb      	bcc.n	80029fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a02:	f00a fc7d 	bl	800d300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a06:	f7fe fd9d 	bl	8001544 <main>

08002a0a <LoopForever>:

LoopForever:
    b LoopForever
 8002a0a:	e7fe      	b.n	8002a0a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002a0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a14:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a18:	080116a4 	.word	0x080116a4
  ldr r2, =_sbss
 8002a1c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002a20:	200020ec 	.word	0x200020ec

08002a24 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a24:	e7fe      	b.n	8002a24 <ADC3_IRQHandler>
	...

08002a28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a2c:	4b08      	ldr	r3, [pc, #32]	@ (8002a50 <HAL_Init+0x28>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a07      	ldr	r2, [pc, #28]	@ (8002a50 <HAL_Init+0x28>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a38:	2003      	movs	r0, #3
 8002a3a:	f001 fcca 	bl	80043d2 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a3e:	200f      	movs	r0, #15
 8002a40:	f7ff fe28 	bl	8002694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a44:	f7ff fc46 	bl	80022d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40022000 	.word	0x40022000

08002a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000014 	.word	0x20000014
 8002a78:	200005bc 	.word	0x200005bc

08002a7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a80:	4b03      	ldr	r3, [pc, #12]	@ (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	200005bc 	.word	0x200005bc

08002a94 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b09a      	sub	sp, #104	@ 0x68
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e1e3      	b.n	8002eb8 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f003 0310 	and.w	r3, r3, #16
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d176      	bne.n	8002bf0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d152      	bne.n	8002bb0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff fbfd 	bl	8002324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d13b      	bne.n	8002bb0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f001 fb37 	bl	80041ac <ADC_Disable>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d12f      	bne.n	8002bb0 <HAL_ADC_Init+0xe0>
 8002b50:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d12b      	bne.n	8002bb0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002b60:	f023 0302 	bic.w	r3, r3, #2
 8002b64:	f043 0202 	orr.w	r2, r3, #2
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002b7a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002b8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b8c:	4b92      	ldr	r3, [pc, #584]	@ (8002dd8 <HAL_ADC_Init+0x308>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a92      	ldr	r2, [pc, #584]	@ (8002ddc <HAL_ADC_Init+0x30c>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	0c9a      	lsrs	r2, r3, #18
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ba2:	e002      	b.n	8002baa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f9      	bne.n	8002ba4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bcc:	d110      	bne.n	8002bf0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f023 0312 	bic.w	r3, r3, #18
 8002bd6:	f043 0210 	orr.w	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f043 0201 	orr.w	r2, r3, #1
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f040 8150 	bne.w	8002e9e <HAL_ADC_Init+0x3ce>
 8002bfe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 814b 	bne.w	8002e9e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f040 8143 	bne.w	8002e9e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002c20:	f043 0202 	orr.w	r2, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c30:	d004      	beq.n	8002c3c <HAL_ADC_Init+0x16c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a6a      	ldr	r2, [pc, #424]	@ (8002de0 <HAL_ADC_Init+0x310>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d101      	bne.n	8002c40 <HAL_ADC_Init+0x170>
 8002c3c:	4b69      	ldr	r3, [pc, #420]	@ (8002de4 <HAL_ADC_Init+0x314>)
 8002c3e:	e000      	b.n	8002c42 <HAL_ADC_Init+0x172>
 8002c40:	4b69      	ldr	r3, [pc, #420]	@ (8002de8 <HAL_ADC_Init+0x318>)
 8002c42:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c4c:	d102      	bne.n	8002c54 <HAL_ADC_Init+0x184>
 8002c4e:	4b64      	ldr	r3, [pc, #400]	@ (8002de0 <HAL_ADC_Init+0x310>)
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	e01a      	b.n	8002c8a <HAL_ADC_Init+0x1ba>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a61      	ldr	r2, [pc, #388]	@ (8002de0 <HAL_ADC_Init+0x310>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d103      	bne.n	8002c66 <HAL_ADC_Init+0x196>
 8002c5e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	e011      	b.n	8002c8a <HAL_ADC_Init+0x1ba>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a60      	ldr	r2, [pc, #384]	@ (8002dec <HAL_ADC_Init+0x31c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d102      	bne.n	8002c76 <HAL_ADC_Init+0x1a6>
 8002c70:	4b5f      	ldr	r3, [pc, #380]	@ (8002df0 <HAL_ADC_Init+0x320>)
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	e009      	b.n	8002c8a <HAL_ADC_Init+0x1ba>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8002df0 <HAL_ADC_Init+0x320>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d102      	bne.n	8002c86 <HAL_ADC_Init+0x1b6>
 8002c80:	4b5a      	ldr	r3, [pc, #360]	@ (8002dec <HAL_ADC_Init+0x31c>)
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	e001      	b.n	8002c8a <HAL_ADC_Init+0x1ba>
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d108      	bne.n	8002caa <HAL_ADC_Init+0x1da>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_Init+0x1da>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_ADC_Init+0x1dc>
 8002caa:	2300      	movs	r3, #0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d11c      	bne.n	8002cea <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cb0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d010      	beq.n	8002cd8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d107      	bne.n	8002cd2 <HAL_ADC_Init+0x202>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_Init+0x202>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_ADC_Init+0x204>
 8002cd2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d108      	bne.n	8002cea <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002cd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ce8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7e5b      	ldrb	r3, [r3, #25]
 8002cee:	035b      	lsls	r3, r3, #13
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cf4:	2a01      	cmp	r2, #1
 8002cf6:	d002      	beq.n	8002cfe <HAL_ADC_Init+0x22e>
 8002cf8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002cfc:	e000      	b.n	8002d00 <HAL_ADC_Init+0x230>
 8002cfe:	2200      	movs	r2, #0
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d10:	4313      	orrs	r3, r2
 8002d12:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d11b      	bne.n	8002d56 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7e5b      	ldrb	r3, [r3, #25]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	045a      	lsls	r2, r3, #17
 8002d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d36:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d38:	e00d      	b.n	8002d56 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4e:	f043 0201 	orr.w	r2, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d054      	beq.n	8002e08 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a22      	ldr	r2, [pc, #136]	@ (8002dec <HAL_ADC_Init+0x31c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_ADC_Init+0x2a2>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	@ (8002df0 <HAL_ADC_Init+0x320>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d140      	bne.n	8002df4 <HAL_ADC_Init+0x324>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d76:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8002d7a:	d02a      	beq.n	8002dd2 <HAL_ADC_Init+0x302>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d84:	d022      	beq.n	8002dcc <HAL_ADC_Init+0x2fc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8002d8e:	d01a      	beq.n	8002dc6 <HAL_ADC_Init+0x2f6>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d94:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8002d98:	d012      	beq.n	8002dc0 <HAL_ADC_Init+0x2f0>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8002da2:	d00a      	beq.n	8002dba <HAL_ADC_Init+0x2ea>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da8:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8002dac:	d002      	beq.n	8002db4 <HAL_ADC_Init+0x2e4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db2:	e023      	b.n	8002dfc <HAL_ADC_Init+0x32c>
 8002db4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002db8:	e020      	b.n	8002dfc <HAL_ADC_Init+0x32c>
 8002dba:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002dbe:	e01d      	b.n	8002dfc <HAL_ADC_Init+0x32c>
 8002dc0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002dc4:	e01a      	b.n	8002dfc <HAL_ADC_Init+0x32c>
 8002dc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dca:	e017      	b.n	8002dfc <HAL_ADC_Init+0x32c>
 8002dcc:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002dd0:	e014      	b.n	8002dfc <HAL_ADC_Init+0x32c>
 8002dd2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002dd6:	e011      	b.n	8002dfc <HAL_ADC_Init+0x32c>
 8002dd8:	2000000c 	.word	0x2000000c
 8002ddc:	431bde83 	.word	0x431bde83
 8002de0:	50000100 	.word	0x50000100
 8002de4:	50000300 	.word	0x50000300
 8002de8:	50000700 	.word	0x50000700
 8002dec:	50000400 	.word	0x50000400
 8002df0:	50000500 	.word	0x50000500
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002e00:	4313      	orrs	r3, r2
 8002e02:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e04:	4313      	orrs	r3, r2
 8002e06:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d114      	bne.n	8002e40 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e24:	f023 0302 	bic.w	r3, r3, #2
 8002e28:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7e1b      	ldrb	r3, [r3, #24]
 8002e2e:	039a      	lsls	r2, r3, #14
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	4b1e      	ldr	r3, [pc, #120]	@ (8002ec0 <HAL_ADC_Init+0x3f0>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002e50:	430b      	orrs	r3, r1
 8002e52:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d10c      	bne.n	8002e76 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	f023 010f 	bic.w	r1, r3, #15
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	1e5a      	subs	r2, r3, #1
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e74:	e007      	b.n	8002e86 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 020f 	bic.w	r2, r2, #15
 8002e84:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f023 0303 	bic.w	r3, r3, #3
 8002e94:	f043 0201 	orr.w	r2, r3, #1
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002e9c:	e00a      	b.n	8002eb4 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea2:	f023 0312 	bic.w	r3, r3, #18
 8002ea6:	f043 0210 	orr.w	r2, r3, #16
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002eb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3768      	adds	r7, #104	@ 0x68
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	fff0c007 	.word	0xfff0c007

08002ec4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 80f9 	bne.w	80030d2 <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_Start+0x2a>
 8002eea:	2302      	movs	r3, #2
 8002eec:	e0f4      	b.n	80030d8 <HAL_ADC_Start+0x214>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f001 f8f4 	bl	80040e4 <ADC_Enable>
 8002efc:	4603      	mov	r3, r0
 8002efe:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 80e0 	bne.w	80030c8 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f10:	f023 0301 	bic.w	r3, r3, #1
 8002f14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_Start+0x6c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6d      	ldr	r2, [pc, #436]	@ (80030e0 <HAL_ADC_Start+0x21c>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d106      	bne.n	8002f3e <HAL_ADC_Start+0x7a>
 8002f30:	4b6c      	ldr	r3, [pc, #432]	@ (80030e4 <HAL_ADC_Start+0x220>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f003 031f 	and.w	r3, r3, #31
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_ADC_Start+0x9a>
 8002f3c:	e005      	b.n	8002f4a <HAL_ADC_Start+0x86>
 8002f3e:	4b6a      	ldr	r3, [pc, #424]	@ (80030e8 <HAL_ADC_Start+0x224>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 031f 	and.w	r3, r3, #31
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_ADC_Start+0x9a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f52:	d004      	beq.n	8002f5e <HAL_ADC_Start+0x9a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a64      	ldr	r2, [pc, #400]	@ (80030ec <HAL_ADC_Start+0x228>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d115      	bne.n	8002f8a <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d036      	beq.n	8002fe6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f80:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002f88:	e02d      	b.n	8002fe6 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f9e:	d004      	beq.n	8002faa <HAL_ADC_Start+0xe6>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a4e      	ldr	r2, [pc, #312]	@ (80030e0 <HAL_ADC_Start+0x21c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d10a      	bne.n	8002fc0 <HAL_ADC_Start+0xfc>
 8002faa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf14      	ite	ne
 8002fb8:	2301      	movne	r3, #1
 8002fba:	2300      	moveq	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e008      	b.n	8002fd2 <HAL_ADC_Start+0x10e>
 8002fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80030ec <HAL_ADC_Start+0x228>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d007      	beq.n	8002fe6 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fde:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ff2:	d106      	bne.n	8003002 <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ff8:	f023 0206 	bic.w	r2, r3, #6
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	645a      	str	r2, [r3, #68]	@ 0x44
 8003000:	e002      	b.n	8003008 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	221c      	movs	r2, #28
 8003016:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003020:	d004      	beq.n	800302c <HAL_ADC_Start+0x168>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a2e      	ldr	r2, [pc, #184]	@ (80030e0 <HAL_ADC_Start+0x21c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d106      	bne.n	800303a <HAL_ADC_Start+0x176>
 800302c:	4b2d      	ldr	r3, [pc, #180]	@ (80030e4 <HAL_ADC_Start+0x220>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2b00      	cmp	r3, #0
 8003036:	d03e      	beq.n	80030b6 <HAL_ADC_Start+0x1f2>
 8003038:	e005      	b.n	8003046 <HAL_ADC_Start+0x182>
 800303a:	4b2b      	ldr	r3, [pc, #172]	@ (80030e8 <HAL_ADC_Start+0x224>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2b00      	cmp	r3, #0
 8003044:	d037      	beq.n	80030b6 <HAL_ADC_Start+0x1f2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800304e:	d004      	beq.n	800305a <HAL_ADC_Start+0x196>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a22      	ldr	r2, [pc, #136]	@ (80030e0 <HAL_ADC_Start+0x21c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d106      	bne.n	8003068 <HAL_ADC_Start+0x1a4>
 800305a:	4b22      	ldr	r3, [pc, #136]	@ (80030e4 <HAL_ADC_Start+0x220>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 031f 	and.w	r3, r3, #31
 8003062:	2b05      	cmp	r3, #5
 8003064:	d027      	beq.n	80030b6 <HAL_ADC_Start+0x1f2>
 8003066:	e005      	b.n	8003074 <HAL_ADC_Start+0x1b0>
 8003068:	4b1f      	ldr	r3, [pc, #124]	@ (80030e8 <HAL_ADC_Start+0x224>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2b05      	cmp	r3, #5
 8003072:	d020      	beq.n	80030b6 <HAL_ADC_Start+0x1f2>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800307c:	d004      	beq.n	8003088 <HAL_ADC_Start+0x1c4>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a17      	ldr	r2, [pc, #92]	@ (80030e0 <HAL_ADC_Start+0x21c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d106      	bne.n	8003096 <HAL_ADC_Start+0x1d2>
 8003088:	4b16      	ldr	r3, [pc, #88]	@ (80030e4 <HAL_ADC_Start+0x220>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2b09      	cmp	r3, #9
 8003092:	d010      	beq.n	80030b6 <HAL_ADC_Start+0x1f2>
 8003094:	e005      	b.n	80030a2 <HAL_ADC_Start+0x1de>
 8003096:	4b14      	ldr	r3, [pc, #80]	@ (80030e8 <HAL_ADC_Start+0x224>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 031f 	and.w	r3, r3, #31
 800309e:	2b09      	cmp	r3, #9
 80030a0:	d009      	beq.n	80030b6 <HAL_ADC_Start+0x1f2>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030aa:	d004      	beq.n	80030b6 <HAL_ADC_Start+0x1f2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0e      	ldr	r2, [pc, #56]	@ (80030ec <HAL_ADC_Start+0x228>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d10f      	bne.n	80030d6 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0204 	orr.w	r2, r2, #4
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	e006      	b.n	80030d6 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80030d0:	e001      	b.n	80030d6 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030d2:	2302      	movs	r3, #2
 80030d4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	50000100 	.word	0x50000100
 80030e4:	50000300 	.word	0x50000300
 80030e8:	50000700 	.word	0x50000700
 80030ec:	50000400 	.word	0x50000400

080030f0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b08      	cmp	r3, #8
 8003104:	d102      	bne.n	800310c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003106:	2308      	movs	r3, #8
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e03a      	b.n	8003182 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003114:	d004      	beq.n	8003120 <HAL_ADC_PollForConversion+0x30>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a72      	ldr	r2, [pc, #456]	@ (80032e4 <HAL_ADC_PollForConversion+0x1f4>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d101      	bne.n	8003124 <HAL_ADC_PollForConversion+0x34>
 8003120:	4b71      	ldr	r3, [pc, #452]	@ (80032e8 <HAL_ADC_PollForConversion+0x1f8>)
 8003122:	e000      	b.n	8003126 <HAL_ADC_PollForConversion+0x36>
 8003124:	4b71      	ldr	r3, [pc, #452]	@ (80032ec <HAL_ADC_PollForConversion+0x1fc>)
 8003126:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2b00      	cmp	r3, #0
 8003132:	d112      	bne.n	800315a <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11d      	bne.n	800317e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e0bf      	b.n	80032da <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	f043 0220 	orr.w	r2, r3, #32
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e0ad      	b.n	80032da <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800317e:	230c      	movs	r3, #12
 8003180:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800318a:	d004      	beq.n	8003196 <HAL_ADC_PollForConversion+0xa6>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a54      	ldr	r2, [pc, #336]	@ (80032e4 <HAL_ADC_PollForConversion+0x1f4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d106      	bne.n	80031a4 <HAL_ADC_PollForConversion+0xb4>
 8003196:	4b54      	ldr	r3, [pc, #336]	@ (80032e8 <HAL_ADC_PollForConversion+0x1f8>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d010      	beq.n	80031c4 <HAL_ADC_PollForConversion+0xd4>
 80031a2:	e005      	b.n	80031b0 <HAL_ADC_PollForConversion+0xc0>
 80031a4:	4b51      	ldr	r3, [pc, #324]	@ (80032ec <HAL_ADC_PollForConversion+0x1fc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d009      	beq.n	80031c4 <HAL_ADC_PollForConversion+0xd4>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031b8:	d004      	beq.n	80031c4 <HAL_ADC_PollForConversion+0xd4>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a4c      	ldr	r2, [pc, #304]	@ (80032f0 <HAL_ADC_PollForConversion+0x200>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d104      	bne.n	80031ce <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	e00f      	b.n	80031ee <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031d6:	d004      	beq.n	80031e2 <HAL_ADC_PollForConversion+0xf2>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a41      	ldr	r2, [pc, #260]	@ (80032e4 <HAL_ADC_PollForConversion+0x1f4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d102      	bne.n	80031e8 <HAL_ADC_PollForConversion+0xf8>
 80031e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80031e6:	e000      	b.n	80031ea <HAL_ADC_PollForConversion+0xfa>
 80031e8:	4b41      	ldr	r3, [pc, #260]	@ (80032f0 <HAL_ADC_PollForConversion+0x200>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80031ee:	f7ff fc45 	bl	8002a7c <HAL_GetTick>
 80031f2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80031f4:	e021      	b.n	800323a <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031fc:	d01d      	beq.n	800323a <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_ADC_PollForConversion+0x124>
 8003204:	f7ff fc3a 	bl	8002a7c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	429a      	cmp	r2, r3
 8003212:	d212      	bcs.n	800323a <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	4013      	ands	r3, r2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10b      	bne.n	800323a <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003226:	f043 0204 	orr.w	r2, r3, #4
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e04f      	b.n	80032da <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	4013      	ands	r3, r2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0d6      	beq.n	80031f6 <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800325e:	2b00      	cmp	r3, #0
 8003260:	d131      	bne.n	80032c6 <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003268:	2b00      	cmp	r3, #0
 800326a:	d12c      	bne.n	80032c6 <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b08      	cmp	r3, #8
 8003278:	d125      	bne.n	80032c6 <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b00      	cmp	r3, #0
 8003286:	d112      	bne.n	80032ae <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d112      	bne.n	80032c6 <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	f043 0201 	orr.w	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	641a      	str	r2, [r3, #64]	@ 0x40
 80032ac:	e00b      	b.n	80032c6 <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d103      	bne.n	80032d8 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	50000100 	.word	0x50000100
 80032e8:	50000300 	.word	0x50000300
 80032ec:	50000700 	.word	0x50000700
 80032f0:	50000400 	.word	0x50000400

080032f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8003318:	2300      	movs	r3, #0
 800331a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800331c:	2300      	movs	r3, #0
 800331e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8003320:	2300      	movs	r3, #0
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d004      	beq.n	8003348 <HAL_ADC_IRQHandler+0x38>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10b      	bne.n	8003360 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 80bc 	beq.w	80034cc <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 80b6 	beq.w	80034cc <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d105      	bne.n	8003378 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003370:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003380:	d004      	beq.n	800338c <HAL_ADC_IRQHandler+0x7c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a90      	ldr	r2, [pc, #576]	@ (80035c8 <HAL_ADC_IRQHandler+0x2b8>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d106      	bne.n	800339a <HAL_ADC_IRQHandler+0x8a>
 800338c:	4b8f      	ldr	r3, [pc, #572]	@ (80035cc <HAL_ADC_IRQHandler+0x2bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f003 031f 	and.w	r3, r3, #31
 8003394:	2b00      	cmp	r3, #0
 8003396:	d03e      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 8003398:	e005      	b.n	80033a6 <HAL_ADC_IRQHandler+0x96>
 800339a:	4b8d      	ldr	r3, [pc, #564]	@ (80035d0 <HAL_ADC_IRQHandler+0x2c0>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 031f 	and.w	r3, r3, #31
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d037      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033ae:	d004      	beq.n	80033ba <HAL_ADC_IRQHandler+0xaa>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a84      	ldr	r2, [pc, #528]	@ (80035c8 <HAL_ADC_IRQHandler+0x2b8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d106      	bne.n	80033c8 <HAL_ADC_IRQHandler+0xb8>
 80033ba:	4b84      	ldr	r3, [pc, #528]	@ (80035cc <HAL_ADC_IRQHandler+0x2bc>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d027      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 80033c6:	e005      	b.n	80033d4 <HAL_ADC_IRQHandler+0xc4>
 80033c8:	4b81      	ldr	r3, [pc, #516]	@ (80035d0 <HAL_ADC_IRQHandler+0x2c0>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d020      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033dc:	d004      	beq.n	80033e8 <HAL_ADC_IRQHandler+0xd8>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a79      	ldr	r2, [pc, #484]	@ (80035c8 <HAL_ADC_IRQHandler+0x2b8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d106      	bne.n	80033f6 <HAL_ADC_IRQHandler+0xe6>
 80033e8:	4b78      	ldr	r3, [pc, #480]	@ (80035cc <HAL_ADC_IRQHandler+0x2bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d010      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 80033f4:	e005      	b.n	8003402 <HAL_ADC_IRQHandler+0xf2>
 80033f6:	4b76      	ldr	r3, [pc, #472]	@ (80035d0 <HAL_ADC_IRQHandler+0x2c0>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2b09      	cmp	r3, #9
 8003400:	d009      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800340a:	d004      	beq.n	8003416 <HAL_ADC_IRQHandler+0x106>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a70      	ldr	r2, [pc, #448]	@ (80035d4 <HAL_ADC_IRQHandler+0x2c4>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d104      	bne.n	8003420 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	61bb      	str	r3, [r7, #24]
 800341e:	e00f      	b.n	8003440 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003428:	d004      	beq.n	8003434 <HAL_ADC_IRQHandler+0x124>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a66      	ldr	r2, [pc, #408]	@ (80035c8 <HAL_ADC_IRQHandler+0x2b8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d102      	bne.n	800343a <HAL_ADC_IRQHandler+0x12a>
 8003434:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003438:	e000      	b.n	800343c <HAL_ADC_IRQHandler+0x12c>
 800343a:	4b66      	ldr	r3, [pc, #408]	@ (80035d4 <HAL_ADC_IRQHandler+0x2c4>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800344a:	2b00      	cmp	r3, #0
 800344c:	d137      	bne.n	80034be <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8003454:	2b00      	cmp	r3, #0
 8003456:	d132      	bne.n	80034be <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 0308 	and.w	r3, r3, #8
 800345e:	2b00      	cmp	r3, #0
 8003460:	d02d      	beq.n	80034be <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d11a      	bne.n	80034a6 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 020c 	bic.w	r2, r2, #12
 800347e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d112      	bne.n	80034be <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349c:	f043 0201 	orr.w	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	641a      	str	r2, [r3, #64]	@ 0x40
 80034a4:	e00b      	b.n	80034be <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034aa:	f043 0210 	orr.w	r2, r3, #16
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b6:	f043 0201 	orr.w	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff fae8 	bl	8002a94 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	220c      	movs	r2, #12
 80034ca:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d004      	beq.n	80034e0 <HAL_ADC_IRQHandler+0x1d0>
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10b      	bne.n	80034f8 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	f000 8138 	beq.w	800375c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8132 	beq.w	800375c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034fc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800350c:	d004      	beq.n	8003518 <HAL_ADC_IRQHandler+0x208>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a2d      	ldr	r2, [pc, #180]	@ (80035c8 <HAL_ADC_IRQHandler+0x2b8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d106      	bne.n	8003526 <HAL_ADC_IRQHandler+0x216>
 8003518:	4b2c      	ldr	r3, [pc, #176]	@ (80035cc <HAL_ADC_IRQHandler+0x2bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2b00      	cmp	r3, #0
 8003522:	d03e      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x292>
 8003524:	e005      	b.n	8003532 <HAL_ADC_IRQHandler+0x222>
 8003526:	4b2a      	ldr	r3, [pc, #168]	@ (80035d0 <HAL_ADC_IRQHandler+0x2c0>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 031f 	and.w	r3, r3, #31
 800352e:	2b00      	cmp	r3, #0
 8003530:	d037      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x292>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800353a:	d004      	beq.n	8003546 <HAL_ADC_IRQHandler+0x236>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a21      	ldr	r2, [pc, #132]	@ (80035c8 <HAL_ADC_IRQHandler+0x2b8>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d106      	bne.n	8003554 <HAL_ADC_IRQHandler+0x244>
 8003546:	4b21      	ldr	r3, [pc, #132]	@ (80035cc <HAL_ADC_IRQHandler+0x2bc>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	2b05      	cmp	r3, #5
 8003550:	d027      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x292>
 8003552:	e005      	b.n	8003560 <HAL_ADC_IRQHandler+0x250>
 8003554:	4b1e      	ldr	r3, [pc, #120]	@ (80035d0 <HAL_ADC_IRQHandler+0x2c0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 031f 	and.w	r3, r3, #31
 800355c:	2b05      	cmp	r3, #5
 800355e:	d020      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x292>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003568:	d004      	beq.n	8003574 <HAL_ADC_IRQHandler+0x264>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a16      	ldr	r2, [pc, #88]	@ (80035c8 <HAL_ADC_IRQHandler+0x2b8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d106      	bne.n	8003582 <HAL_ADC_IRQHandler+0x272>
 8003574:	4b15      	ldr	r3, [pc, #84]	@ (80035cc <HAL_ADC_IRQHandler+0x2bc>)
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 031f 	and.w	r3, r3, #31
 800357c:	2b09      	cmp	r3, #9
 800357e:	d010      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x292>
 8003580:	e005      	b.n	800358e <HAL_ADC_IRQHandler+0x27e>
 8003582:	4b13      	ldr	r3, [pc, #76]	@ (80035d0 <HAL_ADC_IRQHandler+0x2c0>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 031f 	and.w	r3, r3, #31
 800358a:	2b09      	cmp	r3, #9
 800358c:	d009      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x292>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003596:	d004      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x292>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0d      	ldr	r2, [pc, #52]	@ (80035d4 <HAL_ADC_IRQHandler+0x2c4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d104      	bne.n	80035ac <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
 80035aa:	e018      	b.n	80035de <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035b4:	d004      	beq.n	80035c0 <HAL_ADC_IRQHandler+0x2b0>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a03      	ldr	r2, [pc, #12]	@ (80035c8 <HAL_ADC_IRQHandler+0x2b8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d10b      	bne.n	80035d8 <HAL_ADC_IRQHandler+0x2c8>
 80035c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80035c4:	e009      	b.n	80035da <HAL_ADC_IRQHandler+0x2ca>
 80035c6:	bf00      	nop
 80035c8:	50000100 	.word	0x50000100
 80035cc:	50000300 	.word	0x50000300
 80035d0:	50000700 	.word	0x50000700
 80035d4:	50000400 	.word	0x50000400
 80035d8:	4b92      	ldr	r3, [pc, #584]	@ (8003824 <HAL_ADC_IRQHandler+0x514>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035e4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 80b0 	bne.w	800374e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00d      	beq.n	8003614 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8003602:	2b00      	cmp	r3, #0
 8003604:	f040 80a3 	bne.w	800374e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 809d 	bne.w	800374e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8097 	beq.w	800374e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003628:	d004      	beq.n	8003634 <HAL_ADC_IRQHandler+0x324>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a7e      	ldr	r2, [pc, #504]	@ (8003828 <HAL_ADC_IRQHandler+0x518>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d106      	bne.n	8003642 <HAL_ADC_IRQHandler+0x332>
 8003634:	4b7d      	ldr	r3, [pc, #500]	@ (800382c <HAL_ADC_IRQHandler+0x51c>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f003 031f 	and.w	r3, r3, #31
 800363c:	2b00      	cmp	r3, #0
 800363e:	d03e      	beq.n	80036be <HAL_ADC_IRQHandler+0x3ae>
 8003640:	e005      	b.n	800364e <HAL_ADC_IRQHandler+0x33e>
 8003642:	4b7b      	ldr	r3, [pc, #492]	@ (8003830 <HAL_ADC_IRQHandler+0x520>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 031f 	and.w	r3, r3, #31
 800364a:	2b00      	cmp	r3, #0
 800364c:	d037      	beq.n	80036be <HAL_ADC_IRQHandler+0x3ae>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003656:	d004      	beq.n	8003662 <HAL_ADC_IRQHandler+0x352>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a72      	ldr	r2, [pc, #456]	@ (8003828 <HAL_ADC_IRQHandler+0x518>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d106      	bne.n	8003670 <HAL_ADC_IRQHandler+0x360>
 8003662:	4b72      	ldr	r3, [pc, #456]	@ (800382c <HAL_ADC_IRQHandler+0x51c>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2b06      	cmp	r3, #6
 800366c:	d027      	beq.n	80036be <HAL_ADC_IRQHandler+0x3ae>
 800366e:	e005      	b.n	800367c <HAL_ADC_IRQHandler+0x36c>
 8003670:	4b6f      	ldr	r3, [pc, #444]	@ (8003830 <HAL_ADC_IRQHandler+0x520>)
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	f003 031f 	and.w	r3, r3, #31
 8003678:	2b06      	cmp	r3, #6
 800367a:	d020      	beq.n	80036be <HAL_ADC_IRQHandler+0x3ae>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003684:	d004      	beq.n	8003690 <HAL_ADC_IRQHandler+0x380>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a67      	ldr	r2, [pc, #412]	@ (8003828 <HAL_ADC_IRQHandler+0x518>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d106      	bne.n	800369e <HAL_ADC_IRQHandler+0x38e>
 8003690:	4b66      	ldr	r3, [pc, #408]	@ (800382c <HAL_ADC_IRQHandler+0x51c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2b07      	cmp	r3, #7
 800369a:	d010      	beq.n	80036be <HAL_ADC_IRQHandler+0x3ae>
 800369c:	e005      	b.n	80036aa <HAL_ADC_IRQHandler+0x39a>
 800369e:	4b64      	ldr	r3, [pc, #400]	@ (8003830 <HAL_ADC_IRQHandler+0x520>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2b07      	cmp	r3, #7
 80036a8:	d009      	beq.n	80036be <HAL_ADC_IRQHandler+0x3ae>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036b2:	d004      	beq.n	80036be <HAL_ADC_IRQHandler+0x3ae>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003824 <HAL_ADC_IRQHandler+0x514>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d104      	bne.n	80036c8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e00f      	b.n	80036e8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036d0:	d004      	beq.n	80036dc <HAL_ADC_IRQHandler+0x3cc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a54      	ldr	r2, [pc, #336]	@ (8003828 <HAL_ADC_IRQHandler+0x518>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d102      	bne.n	80036e2 <HAL_ADC_IRQHandler+0x3d2>
 80036dc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80036e0:	e000      	b.n	80036e4 <HAL_ADC_IRQHandler+0x3d4>
 80036e2:	4b50      	ldr	r3, [pc, #320]	@ (8003824 <HAL_ADC_IRQHandler+0x514>)
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d12d      	bne.n	800374e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d11a      	bne.n	8003736 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800370e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d112      	bne.n	800374e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372c:	f043 0201 	orr.w	r2, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	641a      	str	r2, [r3, #64]	@ 0x40
 8003734:	e00b      	b.n	800374e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f043 0210 	orr.w	r2, r3, #16
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003746:	f043 0201 	orr.w	r2, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f8c4 	bl	80038dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2260      	movs	r2, #96	@ 0x60
 800375a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d011      	beq.n	800378a <HAL_ADC_IRQHandler+0x47a>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00c      	beq.n	800378a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff f993 	bl	8002aa8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2280      	movs	r2, #128	@ 0x80
 8003788:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d012      	beq.n	80037ba <HAL_ADC_IRQHandler+0x4aa>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00d      	beq.n	80037ba <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8aa 	bl	8003904 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037b8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d012      	beq.n	80037ea <HAL_ADC_IRQHandler+0x4da>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f89c 	bl	8003918 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037e8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d04f      	beq.n	8003894 <HAL_ADC_IRQHandler+0x584>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d04a      	beq.n	8003894 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003802:	2b01      	cmp	r3, #1
 8003804:	d102      	bne.n	800380c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8003806:	2301      	movs	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
 800380a:	e02d      	b.n	8003868 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003814:	d004      	beq.n	8003820 <HAL_ADC_IRQHandler+0x510>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a03      	ldr	r2, [pc, #12]	@ (8003828 <HAL_ADC_IRQHandler+0x518>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d109      	bne.n	8003834 <HAL_ADC_IRQHandler+0x524>
 8003820:	4b02      	ldr	r3, [pc, #8]	@ (800382c <HAL_ADC_IRQHandler+0x51c>)
 8003822:	e008      	b.n	8003836 <HAL_ADC_IRQHandler+0x526>
 8003824:	50000400 	.word	0x50000400
 8003828:	50000100 	.word	0x50000100
 800382c:	50000300 	.word	0x50000300
 8003830:	50000700 	.word	0x50000700
 8003834:	4b28      	ldr	r3, [pc, #160]	@ (80038d8 <HAL_ADC_IRQHandler+0x5c8>)
 8003836:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2b00      	cmp	r3, #0
 8003842:	d109      	bne.n	8003858 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b01      	cmp	r3, #1
 8003850:	d10a      	bne.n	8003868 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003852:	2301      	movs	r3, #1
 8003854:	61fb      	str	r3, [r7, #28]
 8003856:	e007      	b.n	8003868 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8003864:	2301      	movs	r3, #1
 8003866:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d10e      	bne.n	800388c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387e:	f043 0202 	orr.w	r2, r3, #2
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f7ff f918 	bl	8002abc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800389a:	2b00      	cmp	r3, #0
 800389c:	d018      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x5c0>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b8:	f043 0208 	orr.w	r2, r3, #8
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f810 	bl	80038f0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80038d0:	bf00      	nop
 80038d2:	3720      	adds	r7, #32
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	50000700 	.word	0x50000700

080038dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800392c:	b480      	push	{r7}
 800392e:	b09b      	sub	sp, #108	@ 0x6c
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003946:	2b01      	cmp	r3, #1
 8003948:	d101      	bne.n	800394e <HAL_ADC_ConfigChannel+0x22>
 800394a:	2302      	movs	r3, #2
 800394c:	e2c8      	b.n	8003ee0 <HAL_ADC_ConfigChannel+0x5b4>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2201      	movs	r2, #1
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f003 0304 	and.w	r3, r3, #4
 8003960:	2b00      	cmp	r3, #0
 8003962:	f040 82ac 	bne.w	8003ebe <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	2b04      	cmp	r3, #4
 800396c:	d81c      	bhi.n	80039a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4413      	add	r3, r2
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	461a      	mov	r2, r3
 8003982:	231f      	movs	r3, #31
 8003984:	4093      	lsls	r3, r2
 8003986:	43db      	mvns	r3, r3
 8003988:	4019      	ands	r1, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6818      	ldr	r0, [r3, #0]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	fa00 f203 	lsl.w	r2, r0, r3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80039a6:	e063      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b09      	cmp	r3, #9
 80039ae:	d81e      	bhi.n	80039ee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	005b      	lsls	r3, r3, #1
 80039be:	4413      	add	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	3b1e      	subs	r3, #30
 80039c4:	221f      	movs	r2, #31
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43db      	mvns	r3, r3
 80039cc:	4019      	ands	r1, r3
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	005b      	lsls	r3, r3, #1
 80039de:	3b1e      	subs	r3, #30
 80039e0:	fa00 f203 	lsl.w	r2, r0, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	430a      	orrs	r2, r1
 80039ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80039ec:	e040      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b0e      	cmp	r3, #14
 80039f4:	d81e      	bhi.n	8003a34 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4413      	add	r3, r2
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	3b3c      	subs	r3, #60	@ 0x3c
 8003a0a:	221f      	movs	r2, #31
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	4019      	ands	r1, r3
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6818      	ldr	r0, [r3, #0]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	005b      	lsls	r3, r3, #1
 8003a24:	3b3c      	subs	r3, #60	@ 0x3c
 8003a26:	fa00 f203 	lsl.w	r2, r0, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	639a      	str	r2, [r3, #56]	@ 0x38
 8003a32:	e01d      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685a      	ldr	r2, [r3, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	3b5a      	subs	r3, #90	@ 0x5a
 8003a48:	221f      	movs	r2, #31
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	4019      	ands	r1, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	3b5a      	subs	r3, #90	@ 0x5a
 8003a64:	fa00 f203 	lsl.w	r2, r0, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 80e5 	bne.w	8003c4a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b09      	cmp	r3, #9
 8003a86:	d91c      	bls.n	8003ac2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6999      	ldr	r1, [r3, #24]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	3b1e      	subs	r3, #30
 8003a9a:	2207      	movs	r2, #7
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	4019      	ands	r1, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	6898      	ldr	r0, [r3, #8]
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4613      	mov	r3, r2
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3b1e      	subs	r3, #30
 8003ab4:	fa00 f203 	lsl.w	r2, r0, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	619a      	str	r2, [r3, #24]
 8003ac0:	e019      	b.n	8003af6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	6959      	ldr	r1, [r3, #20]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4613      	mov	r3, r2
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	2207      	movs	r2, #7
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	4019      	ands	r1, r3
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	6898      	ldr	r0, [r3, #8]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4413      	add	r3, r2
 8003aea:	fa00 f203 	lsl.w	r2, r0, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695a      	ldr	r2, [r3, #20]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	2b03      	cmp	r3, #3
 8003b16:	d84f      	bhi.n	8003bb8 <HAL_ADC_ConfigChannel+0x28c>
 8003b18:	a201      	add	r2, pc, #4	@ (adr r2, 8003b20 <HAL_ADC_ConfigChannel+0x1f4>)
 8003b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1e:	bf00      	nop
 8003b20:	08003b31 	.word	0x08003b31
 8003b24:	08003b53 	.word	0x08003b53
 8003b28:	08003b75 	.word	0x08003b75
 8003b2c:	08003b97 	.word	0x08003b97
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b36:	4b99      	ldr	r3, [pc, #612]	@ (8003d9c <HAL_ADC_ConfigChannel+0x470>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	683a      	ldr	r2, [r7, #0]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	0691      	lsls	r1, r2, #26
 8003b40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b42:	430a      	orrs	r2, r1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b4e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003b50:	e07b      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003b58:	4b90      	ldr	r3, [pc, #576]	@ (8003d9c <HAL_ADC_ConfigChannel+0x470>)
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	0691      	lsls	r1, r2, #26
 8003b62:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b64:	430a      	orrs	r2, r1
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b70:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003b72:	e06a      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003b7a:	4b88      	ldr	r3, [pc, #544]	@ (8003d9c <HAL_ADC_ConfigChannel+0x470>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	0691      	lsls	r1, r2, #26
 8003b84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003b86:	430a      	orrs	r2, r1
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003b92:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003b94:	e059      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003b9c:	4b7f      	ldr	r3, [pc, #508]	@ (8003d9c <HAL_ADC_ConfigChannel+0x470>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	6812      	ldr	r2, [r2, #0]
 8003ba4:	0691      	lsls	r1, r2, #26
 8003ba6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003bb4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003bb6:	e048      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	069b      	lsls	r3, r3, #26
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d107      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003bda:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	069b      	lsls	r3, r3, #26
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d107      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003bfe:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	069b      	lsls	r3, r3, #26
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d107      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003c22:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	069b      	lsls	r3, r3, #26
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d107      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003c46:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8003c48:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d108      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x33e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x33e>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x340>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f040 8131 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d00f      	beq.n	8003c9a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2201      	movs	r2, #1
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	400a      	ands	r2, r1
 8003c94:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8003c98:	e049      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	409a      	lsls	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b09      	cmp	r3, #9
 8003cba:	d91c      	bls.n	8003cf6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6999      	ldr	r1, [r3, #24]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	3b1b      	subs	r3, #27
 8003cce:	2207      	movs	r2, #7
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	4019      	ands	r1, r3
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	6898      	ldr	r0, [r3, #8]
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	3b1b      	subs	r3, #27
 8003ce8:	fa00 f203 	lsl.w	r2, r0, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	619a      	str	r2, [r3, #24]
 8003cf4:	e01b      	b.n	8003d2e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	6959      	ldr	r1, [r3, #20]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	4613      	mov	r3, r2
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	4413      	add	r3, r2
 8003d08:	2207      	movs	r2, #7
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43db      	mvns	r3, r3
 8003d10:	4019      	ands	r1, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	6898      	ldr	r0, [r3, #8]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	005b      	lsls	r3, r3, #1
 8003d20:	4413      	add	r3, r2
 8003d22:	fa00 f203 	lsl.w	r2, r0, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d36:	d004      	beq.n	8003d42 <HAL_ADC_ConfigChannel+0x416>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a18      	ldr	r2, [pc, #96]	@ (8003da0 <HAL_ADC_ConfigChannel+0x474>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d101      	bne.n	8003d46 <HAL_ADC_ConfigChannel+0x41a>
 8003d42:	4b18      	ldr	r3, [pc, #96]	@ (8003da4 <HAL_ADC_ConfigChannel+0x478>)
 8003d44:	e000      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x41c>
 8003d46:	4b18      	ldr	r3, [pc, #96]	@ (8003da8 <HAL_ADC_ConfigChannel+0x47c>)
 8003d48:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d105      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003d52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d015      	beq.n	8003d8a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003d62:	2b11      	cmp	r3, #17
 8003d64:	d105      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003d66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8003d76:	2b12      	cmp	r3, #18
 8003d78:	f040 80ac 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8003d7c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f040 80a5 	bne.w	8003ed4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d92:	d10b      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x480>
 8003d94:	4b02      	ldr	r3, [pc, #8]	@ (8003da0 <HAL_ADC_ConfigChannel+0x474>)
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	e023      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x4b6>
 8003d9a:	bf00      	nop
 8003d9c:	83fff000 	.word	0x83fff000
 8003da0:	50000100 	.word	0x50000100
 8003da4:	50000300 	.word	0x50000300
 8003da8:	50000700 	.word	0x50000700
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a4e      	ldr	r2, [pc, #312]	@ (8003eec <HAL_ADC_ConfigChannel+0x5c0>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d103      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x492>
 8003db6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e011      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x4b6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a4b      	ldr	r2, [pc, #300]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x5c4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d102      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x4a2>
 8003dc8:	4b4a      	ldr	r3, [pc, #296]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e009      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x4b6>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a48      	ldr	r2, [pc, #288]	@ (8003ef4 <HAL_ADC_ConfigChannel+0x5c8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d102      	bne.n	8003dde <HAL_ADC_ConfigChannel+0x4b2>
 8003dd8:	4b45      	ldr	r3, [pc, #276]	@ (8003ef0 <HAL_ADC_ConfigChannel+0x5c4>)
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	e001      	b.n	8003de2 <HAL_ADC_ConfigChannel+0x4b6>
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d108      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x4d6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_ADC_ConfigChannel+0x4d6>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e000      	b.n	8003e04 <HAL_ADC_ConfigChannel+0x4d8>
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d150      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003e08:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d010      	beq.n	8003e30 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d107      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x4fe>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_ADC_ConfigChannel+0x4fe>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x500>
 8003e2a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d13c      	bne.n	8003eaa <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d11d      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x548>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e40:	d118      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e4c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ef8 <HAL_ADC_ConfigChannel+0x5cc>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2a      	ldr	r2, [pc, #168]	@ (8003efc <HAL_ADC_ConfigChannel+0x5d0>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	0c9a      	lsrs	r2, r3, #18
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	005b      	lsls	r3, r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e64:	e002      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f9      	bne.n	8003e66 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e72:	e02e      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b11      	cmp	r3, #17
 8003e7a:	d10b      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x568>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e84:	d106      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8003e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e90:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003e92:	e01e      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b12      	cmp	r3, #18
 8003e9a:	d11a      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8003e9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ea4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ea6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ea8:	e013      	b.n	8003ed2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003ebc:	e00a      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	f043 0220 	orr.w	r2, r3, #32
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8003ed0:	e000      	b.n	8003ed4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8003ed2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003edc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	376c      	adds	r7, #108	@ 0x6c
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	50000100 	.word	0x50000100
 8003ef0:	50000400 	.word	0x50000400
 8003ef4:	50000500 	.word	0x50000500
 8003ef8:	2000000c 	.word	0x2000000c
 8003efc:	431bde83 	.word	0x431bde83

08003f00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b099      	sub	sp, #100	@ 0x64
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f18:	d102      	bne.n	8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8003f1a:	4b6d      	ldr	r3, [pc, #436]	@ (80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	e01a      	b.n	8003f56 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a6a      	ldr	r2, [pc, #424]	@ (80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d103      	bne.n	8003f32 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8003f2a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	e011      	b.n	8003f56 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a67      	ldr	r2, [pc, #412]	@ (80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d102      	bne.n	8003f42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f3c:	4b66      	ldr	r3, [pc, #408]	@ (80040d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	e009      	b.n	8003f56 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a64      	ldr	r2, [pc, #400]	@ (80040d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d102      	bne.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f4c:	4b61      	ldr	r3, [pc, #388]	@ (80040d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	e001      	b.n	8003f56 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e0b0      	b.n	80040c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d101      	bne.n	8003f6e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e0a9      	b.n	80040c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f040 808d 	bne.w	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0304 	and.w	r3, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f040 8086 	bne.w	80040a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f9c:	d004      	beq.n	8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a4b      	ldr	r2, [pc, #300]	@ (80040d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d101      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80040dc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8003faa:	e000      	b.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003fac:	4b4c      	ldr	r3, [pc, #304]	@ (80040e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8003fae:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d040      	beq.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8003fb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003fca:	035b      	lsls	r3, r3, #13
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fd2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 0303 	and.w	r3, r3, #3
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d108      	bne.n	8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d15c      	bne.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004016:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004018:	2b00      	cmp	r3, #0
 800401a:	d14b      	bne.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800401c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004024:	f023 030f 	bic.w	r3, r3, #15
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	6811      	ldr	r1, [r2, #0]
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	6892      	ldr	r2, [r2, #8]
 8004030:	430a      	orrs	r2, r1
 8004032:	431a      	orrs	r2, r3
 8004034:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004036:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004038:	e03c      	b.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800403a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004044:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 0303 	and.w	r3, r3, #3
 8004050:	2b01      	cmp	r3, #1
 8004052:	d108      	bne.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b01      	cmp	r3, #1
 8004060:	d101      	bne.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004062:	2301      	movs	r3, #1
 8004064:	e000      	b.n	8004068 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004066:	2300      	movs	r3, #0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d123      	bne.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	f003 0303 	and.w	r3, r3, #3
 8004074:	2b01      	cmp	r3, #1
 8004076:	d107      	bne.n	8004088 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004084:	2301      	movs	r3, #1
 8004086:	e000      	b.n	800408a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004088:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800408a:	2b00      	cmp	r3, #0
 800408c:	d112      	bne.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800408e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004096:	f023 030f 	bic.w	r3, r3, #15
 800409a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800409c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800409e:	e009      	b.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80040b2:	e000      	b.n	80040b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80040b4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80040be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80040c2:	4618      	mov	r0, r3
 80040c4:	3764      	adds	r7, #100	@ 0x64
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	50000100 	.word	0x50000100
 80040d4:	50000400 	.word	0x50000400
 80040d8:	50000500 	.word	0x50000500
 80040dc:	50000300 	.word	0x50000300
 80040e0:	50000700 	.word	0x50000700

080040e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 0303 	and.w	r3, r3, #3
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d108      	bne.n	8004110 <ADC_Enable+0x2c>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <ADC_Enable+0x2c>
 800410c:	2301      	movs	r3, #1
 800410e:	e000      	b.n	8004112 <ADC_Enable+0x2e>
 8004110:	2300      	movs	r3, #0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d143      	bne.n	800419e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b22      	ldr	r3, [pc, #136]	@ (80041a8 <ADC_Enable+0xc4>)
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	f043 0210 	orr.w	r2, r3, #16
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004134:	f043 0201 	orr.w	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e02f      	b.n	80041a0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689a      	ldr	r2, [r3, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004150:	f7fe fc94 	bl	8002a7c <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004156:	e01b      	b.n	8004190 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004158:	f7fe fc90 	bl	8002a7c <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d914      	bls.n	8004190 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b01      	cmp	r3, #1
 8004172:	d00d      	beq.n	8004190 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	f043 0210 	orr.w	r2, r3, #16
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004184:	f043 0201 	orr.w	r2, r3, #1
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e007      	b.n	80041a0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	2b01      	cmp	r3, #1
 800419c:	d1dc      	bne.n	8004158 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	8000003f 	.word	0x8000003f

080041ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d108      	bne.n	80041d8 <ADC_Disable+0x2c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0301 	and.w	r3, r3, #1
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <ADC_Disable+0x2c>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e000      	b.n	80041da <ADC_Disable+0x2e>
 80041d8:	2300      	movs	r3, #0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d047      	beq.n	800426e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 030d 	and.w	r3, r3, #13
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d10f      	bne.n	800420c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0202 	orr.w	r2, r2, #2
 80041fa:	609a      	str	r2, [r3, #8]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2203      	movs	r2, #3
 8004202:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004204:	f7fe fc3a 	bl	8002a7c <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800420a:	e029      	b.n	8004260 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	f043 0210 	orr.w	r2, r3, #16
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421c:	f043 0201 	orr.w	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e023      	b.n	8004270 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004228:	f7fe fc28 	bl	8002a7c <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d914      	bls.n	8004260 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10d      	bne.n	8004260 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004248:	f043 0210 	orr.w	r2, r3, #16
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004254:	f043 0201 	orr.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e007      	b.n	8004270 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b01      	cmp	r3, #1
 800426c:	d0dc      	beq.n	8004228 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f003 0307 	and.w	r3, r3, #7
 8004286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004288:	4b0c      	ldr	r3, [pc, #48]	@ (80042bc <__NVIC_SetPriorityGrouping+0x44>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004294:	4013      	ands	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042aa:	4a04      	ldr	r2, [pc, #16]	@ (80042bc <__NVIC_SetPriorityGrouping+0x44>)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	60d3      	str	r3, [r2, #12]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000ed00 	.word	0xe000ed00

080042c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042c4:	4b04      	ldr	r3, [pc, #16]	@ (80042d8 <__NVIC_GetPriorityGrouping+0x18>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	f003 0307 	and.w	r3, r3, #7
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	db0b      	blt.n	8004306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ee:	79fb      	ldrb	r3, [r7, #7]
 80042f0:	f003 021f 	and.w	r2, r3, #31
 80042f4:	4907      	ldr	r1, [pc, #28]	@ (8004314 <__NVIC_EnableIRQ+0x38>)
 80042f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2001      	movs	r0, #1
 80042fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004306:	bf00      	nop
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop
 8004314:	e000e100 	.word	0xe000e100

08004318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	4603      	mov	r3, r0
 8004320:	6039      	str	r1, [r7, #0]
 8004322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db0a      	blt.n	8004342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	b2da      	uxtb	r2, r3
 8004330:	490c      	ldr	r1, [pc, #48]	@ (8004364 <__NVIC_SetPriority+0x4c>)
 8004332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004336:	0112      	lsls	r2, r2, #4
 8004338:	b2d2      	uxtb	r2, r2
 800433a:	440b      	add	r3, r1
 800433c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004340:	e00a      	b.n	8004358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	b2da      	uxtb	r2, r3
 8004346:	4908      	ldr	r1, [pc, #32]	@ (8004368 <__NVIC_SetPriority+0x50>)
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	3b04      	subs	r3, #4
 8004350:	0112      	lsls	r2, r2, #4
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	440b      	add	r3, r1
 8004356:	761a      	strb	r2, [r3, #24]
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	e000e100 	.word	0xe000e100
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800436c:	b480      	push	{r7}
 800436e:	b089      	sub	sp, #36	@ 0x24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	f1c3 0307 	rsb	r3, r3, #7
 8004386:	2b04      	cmp	r3, #4
 8004388:	bf28      	it	cs
 800438a:	2304      	movcs	r3, #4
 800438c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	3304      	adds	r3, #4
 8004392:	2b06      	cmp	r3, #6
 8004394:	d902      	bls.n	800439c <NVIC_EncodePriority+0x30>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	3b03      	subs	r3, #3
 800439a:	e000      	b.n	800439e <NVIC_EncodePriority+0x32>
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043a0:	f04f 32ff 	mov.w	r2, #4294967295
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43da      	mvns	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	401a      	ands	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043b4:	f04f 31ff 	mov.w	r1, #4294967295
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	43d9      	mvns	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c4:	4313      	orrs	r3, r2
         );
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3724      	adds	r7, #36	@ 0x24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ff4c 	bl	8004278 <__NVIC_SetPriorityGrouping>
}
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043fa:	f7ff ff61 	bl	80042c0 <__NVIC_GetPriorityGrouping>
 80043fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	6978      	ldr	r0, [r7, #20]
 8004406:	f7ff ffb1 	bl	800436c <NVIC_EncodePriority>
 800440a:	4602      	mov	r2, r0
 800440c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004410:	4611      	mov	r1, r2
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff80 	bl	8004318 <__NVIC_SetPriority>
}
 8004418:	bf00      	nop
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800442a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff ff54 	bl	80042dc <__NVIC_EnableIRQ>
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b084      	sub	sp, #16
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e037      	b.n	80044c2 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2202      	movs	r2, #2
 8004456:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004468:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800446c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800448e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f9bd 	bl	8004824 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b086      	sub	sp, #24
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
 80044d6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044d8:	2300      	movs	r3, #0
 80044da:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_DMA_Start_IT+0x20>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e04a      	b.n	8004580 <HAL_DMA_Start_IT+0xb6>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d13a      	bne.n	8004572 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	68b9      	ldr	r1, [r7, #8]
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f950 	bl	80047c6 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452a:	2b00      	cmp	r3, #0
 800452c:	d008      	beq.n	8004540 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 020e 	orr.w	r2, r2, #14
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e00f      	b.n	8004560 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 020a 	orr.w	r2, r2, #10
 800454e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0204 	bic.w	r2, r2, #4
 800455e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	e005      	b.n	800457e <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800457a:	2302      	movs	r3, #2
 800457c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800457e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e02e      	b.n	80045f8 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d008      	beq.n	80045b6 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2204      	movs	r2, #4
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e020      	b.n	80045f8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f022 020e 	bic.w	r2, r2, #14
 80045c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045de:	2101      	movs	r1, #1
 80045e0:	fa01 f202 	lsl.w	r2, r1, r2
 80045e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004616:	2b02      	cmp	r3, #2
 8004618:	d005      	beq.n	8004626 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2204      	movs	r2, #4
 800461e:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e027      	b.n	8004676 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f022 020e 	bic.w	r2, r2, #14
 8004634:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0201 	bic.w	r2, r2, #1
 8004644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464e:	2101      	movs	r1, #1
 8004650:	fa01 f202 	lsl.w	r2, r1, r2
 8004654:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
    }
  }
  return status;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	2204      	movs	r2, #4
 800469e:	409a      	lsls	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d024      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x72>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f003 0304 	and.w	r3, r3, #4
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01f      	beq.n	80046f2 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0320 	and.w	r3, r3, #32
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d107      	bne.n	80046d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d8:	2104      	movs	r1, #4
 80046da:	fa01 f202 	lsl.w	r2, r1, r2
 80046de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d06a      	beq.n	80047be <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80046f0:	e065      	b.n	80047be <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046f6:	2202      	movs	r2, #2
 80046f8:	409a      	lsls	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d02c      	beq.n	800475c <HAL_DMA_IRQHandler+0xdc>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d027      	beq.n	800475c <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10b      	bne.n	8004732 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 020a 	bic.w	r2, r2, #10
 8004728:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	2102      	movs	r1, #2
 800473c:	fa01 f202 	lsl.w	r2, r1, r2
 8004740:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474e:	2b00      	cmp	r3, #0
 8004750:	d035      	beq.n	80047be <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800475a:	e030      	b.n	80047be <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	2208      	movs	r2, #8
 8004762:	409a      	lsls	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4013      	ands	r3, r2
 8004768:	2b00      	cmp	r3, #0
 800476a:	d028      	beq.n	80047be <HAL_DMA_IRQHandler+0x13e>
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d023      	beq.n	80047be <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 020e 	bic.w	r2, r2, #14
 8004784:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478e:	2101      	movs	r1, #1
 8004790:	fa01 f202 	lsl.w	r2, r1, r2
 8004794:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d004      	beq.n	80047be <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	4798      	blx	r3
    }
  }
}
 80047bc:	e7ff      	b.n	80047be <HAL_DMA_IRQHandler+0x13e>
 80047be:	bf00      	nop
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b085      	sub	sp, #20
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
 80047ce:	60b9      	str	r1, [r7, #8]
 80047d0:	607a      	str	r2, [r7, #4]
 80047d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047dc:	2101      	movs	r1, #1
 80047de:	fa01 f202 	lsl.w	r2, r1, r2
 80047e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d108      	bne.n	8004806 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004804:	e007      	b.n	8004816 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68ba      	ldr	r2, [r7, #8]
 800480c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	60da      	str	r2, [r3, #12]
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
	...

08004824 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	4b14      	ldr	r3, [pc, #80]	@ (8004884 <DMA_CalcBaseAndBitshift+0x60>)
 8004834:	429a      	cmp	r2, r3
 8004836:	d80f      	bhi.n	8004858 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	4b12      	ldr	r3, [pc, #72]	@ (8004888 <DMA_CalcBaseAndBitshift+0x64>)
 8004840:	4413      	add	r3, r2
 8004842:	4a12      	ldr	r2, [pc, #72]	@ (800488c <DMA_CalcBaseAndBitshift+0x68>)
 8004844:	fba2 2303 	umull	r2, r3, r2, r3
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	009a      	lsls	r2, r3, #2
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a0f      	ldr	r2, [pc, #60]	@ (8004890 <DMA_CalcBaseAndBitshift+0x6c>)
 8004854:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8004856:	e00e      	b.n	8004876 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <DMA_CalcBaseAndBitshift+0x70>)
 8004860:	4413      	add	r3, r2
 8004862:	4a0a      	ldr	r2, [pc, #40]	@ (800488c <DMA_CalcBaseAndBitshift+0x68>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	009a      	lsls	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a09      	ldr	r2, [pc, #36]	@ (8004898 <DMA_CalcBaseAndBitshift+0x74>)
 8004874:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40020407 	.word	0x40020407
 8004888:	bffdfff8 	.word	0xbffdfff8
 800488c:	cccccccd 	.word	0xcccccccd
 8004890:	40020000 	.word	0x40020000
 8004894:	bffdfbf8 	.word	0xbffdfbf8
 8004898:	40020400 	.word	0x40020400

0800489c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80048aa:	e160      	b.n	8004b6e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	2101      	movs	r1, #1
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	fa01 f303 	lsl.w	r3, r1, r3
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8152 	beq.w	8004b68 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 0303 	and.w	r3, r3, #3
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d005      	beq.n	80048dc <HAL_GPIO_Init+0x40>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d130      	bne.n	800493e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	2203      	movs	r2, #3
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	43db      	mvns	r3, r3
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4013      	ands	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004912:	2201      	movs	r2, #1
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	f003 0201 	and.w	r2, r3, #1
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	fa02 f303 	lsl.w	r3, r2, r3
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	4313      	orrs	r3, r2
 8004936:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	f003 0303 	and.w	r3, r3, #3
 8004946:	2b03      	cmp	r3, #3
 8004948:	d017      	beq.n	800497a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	2203      	movs	r2, #3
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43db      	mvns	r3, r3
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4013      	ands	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	693a      	ldr	r2, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f003 0303 	and.w	r3, r3, #3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d123      	bne.n	80049ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	08da      	lsrs	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3208      	adds	r2, #8
 800498e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004992:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f003 0307 	and.w	r3, r3, #7
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	220f      	movs	r2, #15
 800499e:	fa02 f303 	lsl.w	r3, r2, r3
 80049a2:	43db      	mvns	r3, r3
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4013      	ands	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	08da      	lsrs	r2, r3, #3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	3208      	adds	r2, #8
 80049c8:	6939      	ldr	r1, [r7, #16]
 80049ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	005b      	lsls	r3, r3, #1
 80049d8:	2203      	movs	r2, #3
 80049da:	fa02 f303 	lsl.w	r3, r2, r3
 80049de:	43db      	mvns	r3, r3
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	4013      	ands	r3, r2
 80049e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	f003 0203 	and.w	r2, r3, #3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	fa02 f303 	lsl.w	r3, r2, r3
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 80ac 	beq.w	8004b68 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a10:	4b5e      	ldr	r3, [pc, #376]	@ (8004b8c <HAL_GPIO_Init+0x2f0>)
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	4a5d      	ldr	r2, [pc, #372]	@ (8004b8c <HAL_GPIO_Init+0x2f0>)
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	6193      	str	r3, [r2, #24]
 8004a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8004b8c <HAL_GPIO_Init+0x2f0>)
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	60bb      	str	r3, [r7, #8]
 8004a26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004a28:	4a59      	ldr	r2, [pc, #356]	@ (8004b90 <HAL_GPIO_Init+0x2f4>)
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0303 	and.w	r3, r3, #3
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	220f      	movs	r2, #15
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004a52:	d025      	beq.n	8004aa0 <HAL_GPIO_Init+0x204>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a4f      	ldr	r2, [pc, #316]	@ (8004b94 <HAL_GPIO_Init+0x2f8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d01f      	beq.n	8004a9c <HAL_GPIO_Init+0x200>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a4e      	ldr	r2, [pc, #312]	@ (8004b98 <HAL_GPIO_Init+0x2fc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d019      	beq.n	8004a98 <HAL_GPIO_Init+0x1fc>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a4d      	ldr	r2, [pc, #308]	@ (8004b9c <HAL_GPIO_Init+0x300>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d013      	beq.n	8004a94 <HAL_GPIO_Init+0x1f8>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a4c      	ldr	r2, [pc, #304]	@ (8004ba0 <HAL_GPIO_Init+0x304>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00d      	beq.n	8004a90 <HAL_GPIO_Init+0x1f4>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a4b      	ldr	r2, [pc, #300]	@ (8004ba4 <HAL_GPIO_Init+0x308>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <HAL_GPIO_Init+0x1f0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a4a      	ldr	r2, [pc, #296]	@ (8004ba8 <HAL_GPIO_Init+0x30c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d101      	bne.n	8004a88 <HAL_GPIO_Init+0x1ec>
 8004a84:	2306      	movs	r3, #6
 8004a86:	e00c      	b.n	8004aa2 <HAL_GPIO_Init+0x206>
 8004a88:	2307      	movs	r3, #7
 8004a8a:	e00a      	b.n	8004aa2 <HAL_GPIO_Init+0x206>
 8004a8c:	2305      	movs	r3, #5
 8004a8e:	e008      	b.n	8004aa2 <HAL_GPIO_Init+0x206>
 8004a90:	2304      	movs	r3, #4
 8004a92:	e006      	b.n	8004aa2 <HAL_GPIO_Init+0x206>
 8004a94:	2303      	movs	r3, #3
 8004a96:	e004      	b.n	8004aa2 <HAL_GPIO_Init+0x206>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e002      	b.n	8004aa2 <HAL_GPIO_Init+0x206>
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <HAL_GPIO_Init+0x206>
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	f002 0203 	and.w	r2, r2, #3
 8004aa8:	0092      	lsls	r2, r2, #2
 8004aaa:	4093      	lsls	r3, r2
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ab2:	4937      	ldr	r1, [pc, #220]	@ (8004b90 <HAL_GPIO_Init+0x2f4>)
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	089b      	lsrs	r3, r3, #2
 8004ab8:	3302      	adds	r3, #2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ac0:	4b3a      	ldr	r3, [pc, #232]	@ (8004bac <HAL_GPIO_Init+0x310>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	4013      	ands	r3, r2
 8004ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004ae4:	4a31      	ldr	r2, [pc, #196]	@ (8004bac <HAL_GPIO_Init+0x310>)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004aea:	4b30      	ldr	r3, [pc, #192]	@ (8004bac <HAL_GPIO_Init+0x310>)
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	693a      	ldr	r2, [r7, #16]
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004b0e:	4a27      	ldr	r2, [pc, #156]	@ (8004bac <HAL_GPIO_Init+0x310>)
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004b14:	4b25      	ldr	r3, [pc, #148]	@ (8004bac <HAL_GPIO_Init+0x310>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	4013      	ands	r3, r2
 8004b22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004b38:	4a1c      	ldr	r2, [pc, #112]	@ (8004bac <HAL_GPIO_Init+0x310>)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bac <HAL_GPIO_Init+0x310>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	43db      	mvns	r3, r3
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d003      	beq.n	8004b62 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004b62:	4a12      	ldr	r2, [pc, #72]	@ (8004bac <HAL_GPIO_Init+0x310>)
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	fa22 f303 	lsr.w	r3, r2, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f47f ae97 	bne.w	80048ac <HAL_GPIO_Init+0x10>
  }
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	371c      	adds	r7, #28
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	40021000 	.word	0x40021000
 8004b90:	40010000 	.word	0x40010000
 8004b94:	48000400 	.word	0x48000400
 8004b98:	48000800 	.word	0x48000800
 8004b9c:	48000c00 	.word	0x48000c00
 8004ba0:	48001000 	.word	0x48001000
 8004ba4:	48001400 	.word	0x48001400
 8004ba8:	48001800 	.word	0x48001800
 8004bac:	40010400 	.word	0x40010400

08004bb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	807b      	strh	r3, [r7, #2]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bc0:	787b      	ldrb	r3, [r7, #1]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004bc6:	887a      	ldrh	r2, [r7, #2]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004bcc:	e002      	b.n	8004bd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004bce:	887a      	ldrh	r2, [r7, #2]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004bd4:	bf00      	nop
 8004bd6:	370c      	adds	r7, #12
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr

08004be0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	4a0a      	ldr	r2, [pc, #40]	@ (8004c18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	6193      	str	r3, [r2, #24]
 8004bf4:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8004c00:	4b06      	ldr	r3, [pc, #24]	@ (8004c1c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4905      	ldr	r1, [pc, #20]	@ (8004c1c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	600b      	str	r3, [r1, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	40010000 	.word	0x40010000

08004c20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c2c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004c30:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c36:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f001 b83a 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004c4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 816f 	beq.w	8004f3a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004c5c:	4bb5      	ldr	r3, [pc, #724]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b04      	cmp	r3, #4
 8004c66:	d00c      	beq.n	8004c82 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004c68:	4bb2      	ldr	r3, [pc, #712]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f003 030c 	and.w	r3, r3, #12
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d15c      	bne.n	8004d2e <HAL_RCC_OscConfig+0x10e>
 8004c74:	4baf      	ldr	r3, [pc, #700]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c80:	d155      	bne.n	8004d2e <HAL_RCC_OscConfig+0x10e>
 8004c82:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004c86:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c96:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c9a:	fab3 f383 	clz	r3, r3
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	095b      	lsrs	r3, r3, #5
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f043 0301 	orr.w	r3, r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d102      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x94>
 8004cae:	4ba1      	ldr	r3, [pc, #644]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	e015      	b.n	8004ce0 <HAL_RCC_OscConfig+0xc0>
 8004cb4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004cb8:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8004cc0:	fa93 f3a3 	rbit	r3, r3
 8004cc4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8004cc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ccc:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004cd0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8004cd4:	fa93 f3a3 	rbit	r3, r3
 8004cd8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004cdc:	4b95      	ldr	r3, [pc, #596]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004ce4:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8004ce8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8004cec:	fa92 f2a2 	rbit	r2, r2
 8004cf0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8004cf4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004cf8:	fab2 f282 	clz	r2, r2
 8004cfc:	b2d2      	uxtb	r2, r2
 8004cfe:	f042 0220 	orr.w	r2, r2, #32
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	f002 021f 	and.w	r2, r2, #31
 8004d08:	2101      	movs	r1, #1
 8004d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f000 8111 	beq.w	8004f38 <HAL_RCC_OscConfig+0x318>
 8004d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f040 8108 	bne.w	8004f38 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f000 bfc6 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d32:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCC_OscConfig+0x12e>
 8004d40:	4b7c      	ldr	r3, [pc, #496]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a7b      	ldr	r2, [pc, #492]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	e036      	b.n	8004dbc <HAL_RCC_OscConfig+0x19c>
 8004d4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d52:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCC_OscConfig+0x158>
 8004d5e:	4b75      	ldr	r3, [pc, #468]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a74      	ldr	r2, [pc, #464]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b72      	ldr	r3, [pc, #456]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a71      	ldr	r2, [pc, #452]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	e021      	b.n	8004dbc <HAL_RCC_OscConfig+0x19c>
 8004d78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004d7c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d88:	d10c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x184>
 8004d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a69      	ldr	r2, [pc, #420]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d94:	6013      	str	r3, [r2, #0]
 8004d96:	4b67      	ldr	r3, [pc, #412]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a66      	ldr	r2, [pc, #408]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	e00b      	b.n	8004dbc <HAL_RCC_OscConfig+0x19c>
 8004da4:	4b63      	ldr	r3, [pc, #396]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a62      	ldr	r2, [pc, #392]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004daa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dae:	6013      	str	r3, [r2, #0]
 8004db0:	4b60      	ldr	r3, [pc, #384]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a5f      	ldr	r2, [pc, #380]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004db6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004dba:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004dc0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d059      	beq.n	8004e80 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fe56 	bl	8002a7c <HAL_GetTick>
 8004dd0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dd4:	e00a      	b.n	8004dec <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd6:	f7fd fe51 	bl	8002a7c <HAL_GetTick>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b64      	cmp	r3, #100	@ 0x64
 8004de4:	d902      	bls.n	8004dec <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	f000 bf67 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>
 8004dec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004df0:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004df4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8004df8:	fa93 f3a3 	rbit	r3, r3
 8004dfc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8004e00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e04:	fab3 f383 	clz	r3, r3
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d102      	bne.n	8004e1e <HAL_RCC_OscConfig+0x1fe>
 8004e18:	4b46      	ldr	r3, [pc, #280]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	e015      	b.n	8004e4a <HAL_RCC_OscConfig+0x22a>
 8004e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e22:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e26:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8004e2a:	fa93 f3a3 	rbit	r3, r3
 8004e2e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8004e32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004e36:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004e3a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8004e3e:	fa93 f3a3 	rbit	r3, r3
 8004e42:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004e46:	4b3b      	ldr	r3, [pc, #236]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004e4e:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8004e52:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8004e56:	fa92 f2a2 	rbit	r2, r2
 8004e5a:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8004e5e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004e62:	fab2 f282 	clz	r2, r2
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	f042 0220 	orr.w	r2, r2, #32
 8004e6c:	b2d2      	uxtb	r2, r2
 8004e6e:	f002 021f 	and.w	r2, r2, #31
 8004e72:	2101      	movs	r1, #1
 8004e74:	fa01 f202 	lsl.w	r2, r1, r2
 8004e78:	4013      	ands	r3, r2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0ab      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x1b6>
 8004e7e:	e05c      	b.n	8004f3a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fd fdfc 	bl	8002a7c <HAL_GetTick>
 8004e84:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e8a:	f7fd fdf7 	bl	8002a7c <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	@ 0x64
 8004e98:	d902      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	f000 bf0d 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>
 8004ea0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ea4:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8004eac:	fa93 f3a3 	rbit	r3, r3
 8004eb0:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8004eb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb8:	fab3 f383 	clz	r3, r3
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f043 0301 	orr.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d102      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x2b2>
 8004ecc:	4b19      	ldr	r3, [pc, #100]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	e015      	b.n	8004efe <HAL_RCC_OscConfig+0x2de>
 8004ed2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ed6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8004ede:	fa93 f3a3 	rbit	r3, r3
 8004ee2:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8004ee6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004eea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004eee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004ef2:	fa93 f3a3 	rbit	r3, r3
 8004ef6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004efa:	4b0e      	ldr	r3, [pc, #56]	@ (8004f34 <HAL_RCC_OscConfig+0x314>)
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004f02:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8004f06:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8004f0a:	fa92 f2a2 	rbit	r2, r2
 8004f0e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8004f12:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004f16:	fab2 f282 	clz	r2, r2
 8004f1a:	b2d2      	uxtb	r2, r2
 8004f1c:	f042 0220 	orr.w	r2, r2, #32
 8004f20:	b2d2      	uxtb	r2, r2
 8004f22:	f002 021f 	and.w	r2, r2, #31
 8004f26:	2101      	movs	r1, #1
 8004f28:	fa01 f202 	lsl.w	r2, r1, r2
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1ab      	bne.n	8004e8a <HAL_RCC_OscConfig+0x26a>
 8004f32:	e002      	b.n	8004f3a <HAL_RCC_OscConfig+0x31a>
 8004f34:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004f3e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 817f 	beq.w	800524e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004f50:	4ba7      	ldr	r3, [pc, #668]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00c      	beq.n	8004f76 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004f5c:	4ba4      	ldr	r3, [pc, #656]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d173      	bne.n	8005050 <HAL_RCC_OscConfig+0x430>
 8004f68:	4ba1      	ldr	r3, [pc, #644]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004f70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f74:	d16c      	bne.n	8005050 <HAL_RCC_OscConfig+0x430>
 8004f76:	2302      	movs	r3, #2
 8004f78:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004f80:	fa93 f3a3 	rbit	r3, r3
 8004f84:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8004f88:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8c:	fab3 f383 	clz	r3, r3
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f043 0301 	orr.w	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d102      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x386>
 8004fa0:	4b93      	ldr	r3, [pc, #588]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	e013      	b.n	8004fce <HAL_RCC_OscConfig+0x3ae>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fac:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8004fb0:	fa93 f3a3 	rbit	r3, r3
 8004fb4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004fbe:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8004fc2:	fa93 f3a3 	rbit	r3, r3
 8004fc6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004fca:	4b89      	ldr	r3, [pc, #548]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8004fd4:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8004fd8:	fa92 f2a2 	rbit	r2, r2
 8004fdc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8004fe0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004fe4:	fab2 f282 	clz	r2, r2
 8004fe8:	b2d2      	uxtb	r2, r2
 8004fea:	f042 0220 	orr.w	r2, r2, #32
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	f002 021f 	and.w	r2, r2, #31
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCC_OscConfig+0x3f6>
 8005000:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005004:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d002      	beq.n	8005016 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f000 be52 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005016:	4b76      	ldr	r3, [pc, #472]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800501e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005022:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	21f8      	movs	r1, #248	@ 0xf8
 800502c:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005030:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8005034:	fa91 f1a1 	rbit	r1, r1
 8005038:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 800503c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8005040:	fab1 f181 	clz	r1, r1
 8005044:	b2c9      	uxtb	r1, r1
 8005046:	408b      	lsls	r3, r1
 8005048:	4969      	ldr	r1, [pc, #420]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800504e:	e0fe      	b.n	800524e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005054:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8088 	beq.w	8005172 <HAL_RCC_OscConfig+0x552>
 8005062:	2301      	movs	r3, #1
 8005064:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005068:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800506c:	fa93 f3a3 	rbit	r3, r3
 8005070:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8005074:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005078:	fab3 f383 	clz	r3, r3
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005082:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	461a      	mov	r2, r3
 800508a:	2301      	movs	r3, #1
 800508c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7fd fcf5 	bl	8002a7c <HAL_GetTick>
 8005092:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005096:	e00a      	b.n	80050ae <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005098:	f7fd fcf0 	bl	8002a7c <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80050a2:	1ad3      	subs	r3, r2, r3
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d902      	bls.n	80050ae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	f000 be06 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>
 80050ae:	2302      	movs	r3, #2
 80050b0:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80050b8:	fa93 f3a3 	rbit	r3, r3
 80050bc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80050c0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c4:	fab3 f383 	clz	r3, r3
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f043 0301 	orr.w	r3, r3, #1
 80050d2:	b2db      	uxtb	r3, r3
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d102      	bne.n	80050de <HAL_RCC_OscConfig+0x4be>
 80050d8:	4b45      	ldr	r3, [pc, #276]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	e013      	b.n	8005106 <HAL_RCC_OscConfig+0x4e6>
 80050de:	2302      	movs	r3, #2
 80050e0:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050e4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80050e8:	fa93 f3a3 	rbit	r3, r3
 80050ec:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80050f0:	2302      	movs	r3, #2
 80050f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80050f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80050fa:	fa93 f3a3 	rbit	r3, r3
 80050fe:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005102:	4b3b      	ldr	r3, [pc, #236]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 8005104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005106:	2202      	movs	r2, #2
 8005108:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800510c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005110:	fa92 f2a2 	rbit	r2, r2
 8005114:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8005118:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800511c:	fab2 f282 	clz	r2, r2
 8005120:	b2d2      	uxtb	r2, r2
 8005122:	f042 0220 	orr.w	r2, r2, #32
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	f002 021f 	and.w	r2, r2, #31
 800512c:	2101      	movs	r1, #1
 800512e:	fa01 f202 	lsl.w	r2, r1, r2
 8005132:	4013      	ands	r3, r2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0af      	beq.n	8005098 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005138:	4b2d      	ldr	r3, [pc, #180]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005140:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005144:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	21f8      	movs	r1, #248	@ 0xf8
 800514e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005152:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8005156:	fa91 f1a1 	rbit	r1, r1
 800515a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 800515e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005162:	fab1 f181 	clz	r1, r1
 8005166:	b2c9      	uxtb	r1, r1
 8005168:	408b      	lsls	r3, r1
 800516a:	4921      	ldr	r1, [pc, #132]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 800516c:	4313      	orrs	r3, r2
 800516e:	600b      	str	r3, [r1, #0]
 8005170:	e06d      	b.n	800524e <HAL_RCC_OscConfig+0x62e>
 8005172:	2301      	movs	r3, #1
 8005174:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005178:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800517c:	fa93 f3a3 	rbit	r3, r3
 8005180:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8005184:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005192:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005196:	009b      	lsls	r3, r3, #2
 8005198:	461a      	mov	r2, r3
 800519a:	2300      	movs	r3, #0
 800519c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800519e:	f7fd fc6d 	bl	8002a7c <HAL_GetTick>
 80051a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051a8:	f7fd fc68 	bl	8002a7c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d902      	bls.n	80051be <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	f000 bd7e 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>
 80051be:	2302      	movs	r3, #2
 80051c0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80051c8:	fa93 f3a3 	rbit	r3, r3
 80051cc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80051d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d4:	fab3 f383 	clz	r3, r3
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	095b      	lsrs	r3, r3, #5
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	f043 0301 	orr.w	r3, r3, #1
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d105      	bne.n	80051f4 <HAL_RCC_OscConfig+0x5d4>
 80051e8:	4b01      	ldr	r3, [pc, #4]	@ (80051f0 <HAL_RCC_OscConfig+0x5d0>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	e016      	b.n	800521c <HAL_RCC_OscConfig+0x5fc>
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
 80051f4:	2302      	movs	r3, #2
 80051f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80051fe:	fa93 f3a3 	rbit	r3, r3
 8005202:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8005206:	2302      	movs	r3, #2
 8005208:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800520c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8005210:	fa93 f3a3 	rbit	r3, r3
 8005214:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005218:	4bbf      	ldr	r3, [pc, #764]	@ (8005518 <HAL_RCC_OscConfig+0x8f8>)
 800521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521c:	2202      	movs	r2, #2
 800521e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8005222:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8005226:	fa92 f2a2 	rbit	r2, r2
 800522a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800522e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8005232:	fab2 f282 	clz	r2, r2
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	f042 0220 	orr.w	r2, r2, #32
 800523c:	b2d2      	uxtb	r2, r2
 800523e:	f002 021f 	and.w	r2, r2, #31
 8005242:	2101      	movs	r1, #1
 8005244:	fa01 f202 	lsl.w	r2, r1, r2
 8005248:	4013      	ands	r3, r2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1ac      	bne.n	80051a8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800524e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005252:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8113 	beq.w	800548a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005264:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005268:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d07c      	beq.n	800536e <HAL_RCC_OscConfig+0x74e>
 8005274:	2301      	movs	r3, #1
 8005276:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800527a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800527e:	fa93 f3a3 	rbit	r3, r3
 8005282:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8005286:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800528a:	fab3 f383 	clz	r3, r3
 800528e:	b2db      	uxtb	r3, r3
 8005290:	461a      	mov	r2, r3
 8005292:	4ba2      	ldr	r3, [pc, #648]	@ (800551c <HAL_RCC_OscConfig+0x8fc>)
 8005294:	4413      	add	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	461a      	mov	r2, r3
 800529a:	2301      	movs	r3, #1
 800529c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529e:	f7fd fbed 	bl	8002a7c <HAL_GetTick>
 80052a2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052a6:	e00a      	b.n	80052be <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a8:	f7fd fbe8 	bl	8002a7c <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d902      	bls.n	80052be <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	f000 bcfe 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>
 80052be:	2302      	movs	r3, #2
 80052c0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80052c8:	fa93 f2a3 	rbit	r2, r3
 80052cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052d0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052de:	2202      	movs	r2, #2
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	fa93 f2a3 	rbit	r2, r3
 80052f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80052fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005302:	2202      	movs	r2, #2
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800530a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	fa93 f2a3 	rbit	r2, r3
 8005314:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005318:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800531c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800531e:	4b7e      	ldr	r3, [pc, #504]	@ (8005518 <HAL_RCC_OscConfig+0x8f8>)
 8005320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005322:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005326:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800532a:	2102      	movs	r1, #2
 800532c:	6019      	str	r1, [r3, #0]
 800532e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005332:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	fa93 f1a3 	rbit	r1, r3
 800533c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005340:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8005344:	6019      	str	r1, [r3, #0]
  return result;
 8005346:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800534a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	fab3 f383 	clz	r3, r3
 8005354:	b2db      	uxtb	r3, r3
 8005356:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	2101      	movs	r1, #1
 8005362:	fa01 f303 	lsl.w	r3, r1, r3
 8005366:	4013      	ands	r3, r2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d09d      	beq.n	80052a8 <HAL_RCC_OscConfig+0x688>
 800536c:	e08d      	b.n	800548a <HAL_RCC_OscConfig+0x86a>
 800536e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005372:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005376:	2201      	movs	r2, #1
 8005378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800537e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	fa93 f2a3 	rbit	r2, r3
 8005388:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800538c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8005390:	601a      	str	r2, [r3, #0]
  return result;
 8005392:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005396:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800539a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	4b5d      	ldr	r3, [pc, #372]	@ (800551c <HAL_RCC_OscConfig+0x8fc>)
 80053a6:	4413      	add	r3, r2
 80053a8:	009b      	lsls	r3, r3, #2
 80053aa:	461a      	mov	r2, r3
 80053ac:	2300      	movs	r3, #0
 80053ae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053b0:	f7fd fb64 	bl	8002a7c <HAL_GetTick>
 80053b4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b8:	e00a      	b.n	80053d0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053ba:	f7fd fb5f 	bl	8002a7c <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d902      	bls.n	80053d0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	f000 bc75 	b.w	8005cba <HAL_RCC_OscConfig+0x109a>
 80053d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80053d8:	2202      	movs	r2, #2
 80053da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	fa93 f2a3 	rbit	r2, r3
 80053ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053ee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80053f2:	601a      	str	r2, [r3, #0]
 80053f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80053f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80053fc:	2202      	movs	r2, #2
 80053fe:	601a      	str	r2, [r3, #0]
 8005400:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005404:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	fa93 f2a3 	rbit	r2, r3
 800540e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005412:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800541c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8005420:	2202      	movs	r2, #2
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005428:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	fa93 f2a3 	rbit	r2, r3
 8005432:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005436:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800543a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800543c:	4b36      	ldr	r3, [pc, #216]	@ (8005518 <HAL_RCC_OscConfig+0x8f8>)
 800543e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005444:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005448:	2102      	movs	r1, #2
 800544a:	6019      	str	r1, [r3, #0]
 800544c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005450:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	fa93 f1a3 	rbit	r1, r3
 800545a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800545e:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8005462:	6019      	str	r1, [r3, #0]
  return result;
 8005464:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005468:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
 8005474:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005478:	b2db      	uxtb	r3, r3
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	2101      	movs	r1, #1
 8005480:	fa01 f303 	lsl.w	r3, r1, r3
 8005484:	4013      	ands	r3, r2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d197      	bne.n	80053ba <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800548a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800548e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0304 	and.w	r3, r3, #4
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 81a5 	beq.w	80057ea <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054a0:	2300      	movs	r3, #0
 80054a2:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a6:	4b1c      	ldr	r3, [pc, #112]	@ (8005518 <HAL_RCC_OscConfig+0x8f8>)
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d116      	bne.n	80054e0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054b2:	4b19      	ldr	r3, [pc, #100]	@ (8005518 <HAL_RCC_OscConfig+0x8f8>)
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4a18      	ldr	r2, [pc, #96]	@ (8005518 <HAL_RCC_OscConfig+0x8f8>)
 80054b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054bc:	61d3      	str	r3, [r2, #28]
 80054be:	4b16      	ldr	r3, [pc, #88]	@ (8005518 <HAL_RCC_OscConfig+0x8f8>)
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80054c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80054d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80054d8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80054da:	2301      	movs	r3, #1
 80054dc:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005520 <HAL_RCC_OscConfig+0x900>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d121      	bne.n	8005530 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005520 <HAL_RCC_OscConfig+0x900>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0b      	ldr	r2, [pc, #44]	@ (8005520 <HAL_RCC_OscConfig+0x900>)
 80054f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054f6:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054f8:	f7fd fac0 	bl	8002a7c <HAL_GetTick>
 80054fc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005500:	e010      	b.n	8005524 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005502:	f7fd fabb 	bl	8002a7c <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b64      	cmp	r3, #100	@ 0x64
 8005510:	d908      	bls.n	8005524 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e3d1      	b.n	8005cba <HAL_RCC_OscConfig+0x109a>
 8005516:	bf00      	nop
 8005518:	40021000 	.word	0x40021000
 800551c:	10908120 	.word	0x10908120
 8005520:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	4b8d      	ldr	r3, [pc, #564]	@ (800575c <HAL_RCC_OscConfig+0xb3c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0e8      	beq.n	8005502 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005534:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d106      	bne.n	800554e <HAL_RCC_OscConfig+0x92e>
 8005540:	4b87      	ldr	r3, [pc, #540]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	4a86      	ldr	r2, [pc, #536]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005546:	f043 0301 	orr.w	r3, r3, #1
 800554a:	6213      	str	r3, [r2, #32]
 800554c:	e035      	b.n	80055ba <HAL_RCC_OscConfig+0x99a>
 800554e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005552:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10c      	bne.n	8005578 <HAL_RCC_OscConfig+0x958>
 800555e:	4b80      	ldr	r3, [pc, #512]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005560:	6a1b      	ldr	r3, [r3, #32]
 8005562:	4a7f      	ldr	r2, [pc, #508]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005564:	f023 0301 	bic.w	r3, r3, #1
 8005568:	6213      	str	r3, [r2, #32]
 800556a:	4b7d      	ldr	r3, [pc, #500]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	4a7c      	ldr	r2, [pc, #496]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005570:	f023 0304 	bic.w	r3, r3, #4
 8005574:	6213      	str	r3, [r2, #32]
 8005576:	e020      	b.n	80055ba <HAL_RCC_OscConfig+0x99a>
 8005578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800557c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b05      	cmp	r3, #5
 8005586:	d10c      	bne.n	80055a2 <HAL_RCC_OscConfig+0x982>
 8005588:	4b75      	ldr	r3, [pc, #468]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	4a74      	ldr	r2, [pc, #464]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	6213      	str	r3, [r2, #32]
 8005594:	4b72      	ldr	r3, [pc, #456]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	4a71      	ldr	r2, [pc, #452]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6213      	str	r3, [r2, #32]
 80055a0:	e00b      	b.n	80055ba <HAL_RCC_OscConfig+0x99a>
 80055a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4a6e      	ldr	r2, [pc, #440]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	6213      	str	r3, [r2, #32]
 80055ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	4a6b      	ldr	r2, [pc, #428]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 80055b4:	f023 0304 	bic.w	r3, r3, #4
 80055b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 8081 	beq.w	80056ce <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055cc:	f7fd fa56 	bl	8002a7c <HAL_GetTick>
 80055d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d4:	e00b      	b.n	80055ee <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d6:	f7fd fa51 	bl	8002a7c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e365      	b.n	8005cba <HAL_RCC_OscConfig+0x109a>
 80055ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055f2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80055f6:	2202      	movs	r2, #2
 80055f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80055fe:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	fa93 f2a3 	rbit	r2, r3
 8005608:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800560c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005616:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800561a:	2202      	movs	r2, #2
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005622:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	fa93 f2a3 	rbit	r2, r3
 800562c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005630:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8005634:	601a      	str	r2, [r3, #0]
  return result;
 8005636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800563a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800563e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005640:	fab3 f383 	clz	r3, r3
 8005644:	b2db      	uxtb	r3, r3
 8005646:	095b      	lsrs	r3, r3, #5
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f043 0302 	orr.w	r3, r3, #2
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b02      	cmp	r3, #2
 8005652:	d102      	bne.n	800565a <HAL_RCC_OscConfig+0xa3a>
 8005654:	4b42      	ldr	r3, [pc, #264]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	e013      	b.n	8005682 <HAL_RCC_OscConfig+0xa62>
 800565a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800565e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8005662:	2202      	movs	r2, #2
 8005664:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800566a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	fa93 f2a3 	rbit	r2, r3
 8005674:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005678:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	4b38      	ldr	r3, [pc, #224]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005682:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005686:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800568a:	2102      	movs	r1, #2
 800568c:	6011      	str	r1, [r2, #0]
 800568e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005692:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8005696:	6812      	ldr	r2, [r2, #0]
 8005698:	fa92 f1a2 	rbit	r1, r2
 800569c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80056a0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80056a4:	6011      	str	r1, [r2, #0]
  return result;
 80056a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80056aa:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80056ae:	6812      	ldr	r2, [r2, #0]
 80056b0:	fab2 f282 	clz	r2, r2
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	f002 021f 	and.w	r2, r2, #31
 80056c0:	2101      	movs	r1, #1
 80056c2:	fa01 f202 	lsl.w	r2, r1, r2
 80056c6:	4013      	ands	r3, r2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d084      	beq.n	80055d6 <HAL_RCC_OscConfig+0x9b6>
 80056cc:	e083      	b.n	80057d6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ce:	f7fd f9d5 	bl	8002a7c <HAL_GetTick>
 80056d2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d6:	e00b      	b.n	80056f0 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fd f9d0 	bl	8002a7c <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e2e4      	b.n	8005cba <HAL_RCC_OscConfig+0x109a>
 80056f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80056f4:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80056f8:	2202      	movs	r2, #2
 80056fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005700:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	fa93 f2a3 	rbit	r2, r3
 800570a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800570e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005718:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800571c:	2202      	movs	r2, #2
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005724:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	fa93 f2a3 	rbit	r2, r3
 800572e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005732:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005736:	601a      	str	r2, [r3, #0]
  return result;
 8005738:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800573c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8005740:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005742:	fab3 f383 	clz	r3, r3
 8005746:	b2db      	uxtb	r3, r3
 8005748:	095b      	lsrs	r3, r3, #5
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f043 0302 	orr.w	r3, r3, #2
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d106      	bne.n	8005764 <HAL_RCC_OscConfig+0xb44>
 8005756:	4b02      	ldr	r3, [pc, #8]	@ (8005760 <HAL_RCC_OscConfig+0xb40>)
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	e017      	b.n	800578c <HAL_RCC_OscConfig+0xb6c>
 800575c:	40007000 	.word	0x40007000
 8005760:	40021000 	.word	0x40021000
 8005764:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005768:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800576c:	2202      	movs	r2, #2
 800576e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005774:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	fa93 f2a3 	rbit	r2, r3
 800577e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005782:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	4bb3      	ldr	r3, [pc, #716]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 800578a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005790:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8005794:	2102      	movs	r1, #2
 8005796:	6011      	str	r1, [r2, #0]
 8005798:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800579c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80057a0:	6812      	ldr	r2, [r2, #0]
 80057a2:	fa92 f1a2 	rbit	r1, r2
 80057a6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057aa:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80057ae:	6011      	str	r1, [r2, #0]
  return result;
 80057b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80057b4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80057b8:	6812      	ldr	r2, [r2, #0]
 80057ba:	fab2 f282 	clz	r2, r2
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	f002 021f 	and.w	r2, r2, #31
 80057ca:	2101      	movs	r1, #1
 80057cc:	fa01 f202 	lsl.w	r2, r1, r2
 80057d0:	4013      	ands	r3, r2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d180      	bne.n	80056d8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80057d6:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d105      	bne.n	80057ea <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057de:	4b9e      	ldr	r3, [pc, #632]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 80057e0:	69db      	ldr	r3, [r3, #28]
 80057e2:	4a9d      	ldr	r2, [pc, #628]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 80057e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057e8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80057ee:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 825e 	beq.w	8005cb8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80057fc:	4b96      	ldr	r3, [pc, #600]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f003 030c 	and.w	r3, r3, #12
 8005804:	2b08      	cmp	r3, #8
 8005806:	f000 821f 	beq.w	8005c48 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800580a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800580e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b02      	cmp	r3, #2
 8005818:	f040 8170 	bne.w	8005afc <HAL_RCC_OscConfig+0xedc>
 800581c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005820:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005824:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800582a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800582e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	fa93 f2a3 	rbit	r2, r3
 8005838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800583c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8005840:	601a      	str	r2, [r3, #0]
  return result;
 8005842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005846:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800584a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800584c:	fab3 f383 	clz	r3, r3
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005856:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	461a      	mov	r2, r3
 800585e:	2300      	movs	r3, #0
 8005860:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005862:	f7fd f90b 	bl	8002a7c <HAL_GetTick>
 8005866:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800586a:	e009      	b.n	8005880 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586c:	f7fd f906 	bl	8002a7c <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e21c      	b.n	8005cba <HAL_RCC_OscConfig+0x109a>
 8005880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005884:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005888:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800588c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800588e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005892:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	fa93 f2a3 	rbit	r2, r3
 800589c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058a0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80058a4:	601a      	str	r2, [r3, #0]
  return result;
 80058a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058aa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80058ae:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80058b0:	fab3 f383 	clz	r3, r3
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d102      	bne.n	80058ca <HAL_RCC_OscConfig+0xcaa>
 80058c4:	4b64      	ldr	r3, [pc, #400]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	e027      	b.n	800591a <HAL_RCC_OscConfig+0xcfa>
 80058ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058ce:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80058d2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058dc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	fa93 f2a3 	rbit	r2, r3
 80058e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058ea:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80058ee:	601a      	str	r2, [r3, #0]
 80058f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80058f4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80058f8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80058fc:	601a      	str	r2, [r3, #0]
 80058fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005902:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	fa93 f2a3 	rbit	r2, r3
 800590c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005910:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	4b50      	ldr	r3, [pc, #320]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800591e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005922:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005926:	6011      	str	r1, [r2, #0]
 8005928:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800592c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005930:	6812      	ldr	r2, [r2, #0]
 8005932:	fa92 f1a2 	rbit	r1, r2
 8005936:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800593a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800593e:	6011      	str	r1, [r2, #0]
  return result;
 8005940:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005944:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005948:	6812      	ldr	r2, [r2, #0]
 800594a:	fab2 f282 	clz	r2, r2
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	f042 0220 	orr.w	r2, r2, #32
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	f002 021f 	and.w	r2, r2, #31
 800595a:	2101      	movs	r1, #1
 800595c:	fa01 f202 	lsl.w	r2, r1, r2
 8005960:	4013      	ands	r3, r2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d182      	bne.n	800586c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005966:	4b3c      	ldr	r3, [pc, #240]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	f023 020f 	bic.w	r2, r3, #15
 800596e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005972:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	4937      	ldr	r1, [pc, #220]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 800597c:	4313      	orrs	r3, r2
 800597e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8005980:	4b35      	ldr	r3, [pc, #212]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8005988:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800598c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a19      	ldr	r1, [r3, #32]
 8005994:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005998:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	69db      	ldr	r3, [r3, #28]
 80059a0:	430b      	orrs	r3, r1
 80059a2:	492d      	ldr	r1, [pc, #180]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	604b      	str	r3, [r1, #4]
 80059a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059ac:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80059b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80059b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059ba:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	fa93 f2a3 	rbit	r2, r3
 80059c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059c8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80059cc:	601a      	str	r2, [r3, #0]
  return result;
 80059ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80059d2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80059d6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059d8:	fab3 f383 	clz	r3, r3
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80059e2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	461a      	mov	r2, r3
 80059ea:	2301      	movs	r3, #1
 80059ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059ee:	f7fd f845 	bl	8002a7c <HAL_GetTick>
 80059f2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059f6:	e009      	b.n	8005a0c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059f8:	f7fd f840 	bl	8002a7c <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e156      	b.n	8005cba <HAL_RCC_OscConfig+0x109a>
 8005a0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a10:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005a14:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a1e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	fa93 f2a3 	rbit	r2, r3
 8005a28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a2c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005a30:	601a      	str	r2, [r3, #0]
  return result;
 8005a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a36:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005a3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a3c:	fab3 f383 	clz	r3, r3
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d105      	bne.n	8005a5c <HAL_RCC_OscConfig+0xe3c>
 8005a50:	4b01      	ldr	r3, [pc, #4]	@ (8005a58 <HAL_RCC_OscConfig+0xe38>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	e02a      	b.n	8005aac <HAL_RCC_OscConfig+0xe8c>
 8005a56:	bf00      	nop
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a60:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005a64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a6e:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	fa93 f2a3 	rbit	r2, r3
 8005a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a7c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005a80:	601a      	str	r2, [r3, #0]
 8005a82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005a8e:	601a      	str	r2, [r3, #0]
 8005a90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005a94:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	fa93 f2a3 	rbit	r2, r3
 8005a9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005aa2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	4b86      	ldr	r3, [pc, #536]	@ (8005cc4 <HAL_RCC_OscConfig+0x10a4>)
 8005aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005ab0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005ab4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005ab8:	6011      	str	r1, [r2, #0]
 8005aba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005abe:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005ac2:	6812      	ldr	r2, [r2, #0]
 8005ac4:	fa92 f1a2 	rbit	r1, r2
 8005ac8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005acc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005ad0:	6011      	str	r1, [r2, #0]
  return result;
 8005ad2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005ad6:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	fab2 f282 	clz	r2, r2
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	f042 0220 	orr.w	r2, r2, #32
 8005ae6:	b2d2      	uxtb	r2, r2
 8005ae8:	f002 021f 	and.w	r2, r2, #31
 8005aec:	2101      	movs	r1, #1
 8005aee:	fa01 f202 	lsl.w	r2, r1, r2
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f43f af7f 	beq.w	80059f8 <HAL_RCC_OscConfig+0xdd8>
 8005afa:	e0dd      	b.n	8005cb8 <HAL_RCC_OscConfig+0x1098>
 8005afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b00:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005b04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005b08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b0e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	fa93 f2a3 	rbit	r2, r3
 8005b18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b1c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005b20:	601a      	str	r2, [r3, #0]
  return result;
 8005b22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b26:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005b2a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2c:	fab3 f383 	clz	r3, r3
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005b36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b42:	f7fc ff9b 	bl	8002a7c <HAL_GetTick>
 8005b46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b4a:	e009      	b.n	8005b60 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b4c:	f7fc ff96 	bl	8002a7c <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e0ac      	b.n	8005cba <HAL_RCC_OscConfig+0x109a>
 8005b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b64:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005b68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b72:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	fa93 f2a3 	rbit	r2, r3
 8005b7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b80:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005b84:	601a      	str	r2, [r3, #0]
  return result;
 8005b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005b8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005b8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b90:	fab3 f383 	clz	r3, r3
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f043 0301 	orr.w	r3, r3, #1
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d102      	bne.n	8005baa <HAL_RCC_OscConfig+0xf8a>
 8005ba4:	4b47      	ldr	r3, [pc, #284]	@ (8005cc4 <HAL_RCC_OscConfig+0x10a4>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	e027      	b.n	8005bfa <HAL_RCC_OscConfig+0xfda>
 8005baa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bae:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005bb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bbc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	fa93 f2a3 	rbit	r2, r3
 8005bc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bca:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bd4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005bd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005be2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	fa93 f2a3 	rbit	r2, r3
 8005bec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005bf0:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8005bf4:	601a      	str	r2, [r3, #0]
 8005bf6:	4b33      	ldr	r3, [pc, #204]	@ (8005cc4 <HAL_RCC_OscConfig+0x10a4>)
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005bfe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005c02:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005c06:	6011      	str	r1, [r2, #0]
 8005c08:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005c0c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	fa92 f1a2 	rbit	r1, r2
 8005c16:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005c1a:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005c1e:	6011      	str	r1, [r2, #0]
  return result;
 8005c20:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8005c24:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8005c28:	6812      	ldr	r2, [r2, #0]
 8005c2a:	fab2 f282 	clz	r2, r2
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	f042 0220 	orr.w	r2, r2, #32
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	f002 021f 	and.w	r2, r2, #31
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8005c40:	4013      	ands	r3, r2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d182      	bne.n	8005b4c <HAL_RCC_OscConfig+0xf2c>
 8005c46:	e037      	b.n	8005cb8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	699b      	ldr	r3, [r3, #24]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e02e      	b.n	8005cba <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c5c:	4b19      	ldr	r3, [pc, #100]	@ (8005cc4 <HAL_RCC_OscConfig+0x10a4>)
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005c64:	4b17      	ldr	r3, [pc, #92]	@ (8005cc4 <HAL_RCC_OscConfig+0x10a4>)
 8005c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c68:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005c70:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8005c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69db      	ldr	r3, [r3, #28]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d117      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005c84:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8005c88:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005c8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005c90:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8005c9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005ca0:	f003 020f 	and.w	r2, r3, #15
 8005ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8005ca8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d001      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}
 8005cc4:	40021000 	.word	0x40021000

08005cc8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b09e      	sub	sp, #120	@ 0x78
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d101      	bne.n	8005ce0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e162      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ce0:	4b90      	ldr	r3, [pc, #576]	@ (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0307 	and.w	r3, r3, #7
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d910      	bls.n	8005d10 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cee:	4b8d      	ldr	r3, [pc, #564]	@ (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f023 0207 	bic.w	r2, r3, #7
 8005cf6:	498b      	ldr	r1, [pc, #556]	@ (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cfe:	4b89      	ldr	r3, [pc, #548]	@ (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e14a      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d1c:	4b82      	ldr	r3, [pc, #520]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	497f      	ldr	r1, [pc, #508]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f000 80dc 	beq.w	8005ef4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d13c      	bne.n	8005dbe <HAL_RCC_ClockConfig+0xf6>
 8005d44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d48:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d4c:	fa93 f3a3 	rbit	r3, r3
 8005d50:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d54:	fab3 f383 	clz	r3, r3
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	095b      	lsrs	r3, r3, #5
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d102      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xa6>
 8005d68:	4b6f      	ldr	r3, [pc, #444]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	e00f      	b.n	8005d8e <HAL_RCC_ClockConfig+0xc6>
 8005d6e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d76:	fa93 f3a3 	rbit	r3, r3
 8005d7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d80:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d84:	fa93 f3a3 	rbit	r3, r3
 8005d88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d8a:	4b67      	ldr	r3, [pc, #412]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005d94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005d96:	fa92 f2a2 	rbit	r2, r2
 8005d9a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005d9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d9e:	fab2 f282 	clz	r2, r2
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	f042 0220 	orr.w	r2, r2, #32
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	f002 021f 	and.w	r2, r2, #31
 8005dae:	2101      	movs	r1, #1
 8005db0:	fa01 f202 	lsl.w	r2, r1, r2
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d17b      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e0f3      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d13c      	bne.n	8005e40 <HAL_RCC_ClockConfig+0x178>
 8005dc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005dca:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dce:	fa93 f3a3 	rbit	r3, r3
 8005dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005dd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dd6:	fab3 f383 	clz	r3, r3
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f043 0301 	orr.w	r3, r3, #1
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d102      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x128>
 8005dea:	4b4f      	ldr	r3, [pc, #316]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	e00f      	b.n	8005e10 <HAL_RCC_ClockConfig+0x148>
 8005df0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005df4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005df8:	fa93 f3a3 	rbit	r3, r3
 8005dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dfe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e02:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e06:	fa93 f3a3 	rbit	r3, r3
 8005e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e0c:	4b46      	ldr	r3, [pc, #280]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005e14:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005e16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e18:	fa92 f2a2 	rbit	r2, r2
 8005e1c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005e1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e20:	fab2 f282 	clz	r2, r2
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	f042 0220 	orr.w	r2, r2, #32
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	f002 021f 	and.w	r2, r2, #31
 8005e30:	2101      	movs	r1, #1
 8005e32:	fa01 f202 	lsl.w	r2, r1, r2
 8005e36:	4013      	ands	r3, r2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d13a      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e0b2      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
 8005e40:	2302      	movs	r3, #2
 8005e42:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e46:	fa93 f3a3 	rbit	r3, r3
 8005e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e4e:	fab3 f383 	clz	r3, r3
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	f043 0301 	orr.w	r3, r3, #1
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d102      	bne.n	8005e68 <HAL_RCC_ClockConfig+0x1a0>
 8005e62:	4b31      	ldr	r3, [pc, #196]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	e00d      	b.n	8005e84 <HAL_RCC_ClockConfig+0x1bc>
 8005e68:	2302      	movs	r3, #2
 8005e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6e:	fa93 f3a3 	rbit	r3, r3
 8005e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e74:	2302      	movs	r3, #2
 8005e76:	623b      	str	r3, [r7, #32]
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	fa93 f3a3 	rbit	r3, r3
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	4b29      	ldr	r3, [pc, #164]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e84:	2202      	movs	r2, #2
 8005e86:	61ba      	str	r2, [r7, #24]
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	fa92 f2a2 	rbit	r2, r2
 8005e8e:	617a      	str	r2, [r7, #20]
  return result;
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	fab2 f282 	clz	r2, r2
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	f042 0220 	orr.w	r2, r2, #32
 8005e9c:	b2d2      	uxtb	r2, r2
 8005e9e:	f002 021f 	and.w	r2, r2, #31
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e079      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f023 0203 	bic.w	r2, r3, #3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	491a      	ldr	r1, [pc, #104]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ec4:	f7fc fdda 	bl	8002a7c <HAL_GetTick>
 8005ec8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eca:	e00a      	b.n	8005ee2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ecc:	f7fc fdd6 	bl	8002a7c <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e061      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee2:	4b11      	ldr	r3, [pc, #68]	@ (8005f28 <HAL_RCC_ClockConfig+0x260>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	f003 020c 	and.w	r2, r3, #12
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d1eb      	bne.n	8005ecc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 0307 	and.w	r3, r3, #7
 8005efc:	683a      	ldr	r2, [r7, #0]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d214      	bcs.n	8005f2c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f02:	4b08      	ldr	r3, [pc, #32]	@ (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f023 0207 	bic.w	r2, r3, #7
 8005f0a:	4906      	ldr	r1, [pc, #24]	@ (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f12:	4b04      	ldr	r3, [pc, #16]	@ (8005f24 <HAL_RCC_ClockConfig+0x25c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d005      	beq.n	8005f2c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e040      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x2de>
 8005f24:	40022000 	.word	0x40022000
 8005f28:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0304 	and.w	r3, r3, #4
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d008      	beq.n	8005f4a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f38:	4b1d      	ldr	r3, [pc, #116]	@ (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	491a      	ldr	r1, [pc, #104]	@ (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f46:	4313      	orrs	r3, r2
 8005f48:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0308 	and.w	r3, r3, #8
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f56:	4b16      	ldr	r3, [pc, #88]	@ (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4912      	ldr	r1, [pc, #72]	@ (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005f6a:	f000 f829 	bl	8005fc0 <HAL_RCC_GetSysClockFreq>
 8005f6e:	4601      	mov	r1, r0
 8005f70:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb0 <HAL_RCC_ClockConfig+0x2e8>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f78:	22f0      	movs	r2, #240	@ 0xf0
 8005f7a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	fa92 f2a2 	rbit	r2, r2
 8005f82:	60fa      	str	r2, [r7, #12]
  return result;
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	fab2 f282 	clz	r2, r2
 8005f8a:	b2d2      	uxtb	r2, r2
 8005f8c:	40d3      	lsrs	r3, r2
 8005f8e:	4a09      	ldr	r2, [pc, #36]	@ (8005fb4 <HAL_RCC_ClockConfig+0x2ec>)
 8005f90:	5cd3      	ldrb	r3, [r2, r3]
 8005f92:	fa21 f303 	lsr.w	r3, r1, r3
 8005f96:	4a08      	ldr	r2, [pc, #32]	@ (8005fb8 <HAL_RCC_ClockConfig+0x2f0>)
 8005f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005f9a:	4b08      	ldr	r3, [pc, #32]	@ (8005fbc <HAL_RCC_ClockConfig+0x2f4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fc fb78 	bl	8002694 <HAL_InitTick>
  
  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3778      	adds	r7, #120	@ 0x78
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	08011214 	.word	0x08011214
 8005fb8:	2000000c 	.word	0x2000000c
 8005fbc:	20000010 	.word	0x20000010

08005fc0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
 8005fce:	2300      	movs	r3, #0
 8005fd0:	617b      	str	r3, [r7, #20]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005fda:	4b1f      	ldr	r3, [pc, #124]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x98>)
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	d002      	beq.n	8005ff0 <HAL_RCC_GetSysClockFreq+0x30>
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d003      	beq.n	8005ff6 <HAL_RCC_GetSysClockFreq+0x36>
 8005fee:	e029      	b.n	8006044 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800605c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005ff2:	613b      	str	r3, [r7, #16]
      break;
 8005ff4:	e029      	b.n	800604a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	0c9b      	lsrs	r3, r3, #18
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006000:	5cd3      	ldrb	r3, [r2, r3]
 8006002:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8006004:	4b14      	ldr	r3, [pc, #80]	@ (8006058 <HAL_RCC_GetSysClockFreq+0x98>)
 8006006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006008:	f003 030f 	and.w	r3, r3, #15
 800600c:	4a15      	ldr	r2, [pc, #84]	@ (8006064 <HAL_RCC_GetSysClockFreq+0xa4>)
 800600e:	5cd3      	ldrb	r3, [r2, r3]
 8006010:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800601c:	4a0f      	ldr	r2, [pc, #60]	@ (800605c <HAL_RCC_GetSysClockFreq+0x9c>)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	fbb2 f2f3 	udiv	r2, r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e007      	b.n	800603e <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800602e:	4a0b      	ldr	r2, [pc, #44]	@ (800605c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	fbb2 f2f3 	udiv	r2, r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	fb02 f303 	mul.w	r3, r2, r3
 800603c:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	613b      	str	r3, [r7, #16]
      break;
 8006042:	e002      	b.n	800604a <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006044:	4b05      	ldr	r3, [pc, #20]	@ (800605c <HAL_RCC_GetSysClockFreq+0x9c>)
 8006046:	613b      	str	r3, [r7, #16]
      break;
 8006048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800604a:	693b      	ldr	r3, [r7, #16]
}
 800604c:	4618      	mov	r0, r3
 800604e:	371c      	adds	r7, #28
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	40021000 	.word	0x40021000
 800605c:	007a1200 	.word	0x007a1200
 8006060:	0801122c 	.word	0x0801122c
 8006064:	0801123c 	.word	0x0801123c

08006068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800606c:	4b03      	ldr	r3, [pc, #12]	@ (800607c <HAL_RCC_GetHCLKFreq+0x14>)
 800606e:	681b      	ldr	r3, [r3, #0]
}
 8006070:	4618      	mov	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	2000000c 	.word	0x2000000c

08006080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006086:	f7ff ffef 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 800608a:	4601      	mov	r1, r0
 800608c:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006094:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8006098:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	fa92 f2a2 	rbit	r2, r2
 80060a0:	603a      	str	r2, [r7, #0]
  return result;
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	fab2 f282 	clz	r2, r2
 80060a8:	b2d2      	uxtb	r2, r2
 80060aa:	40d3      	lsrs	r3, r2
 80060ac:	4a04      	ldr	r2, [pc, #16]	@ (80060c0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80060ae:	5cd3      	ldrb	r3, [r2, r3]
 80060b0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80060b4:	4618      	mov	r0, r3
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	40021000 	.word	0x40021000
 80060c0:	08011224 	.word	0x08011224

080060c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80060ca:	f7ff ffcd 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 80060ce:	4601      	mov	r1, r0
 80060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80060d8:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80060dc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	fa92 f2a2 	rbit	r2, r2
 80060e4:	603a      	str	r2, [r7, #0]
  return result;
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	fab2 f282 	clz	r2, r2
 80060ec:	b2d2      	uxtb	r2, r2
 80060ee:	40d3      	lsrs	r3, r2
 80060f0:	4a04      	ldr	r2, [pc, #16]	@ (8006104 <HAL_RCC_GetPCLK2Freq+0x40>)
 80060f2:	5cd3      	ldrb	r3, [r2, r3]
 80060f4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80060f8:	4618      	mov	r0, r3
 80060fa:	3708      	adds	r7, #8
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}
 8006100:	40021000 	.word	0x40021000
 8006104:	08011224 	.word	0x08011224

08006108 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	220f      	movs	r2, #15
 8006116:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006118:	4b12      	ldr	r3, [pc, #72]	@ (8006164 <HAL_RCC_GetClockConfig+0x5c>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 0203 	and.w	r2, r3, #3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8006124:	4b0f      	ldr	r3, [pc, #60]	@ (8006164 <HAL_RCC_GetClockConfig+0x5c>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8006130:	4b0c      	ldr	r3, [pc, #48]	@ (8006164 <HAL_RCC_GetClockConfig+0x5c>)
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800613c:	4b09      	ldr	r3, [pc, #36]	@ (8006164 <HAL_RCC_GetClockConfig+0x5c>)
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	08db      	lsrs	r3, r3, #3
 8006142:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800614a:	4b07      	ldr	r3, [pc, #28]	@ (8006168 <HAL_RCC_GetClockConfig+0x60>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f003 0207 	and.w	r2, r3, #7
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	601a      	str	r2, [r3, #0]
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40021000 	.word	0x40021000
 8006168:	40022000 	.word	0x40022000

0800616c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b092      	sub	sp, #72	@ 0x48
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8006178:	2300      	movs	r3, #0
 800617a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800617c:	2300      	movs	r3, #0
 800617e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80d4 	beq.w	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006190:	4b4e      	ldr	r3, [pc, #312]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10e      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619c:	4b4b      	ldr	r3, [pc, #300]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800619e:	69db      	ldr	r3, [r3, #28]
 80061a0:	4a4a      	ldr	r2, [pc, #296]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a6:	61d3      	str	r3, [r2, #28]
 80061a8:	4b48      	ldr	r3, [pc, #288]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061aa:	69db      	ldr	r3, [r3, #28]
 80061ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b0:	60bb      	str	r3, [r7, #8]
 80061b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061b4:	2301      	movs	r3, #1
 80061b6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ba:	4b45      	ldr	r3, [pc, #276]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d118      	bne.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061c6:	4b42      	ldr	r3, [pc, #264]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a41      	ldr	r2, [pc, #260]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061d0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061d2:	f7fc fc53 	bl	8002a7c <HAL_GetTick>
 80061d6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061d8:	e008      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061da:	f7fc fc4f 	bl	8002a7c <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	2b64      	cmp	r3, #100	@ 0x64
 80061e6:	d901      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e1d6      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061ec:	4b38      	ldr	r3, [pc, #224]	@ (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0f0      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061f8:	4b34      	ldr	r3, [pc, #208]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006200:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006204:	2b00      	cmp	r3, #0
 8006206:	f000 8084 	beq.w	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006212:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006214:	429a      	cmp	r2, r3
 8006216:	d07c      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006218:	4b2c      	ldr	r3, [pc, #176]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800621a:	6a1b      	ldr	r3, [r3, #32]
 800621c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006222:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006226:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800622a:	fa93 f3a3 	rbit	r3, r3
 800622e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006232:	fab3 f383 	clz	r3, r3
 8006236:	b2db      	uxtb	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	4b26      	ldr	r3, [pc, #152]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	461a      	mov	r2, r3
 8006242:	2301      	movs	r3, #1
 8006244:	6013      	str	r3, [r2, #0]
 8006246:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800624a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	fa93 f3a3 	rbit	r3, r3
 8006252:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006254:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006256:	fab3 f383 	clz	r3, r3
 800625a:	b2db      	uxtb	r3, r3
 800625c:	461a      	mov	r2, r3
 800625e:	4b1d      	ldr	r3, [pc, #116]	@ (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	461a      	mov	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800626a:	4a18      	ldr	r2, [pc, #96]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800626c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800626e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d04b      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627a:	f7fc fbff 	bl	8002a7c <HAL_GetTick>
 800627e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006280:	e00a      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006282:	f7fc fbfb 	bl	8002a7c <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006290:	4293      	cmp	r3, r2
 8006292:	d901      	bls.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8006294:	2303      	movs	r3, #3
 8006296:	e180      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8006298:	2302      	movs	r3, #2
 800629a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629e:	fa93 f3a3 	rbit	r3, r3
 80062a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80062a4:	2302      	movs	r3, #2
 80062a6:	623b      	str	r3, [r7, #32]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	fa93 f3a3 	rbit	r3, r3
 80062ae:	61fb      	str	r3, [r7, #28]
  return result;
 80062b0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062b2:	fab3 f383 	clz	r3, r3
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	f043 0302 	orr.w	r3, r3, #2
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d108      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80062c6:	4b01      	ldr	r3, [pc, #4]	@ (80062cc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	e00d      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80062cc:	40021000 	.word	0x40021000
 80062d0:	40007000 	.word	0x40007000
 80062d4:	10908100 	.word	0x10908100
 80062d8:	2302      	movs	r3, #2
 80062da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	fa93 f3a3 	rbit	r3, r3
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	4b9a      	ldr	r3, [pc, #616]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80062e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e8:	2202      	movs	r2, #2
 80062ea:	613a      	str	r2, [r7, #16]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	fa92 f2a2 	rbit	r2, r2
 80062f2:	60fa      	str	r2, [r7, #12]
  return result;
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	fab2 f282 	clz	r2, r2
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	f002 021f 	and.w	r2, r2, #31
 8006306:	2101      	movs	r1, #1
 8006308:	fa01 f202 	lsl.w	r2, r1, r2
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0b7      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006312:	4b8f      	ldr	r3, [pc, #572]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	498c      	ldr	r1, [pc, #560]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006320:	4313      	orrs	r3, r2
 8006322:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006324:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006328:	2b01      	cmp	r3, #1
 800632a:	d105      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800632c:	4b88      	ldr	r3, [pc, #544]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4a87      	ldr	r2, [pc, #540]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006336:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0301 	and.w	r3, r3, #1
 8006340:	2b00      	cmp	r3, #0
 8006342:	d008      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006344:	4b82      	ldr	r3, [pc, #520]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006348:	f023 0203 	bic.w	r2, r3, #3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	497f      	ldr	r1, [pc, #508]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d008      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006362:	4b7b      	ldr	r3, [pc, #492]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006366:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	4978      	ldr	r1, [pc, #480]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006370:	4313      	orrs	r3, r2
 8006372:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 0304 	and.w	r3, r3, #4
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006380:	4b73      	ldr	r3, [pc, #460]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006384:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	691b      	ldr	r3, [r3, #16]
 800638c:	4970      	ldr	r1, [pc, #448]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800638e:	4313      	orrs	r3, r2
 8006390:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d008      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800639e:	4b6c      	ldr	r3, [pc, #432]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a2:	f023 0210 	bic.w	r2, r3, #16
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	4969      	ldr	r1, [pc, #420]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80063bc:	4b64      	ldr	r3, [pc, #400]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063c8:	4961      	ldr	r1, [pc, #388]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80063da:	4b5d      	ldr	r3, [pc, #372]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063de:	f023 0220 	bic.w	r2, r3, #32
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	495a      	ldr	r1, [pc, #360]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063f8:	4b55      	ldr	r3, [pc, #340]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80063fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	4952      	ldr	r1, [pc, #328]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0308 	and.w	r3, r3, #8
 8006412:	2b00      	cmp	r3, #0
 8006414:	d008      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006416:	4b4e      	ldr	r3, [pc, #312]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	494b      	ldr	r1, [pc, #300]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006424:	4313      	orrs	r3, r2
 8006426:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 0310 	and.w	r3, r3, #16
 8006430:	2b00      	cmp	r3, #0
 8006432:	d008      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006434:	4b46      	ldr	r3, [pc, #280]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006438:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	4943      	ldr	r1, [pc, #268]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006442:	4313      	orrs	r3, r2
 8006444:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800644e:	2b00      	cmp	r3, #0
 8006450:	d008      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006452:	4b3f      	ldr	r3, [pc, #252]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645e:	493c      	ldr	r1, [pc, #240]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006460:	4313      	orrs	r3, r2
 8006462:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	d008      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006470:	4b37      	ldr	r3, [pc, #220]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006474:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800647c:	4934      	ldr	r1, [pc, #208]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800647e:	4313      	orrs	r3, r2
 8006480:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800648e:	4b30      	ldr	r3, [pc, #192]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006492:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800649a:	492d      	ldr	r1, [pc, #180]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800649c:	4313      	orrs	r3, r2
 800649e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d008      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80064ac:	4b28      	ldr	r3, [pc, #160]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064b8:	4925      	ldr	r1, [pc, #148]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d008      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80064ca:	4b21      	ldr	r3, [pc, #132]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ce:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064d6:	491e      	ldr	r1, [pc, #120]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064d8:	4313      	orrs	r3, r2
 80064da:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80064e8:	4b19      	ldr	r3, [pc, #100]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f4:	4916      	ldr	r1, [pc, #88]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006506:	4b12      	ldr	r3, [pc, #72]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006512:	490f      	ldr	r1, [pc, #60]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006514:	4313      	orrs	r3, r2
 8006516:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d008      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006524:	4b0a      	ldr	r3, [pc, #40]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006528:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006530:	4907      	ldr	r1, [pc, #28]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006532:	4313      	orrs	r3, r2
 8006534:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00c      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006542:	4b03      	ldr	r3, [pc, #12]	@ (8006550 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006546:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	e002      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800654e:	bf00      	nop
 8006550:	40021000 	.word	0x40021000
 8006554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006556:	4913      	ldr	r1, [pc, #76]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006558:	4313      	orrs	r3, r2
 800655a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d008      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006568:	4b0e      	ldr	r3, [pc, #56]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800656a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006574:	490b      	ldr	r1, [pc, #44]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006576:	4313      	orrs	r3, r2
 8006578:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006582:	2b00      	cmp	r3, #0
 8006584:	d008      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006586:	4b07      	ldr	r3, [pc, #28]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800658a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006592:	4904      	ldr	r1, [pc, #16]	@ (80065a4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006594:	4313      	orrs	r3, r2
 8006596:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3748      	adds	r7, #72	@ 0x48
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40021000 	.word	0x40021000

080065a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e049      	b.n	800664e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d106      	bne.n	80065d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f7fb ff5e 	bl	8002490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3304      	adds	r3, #4
 80065e4:	4619      	mov	r1, r3
 80065e6:	4610      	mov	r0, r2
 80065e8:	f000 feba 	bl	8007360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b01      	cmp	r3, #1
 800666a:	d001      	beq.n	8006670 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e047      	b.n	8006700 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a23      	ldr	r2, [pc, #140]	@ (800670c <HAL_TIM_Base_Start+0xb4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d01d      	beq.n	80066be <HAL_TIM_Base_Start+0x66>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800668a:	d018      	beq.n	80066be <HAL_TIM_Base_Start+0x66>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a1f      	ldr	r2, [pc, #124]	@ (8006710 <HAL_TIM_Base_Start+0xb8>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d013      	beq.n	80066be <HAL_TIM_Base_Start+0x66>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a1e      	ldr	r2, [pc, #120]	@ (8006714 <HAL_TIM_Base_Start+0xbc>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d00e      	beq.n	80066be <HAL_TIM_Base_Start+0x66>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a1c      	ldr	r2, [pc, #112]	@ (8006718 <HAL_TIM_Base_Start+0xc0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d009      	beq.n	80066be <HAL_TIM_Base_Start+0x66>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a1b      	ldr	r2, [pc, #108]	@ (800671c <HAL_TIM_Base_Start+0xc4>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d004      	beq.n	80066be <HAL_TIM_Base_Start+0x66>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a19      	ldr	r2, [pc, #100]	@ (8006720 <HAL_TIM_Base_Start+0xc8>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d115      	bne.n	80066ea <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	4b17      	ldr	r3, [pc, #92]	@ (8006724 <HAL_TIM_Base_Start+0xcc>)
 80066c6:	4013      	ands	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2b06      	cmp	r3, #6
 80066ce:	d015      	beq.n	80066fc <HAL_TIM_Base_Start+0xa4>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d6:	d011      	beq.n	80066fc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066e8:	e008      	b.n	80066fc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681a      	ldr	r2, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f042 0201 	orr.w	r2, r2, #1
 80066f8:	601a      	str	r2, [r3, #0]
 80066fa:	e000      	b.n	80066fe <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066fc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40012c00 	.word	0x40012c00
 8006710:	40000400 	.word	0x40000400
 8006714:	40000800 	.word	0x40000800
 8006718:	40013400 	.word	0x40013400
 800671c:	40014000 	.word	0x40014000
 8006720:	40015000 	.word	0x40015000
 8006724:	00010007 	.word	0x00010007

08006728 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d001      	beq.n	8006740 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e04f      	b.n	80067e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0201 	orr.w	r2, r2, #1
 8006756:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a23      	ldr	r2, [pc, #140]	@ (80067ec <HAL_TIM_Base_Start_IT+0xc4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_TIM_Base_Start_IT+0x76>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800676a:	d018      	beq.n	800679e <HAL_TIM_Base_Start_IT+0x76>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1f      	ldr	r2, [pc, #124]	@ (80067f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_TIM_Base_Start_IT+0x76>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1e      	ldr	r2, [pc, #120]	@ (80067f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_TIM_Base_Start_IT+0x76>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_TIM_Base_Start_IT+0x76>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <HAL_TIM_Base_Start_IT+0xd4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_TIM_Base_Start_IT+0x76>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a19      	ldr	r2, [pc, #100]	@ (8006800 <HAL_TIM_Base_Start_IT+0xd8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d115      	bne.n	80067ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	4b17      	ldr	r3, [pc, #92]	@ (8006804 <HAL_TIM_Base_Start_IT+0xdc>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b06      	cmp	r3, #6
 80067ae:	d015      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0xb4>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067b6:	d011      	beq.n	80067dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f042 0201 	orr.w	r2, r2, #1
 80067c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067c8:	e008      	b.n	80067dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0201 	orr.w	r2, r2, #1
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e000      	b.n	80067de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3714      	adds	r7, #20
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr
 80067ec:	40012c00 	.word	0x40012c00
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40000800 	.word	0x40000800
 80067f8:	40013400 	.word	0x40013400
 80067fc:	40014000 	.word	0x40014000
 8006800:	40015000 	.word	0x40015000
 8006804:	00010007 	.word	0x00010007

08006808 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e049      	b.n	80068ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d106      	bne.n	8006834 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 f841 	bl	80068b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	3304      	adds	r3, #4
 8006844:	4619      	mov	r1, r3
 8006846:	4610      	mov	r0, r2
 8006848:	f000 fd8a 	bl	8007360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2201      	movs	r2, #1
 8006880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2201      	movs	r2, #1
 8006888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2201      	movs	r2, #1
 8006890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b084      	sub	sp, #16
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d109      	bne.n	80068f0 <HAL_TIM_PWM_Start+0x24>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	bf14      	ite	ne
 80068e8:	2301      	movne	r3, #1
 80068ea:	2300      	moveq	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	e03c      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d109      	bne.n	800690a <HAL_TIM_PWM_Start+0x3e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	bf14      	ite	ne
 8006902:	2301      	movne	r3, #1
 8006904:	2300      	moveq	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	e02f      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	2b08      	cmp	r3, #8
 800690e:	d109      	bne.n	8006924 <HAL_TIM_PWM_Start+0x58>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006916:	b2db      	uxtb	r3, r3
 8006918:	2b01      	cmp	r3, #1
 800691a:	bf14      	ite	ne
 800691c:	2301      	movne	r3, #1
 800691e:	2300      	moveq	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	e022      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b0c      	cmp	r3, #12
 8006928:	d109      	bne.n	800693e <HAL_TIM_PWM_Start+0x72>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b01      	cmp	r3, #1
 8006934:	bf14      	ite	ne
 8006936:	2301      	movne	r3, #1
 8006938:	2300      	moveq	r3, #0
 800693a:	b2db      	uxtb	r3, r3
 800693c:	e015      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b10      	cmp	r3, #16
 8006942:	d109      	bne.n	8006958 <HAL_TIM_PWM_Start+0x8c>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b01      	cmp	r3, #1
 800694e:	bf14      	ite	ne
 8006950:	2301      	movne	r3, #1
 8006952:	2300      	moveq	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	e008      	b.n	800696a <HAL_TIM_PWM_Start+0x9e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800695e:	b2db      	uxtb	r3, r3
 8006960:	2b01      	cmp	r3, #1
 8006962:	bf14      	ite	ne
 8006964:	2301      	movne	r3, #1
 8006966:	2300      	moveq	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	e0a1      	b.n	8006ab6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d104      	bne.n	8006982 <HAL_TIM_PWM_Start+0xb6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006980:	e023      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b04      	cmp	r3, #4
 8006986:	d104      	bne.n	8006992 <HAL_TIM_PWM_Start+0xc6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2202      	movs	r2, #2
 800698c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006990:	e01b      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2b08      	cmp	r3, #8
 8006996:	d104      	bne.n	80069a2 <HAL_TIM_PWM_Start+0xd6>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2202      	movs	r2, #2
 800699c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069a0:	e013      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	2b0c      	cmp	r3, #12
 80069a6:	d104      	bne.n	80069b2 <HAL_TIM_PWM_Start+0xe6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069b0:	e00b      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b10      	cmp	r3, #16
 80069b6:	d104      	bne.n	80069c2 <HAL_TIM_PWM_Start+0xf6>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069c0:	e003      	b.n	80069ca <HAL_TIM_PWM_Start+0xfe>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2202      	movs	r2, #2
 80069c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2201      	movs	r2, #1
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 fac6 	bl	8007f64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a38      	ldr	r2, [pc, #224]	@ (8006ac0 <HAL_TIM_PWM_Start+0x1f4>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d018      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a37      	ldr	r2, [pc, #220]	@ (8006ac4 <HAL_TIM_PWM_Start+0x1f8>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d013      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a35      	ldr	r2, [pc, #212]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1fc>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d00e      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a34      	ldr	r2, [pc, #208]	@ (8006acc <HAL_TIM_PWM_Start+0x200>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d009      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a32      	ldr	r2, [pc, #200]	@ (8006ad0 <HAL_TIM_PWM_Start+0x204>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d004      	beq.n	8006a14 <HAL_TIM_PWM_Start+0x148>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a31      	ldr	r2, [pc, #196]	@ (8006ad4 <HAL_TIM_PWM_Start+0x208>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_TIM_PWM_Start+0x14c>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e000      	b.n	8006a1a <HAL_TIM_PWM_Start+0x14e>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d007      	beq.n	8006a2e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a23      	ldr	r2, [pc, #140]	@ (8006ac0 <HAL_TIM_PWM_Start+0x1f4>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d01d      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a40:	d018      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a24      	ldr	r2, [pc, #144]	@ (8006ad8 <HAL_TIM_PWM_Start+0x20c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a22      	ldr	r2, [pc, #136]	@ (8006adc <HAL_TIM_PWM_Start+0x210>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d00e      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8006ac4 <HAL_TIM_PWM_Start+0x1f8>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d009      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a18      	ldr	r2, [pc, #96]	@ (8006ac8 <HAL_TIM_PWM_Start+0x1fc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_PWM_Start+0x1a8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a19      	ldr	r2, [pc, #100]	@ (8006ad4 <HAL_TIM_PWM_Start+0x208>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d115      	bne.n	8006aa0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	4b19      	ldr	r3, [pc, #100]	@ (8006ae0 <HAL_TIM_PWM_Start+0x214>)
 8006a7c:	4013      	ands	r3, r2
 8006a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2b06      	cmp	r3, #6
 8006a84:	d015      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x1e6>
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a8c:	d011      	beq.n	8006ab2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9e:	e008      	b.n	8006ab2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	e000      	b.n	8006ab4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ab2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40012c00 	.word	0x40012c00
 8006ac4:	40013400 	.word	0x40013400
 8006ac8:	40014000 	.word	0x40014000
 8006acc:	40014400 	.word	0x40014400
 8006ad0:	40014800 	.word	0x40014800
 8006ad4:	40015000 	.word	0x40015000
 8006ad8:	40000400 	.word	0x40000400
 8006adc:	40000800 	.word	0x40000800
 8006ae0:	00010007 	.word	0x00010007

08006ae4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e049      	b.n	8006b8a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fb fc7c 	bl	8002408 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f000 fc1c 	bl	8007360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3708      	adds	r7, #8
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}

08006b92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b084      	sub	sp, #16
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d020      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d01b      	beq.n	8006bf6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f06f 0202 	mvn.w	r2, #2
 8006bc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d003      	beq.n	8006be4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fba0 	bl	8007322 <HAL_TIM_IC_CaptureCallback>
 8006be2:	e005      	b.n	8006bf0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb92 	bl	800730e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fba3 	bl	8007336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d020      	beq.n	8006c42 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d01b      	beq.n	8006c42 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f06f 0204 	mvn.w	r2, #4
 8006c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fb7a 	bl	8007322 <HAL_TIM_IC_CaptureCallback>
 8006c2e:	e005      	b.n	8006c3c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fb6c 	bl	800730e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fb7d 	bl	8007336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d020      	beq.n	8006c8e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d01b      	beq.n	8006c8e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f06f 0208 	mvn.w	r2, #8
 8006c5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2204      	movs	r2, #4
 8006c64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	69db      	ldr	r3, [r3, #28]
 8006c6c:	f003 0303 	and.w	r3, r3, #3
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fb54 	bl	8007322 <HAL_TIM_IC_CaptureCallback>
 8006c7a:	e005      	b.n	8006c88 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fb46 	bl	800730e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb57 	bl	8007336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f003 0310 	and.w	r3, r3, #16
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d020      	beq.n	8006cda <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d01b      	beq.n	8006cda <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f06f 0210 	mvn.w	r2, #16
 8006caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2208      	movs	r2, #8
 8006cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	69db      	ldr	r3, [r3, #28]
 8006cb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fb2e 	bl	8007322 <HAL_TIM_IC_CaptureCallback>
 8006cc6:	e005      	b.n	8006cd4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fb20 	bl	800730e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fb31 	bl	8007336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	f003 0301 	and.w	r3, r3, #1
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00c      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f06f 0201 	mvn.w	r2, #1
 8006cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7fb fad3 	bl	80022a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00c      	beq.n	8006d22 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f001 f9dd 	bl	80080dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00c      	beq.n	8006d46 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f9d5 	bl	80080f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00c      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 faf0 	bl	800734a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f003 0320 	and.w	r3, r3, #32
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00c      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f003 0320 	and.w	r3, r3, #32
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f06f 0220 	mvn.w	r2, #32
 8006d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f001 f99d 	bl	80080c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006d8e:	bf00      	nop
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b086      	sub	sp, #24
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	60f8      	str	r0, [r7, #12]
 8006d9e:	60b9      	str	r1, [r7, #8]
 8006da0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e088      	b.n	8006ec6 <HAL_TIM_IC_ConfigChannel+0x130>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d11b      	bne.n	8006dfa <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006dd2:	f000 ff09 	bl	8007be8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 020c 	bic.w	r2, r2, #12
 8006de4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	6999      	ldr	r1, [r3, #24]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	689a      	ldr	r2, [r3, #8]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	430a      	orrs	r2, r1
 8006df6:	619a      	str	r2, [r3, #24]
 8006df8:	e060      	b.n	8006ebc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d11c      	bne.n	8006e3a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006e10:	f000 ff87 	bl	8007d22 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006e22:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6999      	ldr	r1, [r3, #24]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	021a      	lsls	r2, r3, #8
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	619a      	str	r2, [r3, #24]
 8006e38:	e040      	b.n	8006ebc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b08      	cmp	r3, #8
 8006e3e:	d11b      	bne.n	8006e78 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8006e50:	f000 ffd4 	bl	8007dfc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69da      	ldr	r2, [r3, #28]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 020c 	bic.w	r2, r2, #12
 8006e62:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69d9      	ldr	r1, [r3, #28]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	689a      	ldr	r2, [r3, #8]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	430a      	orrs	r2, r1
 8006e74:	61da      	str	r2, [r3, #28]
 8006e76:	e021      	b.n	8006ebc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b0c      	cmp	r3, #12
 8006e7c:	d11c      	bne.n	8006eb8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8006e8e:	f000 fff1 	bl	8007e74 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006ea0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69d9      	ldr	r1, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	021a      	lsls	r2, r3, #8
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	61da      	str	r2, [r3, #28]
 8006eb6:	e001      	b.n	8006ebc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3718      	adds	r7, #24
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006eea:	2302      	movs	r3, #2
 8006eec:	e0ff      	b.n	80070ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b14      	cmp	r3, #20
 8006efa:	f200 80f0 	bhi.w	80070de <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006efe:	a201      	add	r2, pc, #4	@ (adr r2, 8006f04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f04:	08006f59 	.word	0x08006f59
 8006f08:	080070df 	.word	0x080070df
 8006f0c:	080070df 	.word	0x080070df
 8006f10:	080070df 	.word	0x080070df
 8006f14:	08006f99 	.word	0x08006f99
 8006f18:	080070df 	.word	0x080070df
 8006f1c:	080070df 	.word	0x080070df
 8006f20:	080070df 	.word	0x080070df
 8006f24:	08006fdb 	.word	0x08006fdb
 8006f28:	080070df 	.word	0x080070df
 8006f2c:	080070df 	.word	0x080070df
 8006f30:	080070df 	.word	0x080070df
 8006f34:	0800701b 	.word	0x0800701b
 8006f38:	080070df 	.word	0x080070df
 8006f3c:	080070df 	.word	0x080070df
 8006f40:	080070df 	.word	0x080070df
 8006f44:	0800705d 	.word	0x0800705d
 8006f48:	080070df 	.word	0x080070df
 8006f4c:	080070df 	.word	0x080070df
 8006f50:	080070df 	.word	0x080070df
 8006f54:	0800709d 	.word	0x0800709d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68b9      	ldr	r1, [r7, #8]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f000 faa8 	bl	80074b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0208 	orr.w	r2, r2, #8
 8006f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	699a      	ldr	r2, [r3, #24]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f022 0204 	bic.w	r2, r2, #4
 8006f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	6999      	ldr	r1, [r3, #24]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	691a      	ldr	r2, [r3, #16]
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	430a      	orrs	r2, r1
 8006f94:	619a      	str	r2, [r3, #24]
      break;
 8006f96:	e0a5      	b.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fb22 	bl	80075e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6999      	ldr	r1, [r3, #24]
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	021a      	lsls	r2, r3, #8
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	430a      	orrs	r2, r1
 8006fd6:	619a      	str	r2, [r3, #24]
      break;
 8006fd8:	e084      	b.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fb95 	bl	8007710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0208 	orr.w	r2, r2, #8
 8006ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	69da      	ldr	r2, [r3, #28]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0204 	bic.w	r2, r2, #4
 8007004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	69d9      	ldr	r1, [r3, #28]
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	691a      	ldr	r2, [r3, #16]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	430a      	orrs	r2, r1
 8007016:	61da      	str	r2, [r3, #28]
      break;
 8007018:	e064      	b.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	4618      	mov	r0, r3
 8007022:	f000 fc07 	bl	8007834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69da      	ldr	r2, [r3, #28]
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69da      	ldr	r2, [r3, #28]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	69d9      	ldr	r1, [r3, #28]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	021a      	lsls	r2, r3, #8
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	430a      	orrs	r2, r1
 8007058:	61da      	str	r2, [r3, #28]
      break;
 800705a:	e043      	b.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68b9      	ldr	r1, [r7, #8]
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fc56 	bl	8007914 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0208 	orr.w	r2, r2, #8
 8007076:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f022 0204 	bic.w	r2, r2, #4
 8007086:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	430a      	orrs	r2, r1
 8007098:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800709a:	e023      	b.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68b9      	ldr	r1, [r7, #8]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f000 fca0 	bl	80079e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	021a      	lsls	r2, r3, #8
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80070dc:	e002      	b.n	80070e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	75fb      	strb	r3, [r7, #23]
      break;
 80070e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80070ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800710c:	2b01      	cmp	r3, #1
 800710e:	d101      	bne.n	8007114 <HAL_TIM_ConfigClockSource+0x1c>
 8007110:	2302      	movs	r3, #2
 8007112:	e0b6      	b.n	8007282 <HAL_TIM_ConfigClockSource+0x18a>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2202      	movs	r2, #2
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007132:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007136:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800713e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007150:	d03e      	beq.n	80071d0 <HAL_TIM_ConfigClockSource+0xd8>
 8007152:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007156:	f200 8087 	bhi.w	8007268 <HAL_TIM_ConfigClockSource+0x170>
 800715a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800715e:	f000 8086 	beq.w	800726e <HAL_TIM_ConfigClockSource+0x176>
 8007162:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007166:	d87f      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x170>
 8007168:	2b70      	cmp	r3, #112	@ 0x70
 800716a:	d01a      	beq.n	80071a2 <HAL_TIM_ConfigClockSource+0xaa>
 800716c:	2b70      	cmp	r3, #112	@ 0x70
 800716e:	d87b      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x170>
 8007170:	2b60      	cmp	r3, #96	@ 0x60
 8007172:	d050      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x11e>
 8007174:	2b60      	cmp	r3, #96	@ 0x60
 8007176:	d877      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x170>
 8007178:	2b50      	cmp	r3, #80	@ 0x50
 800717a:	d03c      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0xfe>
 800717c:	2b50      	cmp	r3, #80	@ 0x50
 800717e:	d873      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x170>
 8007180:	2b40      	cmp	r3, #64	@ 0x40
 8007182:	d058      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x13e>
 8007184:	2b40      	cmp	r3, #64	@ 0x40
 8007186:	d86f      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x170>
 8007188:	2b30      	cmp	r3, #48	@ 0x30
 800718a:	d064      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15e>
 800718c:	2b30      	cmp	r3, #48	@ 0x30
 800718e:	d86b      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x170>
 8007190:	2b20      	cmp	r3, #32
 8007192:	d060      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15e>
 8007194:	2b20      	cmp	r3, #32
 8007196:	d867      	bhi.n	8007268 <HAL_TIM_ConfigClockSource+0x170>
 8007198:	2b00      	cmp	r3, #0
 800719a:	d05c      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15e>
 800719c:	2b10      	cmp	r3, #16
 800719e:	d05a      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0x15e>
 80071a0:	e062      	b.n	8007268 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071b2:	f000 feb7 	bl	8007f24 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68ba      	ldr	r2, [r7, #8]
 80071cc:	609a      	str	r2, [r3, #8]
      break;
 80071ce:	e04f      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071e0:	f000 fea0 	bl	8007f24 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071f2:	609a      	str	r2, [r3, #8]
      break;
 80071f4:	e03c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007202:	461a      	mov	r2, r3
 8007204:	f000 fd5e 	bl	8007cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2150      	movs	r1, #80	@ 0x50
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fe6d 	bl	8007eee <TIM_ITRx_SetConfig>
      break;
 8007214:	e02c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007222:	461a      	mov	r2, r3
 8007224:	f000 fdba 	bl	8007d9c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2160      	movs	r1, #96	@ 0x60
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fe5d 	bl	8007eee <TIM_ITRx_SetConfig>
      break;
 8007234:	e01c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007242:	461a      	mov	r2, r3
 8007244:	f000 fd3e 	bl	8007cc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2140      	movs	r1, #64	@ 0x40
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fe4d 	bl	8007eee <TIM_ITRx_SetConfig>
      break;
 8007254:	e00c      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4619      	mov	r1, r3
 8007260:	4610      	mov	r0, r2
 8007262:	f000 fe44 	bl	8007eee <TIM_ITRx_SetConfig>
      break;
 8007266:	e003      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	73fb      	strb	r3, [r7, #15]
      break;
 800726c:	e000      	b.n	8007270 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800726e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2201      	movs	r2, #1
 8007274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_TIM_SlaveConfigSynchro+0x18>
 800729e:	2302      	movs	r3, #2
 80072a0:	e031      	b.n	8007306 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2202      	movs	r2, #2
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80072b2:	6839      	ldr	r1, [r7, #0]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fc03 	bl	8007ac0 <TIM_SlaveTimer_SetConfig>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d009      	beq.n	80072d4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2201      	movs	r2, #1
 80072c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	e018      	b.n	8007306 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072e2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68da      	ldr	r2, [r3, #12]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072f2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2201      	movs	r2, #1
 80072f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800734a:	b480      	push	{r7}
 800734c:	b083      	sub	sp, #12
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
	...

08007360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a48      	ldr	r2, [pc, #288]	@ (8007494 <TIM_Base_SetConfig+0x134>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d013      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800737e:	d00f      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a45      	ldr	r2, [pc, #276]	@ (8007498 <TIM_Base_SetConfig+0x138>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00b      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a44      	ldr	r2, [pc, #272]	@ (800749c <TIM_Base_SetConfig+0x13c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d007      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a43      	ldr	r2, [pc, #268]	@ (80074a0 <TIM_Base_SetConfig+0x140>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d003      	beq.n	80073a0 <TIM_Base_SetConfig+0x40>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a42      	ldr	r2, [pc, #264]	@ (80074a4 <TIM_Base_SetConfig+0x144>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d108      	bne.n	80073b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	4a37      	ldr	r2, [pc, #220]	@ (8007494 <TIM_Base_SetConfig+0x134>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01f      	beq.n	80073fa <TIM_Base_SetConfig+0x9a>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c0:	d01b      	beq.n	80073fa <TIM_Base_SetConfig+0x9a>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a34      	ldr	r2, [pc, #208]	@ (8007498 <TIM_Base_SetConfig+0x138>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d017      	beq.n	80073fa <TIM_Base_SetConfig+0x9a>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a33      	ldr	r2, [pc, #204]	@ (800749c <TIM_Base_SetConfig+0x13c>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <TIM_Base_SetConfig+0x9a>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a32      	ldr	r2, [pc, #200]	@ (80074a0 <TIM_Base_SetConfig+0x140>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00f      	beq.n	80073fa <TIM_Base_SetConfig+0x9a>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a32      	ldr	r2, [pc, #200]	@ (80074a8 <TIM_Base_SetConfig+0x148>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00b      	beq.n	80073fa <TIM_Base_SetConfig+0x9a>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a31      	ldr	r2, [pc, #196]	@ (80074ac <TIM_Base_SetConfig+0x14c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <TIM_Base_SetConfig+0x9a>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a30      	ldr	r2, [pc, #192]	@ (80074b0 <TIM_Base_SetConfig+0x150>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_Base_SetConfig+0x9a>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a2b      	ldr	r2, [pc, #172]	@ (80074a4 <TIM_Base_SetConfig+0x144>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d108      	bne.n	800740c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	695b      	ldr	r3, [r3, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a18      	ldr	r2, [pc, #96]	@ (8007494 <TIM_Base_SetConfig+0x134>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d013      	beq.n	8007460 <TIM_Base_SetConfig+0x100>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a19      	ldr	r2, [pc, #100]	@ (80074a0 <TIM_Base_SetConfig+0x140>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d00f      	beq.n	8007460 <TIM_Base_SetConfig+0x100>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	4a19      	ldr	r2, [pc, #100]	@ (80074a8 <TIM_Base_SetConfig+0x148>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d00b      	beq.n	8007460 <TIM_Base_SetConfig+0x100>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	4a18      	ldr	r2, [pc, #96]	@ (80074ac <TIM_Base_SetConfig+0x14c>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d007      	beq.n	8007460 <TIM_Base_SetConfig+0x100>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a17      	ldr	r2, [pc, #92]	@ (80074b0 <TIM_Base_SetConfig+0x150>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d003      	beq.n	8007460 <TIM_Base_SetConfig+0x100>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a12      	ldr	r2, [pc, #72]	@ (80074a4 <TIM_Base_SetConfig+0x144>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d103      	bne.n	8007468 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	691a      	ldr	r2, [r3, #16]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	f003 0301 	and.w	r3, r3, #1
 8007476:	2b01      	cmp	r3, #1
 8007478:	d105      	bne.n	8007486 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f023 0201 	bic.w	r2, r3, #1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	611a      	str	r2, [r3, #16]
  }
}
 8007486:	bf00      	nop
 8007488:	3714      	adds	r7, #20
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr
 8007492:	bf00      	nop
 8007494:	40012c00 	.word	0x40012c00
 8007498:	40000400 	.word	0x40000400
 800749c:	40000800 	.word	0x40000800
 80074a0:	40013400 	.word	0x40013400
 80074a4:	40015000 	.word	0x40015000
 80074a8:	40014000 	.word	0x40014000
 80074ac:	40014400 	.word	0x40014400
 80074b0:	40014800 	.word	0x40014800

080074b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	f023 0201 	bic.w	r2, r3, #1
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0303 	bic.w	r3, r3, #3
 80074ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f023 0302 	bic.w	r3, r3, #2
 8007500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a30      	ldr	r2, [pc, #192]	@ (80075d0 <TIM_OC1_SetConfig+0x11c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d013      	beq.n	800753c <TIM_OC1_SetConfig+0x88>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a2f      	ldr	r2, [pc, #188]	@ (80075d4 <TIM_OC1_SetConfig+0x120>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00f      	beq.n	800753c <TIM_OC1_SetConfig+0x88>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a2e      	ldr	r2, [pc, #184]	@ (80075d8 <TIM_OC1_SetConfig+0x124>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00b      	beq.n	800753c <TIM_OC1_SetConfig+0x88>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a2d      	ldr	r2, [pc, #180]	@ (80075dc <TIM_OC1_SetConfig+0x128>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d007      	beq.n	800753c <TIM_OC1_SetConfig+0x88>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a2c      	ldr	r2, [pc, #176]	@ (80075e0 <TIM_OC1_SetConfig+0x12c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_OC1_SetConfig+0x88>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a2b      	ldr	r2, [pc, #172]	@ (80075e4 <TIM_OC1_SetConfig+0x130>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d10c      	bne.n	8007556 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f023 0308 	bic.w	r3, r3, #8
 8007542:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	68db      	ldr	r3, [r3, #12]
 8007548:	697a      	ldr	r2, [r7, #20]
 800754a:	4313      	orrs	r3, r2
 800754c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f023 0304 	bic.w	r3, r3, #4
 8007554:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1d      	ldr	r2, [pc, #116]	@ (80075d0 <TIM_OC1_SetConfig+0x11c>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <TIM_OC1_SetConfig+0xd2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a1c      	ldr	r2, [pc, #112]	@ (80075d4 <TIM_OC1_SetConfig+0x120>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00f      	beq.n	8007586 <TIM_OC1_SetConfig+0xd2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a1b      	ldr	r2, [pc, #108]	@ (80075d8 <TIM_OC1_SetConfig+0x124>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00b      	beq.n	8007586 <TIM_OC1_SetConfig+0xd2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a1a      	ldr	r2, [pc, #104]	@ (80075dc <TIM_OC1_SetConfig+0x128>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d007      	beq.n	8007586 <TIM_OC1_SetConfig+0xd2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a19      	ldr	r2, [pc, #100]	@ (80075e0 <TIM_OC1_SetConfig+0x12c>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d003      	beq.n	8007586 <TIM_OC1_SetConfig+0xd2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a18      	ldr	r2, [pc, #96]	@ (80075e4 <TIM_OC1_SetConfig+0x130>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d111      	bne.n	80075aa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800758c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	693a      	ldr	r2, [r7, #16]
 800759c:	4313      	orrs	r3, r2
 800759e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	621a      	str	r2, [r3, #32]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	40012c00 	.word	0x40012c00
 80075d4:	40013400 	.word	0x40013400
 80075d8:	40014000 	.word	0x40014000
 80075dc:	40014400 	.word	0x40014400
 80075e0:	40014800 	.word	0x40014800
 80075e4:	40015000 	.word	0x40015000

080075e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b087      	sub	sp, #28
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	f023 0210 	bic.w	r2, r3, #16
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699b      	ldr	r3, [r3, #24]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800761a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007622:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	021b      	lsls	r3, r3, #8
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	4313      	orrs	r3, r2
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	f023 0320 	bic.w	r3, r3, #32
 8007636:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	4313      	orrs	r3, r2
 8007642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	4a2c      	ldr	r2, [pc, #176]	@ (80076f8 <TIM_OC2_SetConfig+0x110>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d007      	beq.n	800765c <TIM_OC2_SetConfig+0x74>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a2b      	ldr	r2, [pc, #172]	@ (80076fc <TIM_OC2_SetConfig+0x114>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d003      	beq.n	800765c <TIM_OC2_SetConfig+0x74>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4a2a      	ldr	r2, [pc, #168]	@ (8007700 <TIM_OC2_SetConfig+0x118>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d10d      	bne.n	8007678 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007676:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a1f      	ldr	r2, [pc, #124]	@ (80076f8 <TIM_OC2_SetConfig+0x110>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d013      	beq.n	80076a8 <TIM_OC2_SetConfig+0xc0>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a1e      	ldr	r2, [pc, #120]	@ (80076fc <TIM_OC2_SetConfig+0x114>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00f      	beq.n	80076a8 <TIM_OC2_SetConfig+0xc0>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a1e      	ldr	r2, [pc, #120]	@ (8007704 <TIM_OC2_SetConfig+0x11c>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d00b      	beq.n	80076a8 <TIM_OC2_SetConfig+0xc0>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a1d      	ldr	r2, [pc, #116]	@ (8007708 <TIM_OC2_SetConfig+0x120>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d007      	beq.n	80076a8 <TIM_OC2_SetConfig+0xc0>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a1c      	ldr	r2, [pc, #112]	@ (800770c <TIM_OC2_SetConfig+0x124>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d003      	beq.n	80076a8 <TIM_OC2_SetConfig+0xc0>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a17      	ldr	r2, [pc, #92]	@ (8007700 <TIM_OC2_SetConfig+0x118>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d113      	bne.n	80076d0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076ae:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076b6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	68fa      	ldr	r2, [r7, #12]
 80076da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	621a      	str	r2, [r3, #32]
}
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40012c00 	.word	0x40012c00
 80076fc:	40013400 	.word	0x40013400
 8007700:	40015000 	.word	0x40015000
 8007704:	40014000 	.word	0x40014000
 8007708:	40014400 	.word	0x40014400
 800770c:	40014800 	.word	0x40014800

08007710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007710:	b480      	push	{r7}
 8007712:	b087      	sub	sp, #28
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a1b      	ldr	r3, [r3, #32]
 8007724:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800773e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f023 0303 	bic.w	r3, r3, #3
 800774a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	4313      	orrs	r3, r2
 8007754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800775c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	021b      	lsls	r3, r3, #8
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	4313      	orrs	r3, r2
 8007768:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a2b      	ldr	r2, [pc, #172]	@ (800781c <TIM_OC3_SetConfig+0x10c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d007      	beq.n	8007782 <TIM_OC3_SetConfig+0x72>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a2a      	ldr	r2, [pc, #168]	@ (8007820 <TIM_OC3_SetConfig+0x110>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d003      	beq.n	8007782 <TIM_OC3_SetConfig+0x72>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a29      	ldr	r2, [pc, #164]	@ (8007824 <TIM_OC3_SetConfig+0x114>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d10d      	bne.n	800779e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800779c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a1e      	ldr	r2, [pc, #120]	@ (800781c <TIM_OC3_SetConfig+0x10c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d013      	beq.n	80077ce <TIM_OC3_SetConfig+0xbe>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007820 <TIM_OC3_SetConfig+0x110>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d00f      	beq.n	80077ce <TIM_OC3_SetConfig+0xbe>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007828 <TIM_OC3_SetConfig+0x118>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00b      	beq.n	80077ce <TIM_OC3_SetConfig+0xbe>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a1c      	ldr	r2, [pc, #112]	@ (800782c <TIM_OC3_SetConfig+0x11c>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d007      	beq.n	80077ce <TIM_OC3_SetConfig+0xbe>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a1b      	ldr	r2, [pc, #108]	@ (8007830 <TIM_OC3_SetConfig+0x120>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d003      	beq.n	80077ce <TIM_OC3_SetConfig+0xbe>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a16      	ldr	r2, [pc, #88]	@ (8007824 <TIM_OC3_SetConfig+0x114>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d113      	bne.n	80077f6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	011b      	lsls	r3, r3, #4
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	011b      	lsls	r3, r3, #4
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	685a      	ldr	r2, [r3, #4]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	621a      	str	r2, [r3, #32]
}
 8007810:	bf00      	nop
 8007812:	371c      	adds	r7, #28
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	40012c00 	.word	0x40012c00
 8007820:	40013400 	.word	0x40013400
 8007824:	40015000 	.word	0x40015000
 8007828:	40014000 	.word	0x40014000
 800782c:	40014400 	.word	0x40014400
 8007830:	40014800 	.word	0x40014800

08007834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	69db      	ldr	r3, [r3, #28]
 800785a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800786e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	021b      	lsls	r3, r3, #8
 8007876:	68fa      	ldr	r2, [r7, #12]
 8007878:	4313      	orrs	r3, r2
 800787a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	031b      	lsls	r3, r3, #12
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4313      	orrs	r3, r2
 800788e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a1a      	ldr	r2, [pc, #104]	@ (80078fc <TIM_OC4_SetConfig+0xc8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d013      	beq.n	80078c0 <TIM_OC4_SetConfig+0x8c>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a19      	ldr	r2, [pc, #100]	@ (8007900 <TIM_OC4_SetConfig+0xcc>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d00f      	beq.n	80078c0 <TIM_OC4_SetConfig+0x8c>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a18      	ldr	r2, [pc, #96]	@ (8007904 <TIM_OC4_SetConfig+0xd0>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00b      	beq.n	80078c0 <TIM_OC4_SetConfig+0x8c>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	4a17      	ldr	r2, [pc, #92]	@ (8007908 <TIM_OC4_SetConfig+0xd4>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d007      	beq.n	80078c0 <TIM_OC4_SetConfig+0x8c>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a16      	ldr	r2, [pc, #88]	@ (800790c <TIM_OC4_SetConfig+0xd8>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d003      	beq.n	80078c0 <TIM_OC4_SetConfig+0x8c>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a15      	ldr	r2, [pc, #84]	@ (8007910 <TIM_OC4_SetConfig+0xdc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d109      	bne.n	80078d4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	695b      	ldr	r3, [r3, #20]
 80078cc:	019b      	lsls	r3, r3, #6
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	685a      	ldr	r2, [r3, #4]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	621a      	str	r2, [r3, #32]
}
 80078ee:	bf00      	nop
 80078f0:	371c      	adds	r7, #28
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
 80078fa:	bf00      	nop
 80078fc:	40012c00 	.word	0x40012c00
 8007900:	40013400 	.word	0x40013400
 8007904:	40014000 	.word	0x40014000
 8007908:	40014400 	.word	0x40014400
 800790c:	40014800 	.word	0x40014800
 8007910:	40015000 	.word	0x40015000

08007914 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6a1b      	ldr	r3, [r3, #32]
 8007928:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	4313      	orrs	r3, r2
 8007950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007958:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	041b      	lsls	r3, r3, #16
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	4313      	orrs	r3, r2
 8007964:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a19      	ldr	r2, [pc, #100]	@ (80079d0 <TIM_OC5_SetConfig+0xbc>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d013      	beq.n	8007996 <TIM_OC5_SetConfig+0x82>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a18      	ldr	r2, [pc, #96]	@ (80079d4 <TIM_OC5_SetConfig+0xc0>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d00f      	beq.n	8007996 <TIM_OC5_SetConfig+0x82>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a17      	ldr	r2, [pc, #92]	@ (80079d8 <TIM_OC5_SetConfig+0xc4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d00b      	beq.n	8007996 <TIM_OC5_SetConfig+0x82>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a16      	ldr	r2, [pc, #88]	@ (80079dc <TIM_OC5_SetConfig+0xc8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d007      	beq.n	8007996 <TIM_OC5_SetConfig+0x82>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a15      	ldr	r2, [pc, #84]	@ (80079e0 <TIM_OC5_SetConfig+0xcc>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d003      	beq.n	8007996 <TIM_OC5_SetConfig+0x82>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a14      	ldr	r2, [pc, #80]	@ (80079e4 <TIM_OC5_SetConfig+0xd0>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d109      	bne.n	80079aa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800799c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	021b      	lsls	r3, r3, #8
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685a      	ldr	r2, [r3, #4]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	621a      	str	r2, [r3, #32]
}
 80079c4:	bf00      	nop
 80079c6:	371c      	adds	r7, #28
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr
 80079d0:	40012c00 	.word	0x40012c00
 80079d4:	40013400 	.word	0x40013400
 80079d8:	40014000 	.word	0x40014000
 80079dc:	40014400 	.word	0x40014400
 80079e0:	40014800 	.word	0x40014800
 80079e4:	40015000 	.word	0x40015000

080079e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b087      	sub	sp, #28
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a1b      	ldr	r3, [r3, #32]
 80079fc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	68fa      	ldr	r2, [r7, #12]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007a2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	051b      	lsls	r3, r3, #20
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a1a      	ldr	r2, [pc, #104]	@ (8007aa8 <TIM_OC6_SetConfig+0xc0>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <TIM_OC6_SetConfig+0x84>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a19      	ldr	r2, [pc, #100]	@ (8007aac <TIM_OC6_SetConfig+0xc4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d00f      	beq.n	8007a6c <TIM_OC6_SetConfig+0x84>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a18      	ldr	r2, [pc, #96]	@ (8007ab0 <TIM_OC6_SetConfig+0xc8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d00b      	beq.n	8007a6c <TIM_OC6_SetConfig+0x84>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a17      	ldr	r2, [pc, #92]	@ (8007ab4 <TIM_OC6_SetConfig+0xcc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d007      	beq.n	8007a6c <TIM_OC6_SetConfig+0x84>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a16      	ldr	r2, [pc, #88]	@ (8007ab8 <TIM_OC6_SetConfig+0xd0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d003      	beq.n	8007a6c <TIM_OC6_SetConfig+0x84>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a15      	ldr	r2, [pc, #84]	@ (8007abc <TIM_OC6_SetConfig+0xd4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d109      	bne.n	8007a80 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	029b      	lsls	r3, r3, #10
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40012c00 	.word	0x40012c00
 8007aac:	40013400 	.word	0x40013400
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40014400 	.word	0x40014400
 8007ab8:	40014800 	.word	0x40014800
 8007abc:	40015000 	.word	0x40015000

08007ac0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007adc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aee:	f023 0307 	bic.w	r3, r3, #7
 8007af2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	693a      	ldr	r2, [r7, #16]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	693a      	ldr	r2, [r7, #16]
 8007b04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	2b70      	cmp	r3, #112	@ 0x70
 8007b0c:	d01a      	beq.n	8007b44 <TIM_SlaveTimer_SetConfig+0x84>
 8007b0e:	2b70      	cmp	r3, #112	@ 0x70
 8007b10:	d860      	bhi.n	8007bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8007b12:	2b60      	cmp	r3, #96	@ 0x60
 8007b14:	d054      	beq.n	8007bc0 <TIM_SlaveTimer_SetConfig+0x100>
 8007b16:	2b60      	cmp	r3, #96	@ 0x60
 8007b18:	d85c      	bhi.n	8007bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8007b1a:	2b50      	cmp	r3, #80	@ 0x50
 8007b1c:	d046      	beq.n	8007bac <TIM_SlaveTimer_SetConfig+0xec>
 8007b1e:	2b50      	cmp	r3, #80	@ 0x50
 8007b20:	d858      	bhi.n	8007bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8007b22:	2b40      	cmp	r3, #64	@ 0x40
 8007b24:	d019      	beq.n	8007b5a <TIM_SlaveTimer_SetConfig+0x9a>
 8007b26:	2b40      	cmp	r3, #64	@ 0x40
 8007b28:	d854      	bhi.n	8007bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8007b2a:	2b30      	cmp	r3, #48	@ 0x30
 8007b2c:	d055      	beq.n	8007bda <TIM_SlaveTimer_SetConfig+0x11a>
 8007b2e:	2b30      	cmp	r3, #48	@ 0x30
 8007b30:	d850      	bhi.n	8007bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8007b32:	2b20      	cmp	r3, #32
 8007b34:	d051      	beq.n	8007bda <TIM_SlaveTimer_SetConfig+0x11a>
 8007b36:	2b20      	cmp	r3, #32
 8007b38:	d84c      	bhi.n	8007bd4 <TIM_SlaveTimer_SetConfig+0x114>
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d04d      	beq.n	8007bda <TIM_SlaveTimer_SetConfig+0x11a>
 8007b3e:	2b10      	cmp	r3, #16
 8007b40:	d04b      	beq.n	8007bda <TIM_SlaveTimer_SetConfig+0x11a>
 8007b42:	e047      	b.n	8007bd4 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007b54:	f000 f9e6 	bl	8007f24 <TIM_ETR_SetConfig>
      break;
 8007b58:	e040      	b.n	8007bdc <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b05      	cmp	r3, #5
 8007b60:	d101      	bne.n	8007b66 <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e03b      	b.n	8007bde <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6a1a      	ldr	r2, [r3, #32]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f022 0201 	bic.w	r2, r2, #1
 8007b7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	699b      	ldr	r3, [r3, #24]
 8007b84:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b8c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	011b      	lsls	r3, r3, #4
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	621a      	str	r2, [r3, #32]
      break;
 8007baa:	e017      	b.n	8007bdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bb8:	461a      	mov	r2, r3
 8007bba:	f000 f883 	bl	8007cc4 <TIM_TI1_ConfigInputStage>
      break;
 8007bbe:	e00d      	b.n	8007bdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f000 f8e5 	bl	8007d9c <TIM_TI2_ConfigInputStage>
      break;
 8007bd2:	e003      	b.n	8007bdc <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd8:	e000      	b.n	8007bdc <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8007bda:	bf00      	nop
  }

  return status;
 8007bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
	...

08007be8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b087      	sub	sp, #28
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	607a      	str	r2, [r7, #4]
 8007bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	f023 0201 	bic.w	r2, r3, #1
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	4a26      	ldr	r2, [pc, #152]	@ (8007cac <TIM_TI1_SetConfig+0xc4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d017      	beq.n	8007c46 <TIM_TI1_SetConfig+0x5e>
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c1c:	d013      	beq.n	8007c46 <TIM_TI1_SetConfig+0x5e>
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	4a23      	ldr	r2, [pc, #140]	@ (8007cb0 <TIM_TI1_SetConfig+0xc8>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00f      	beq.n	8007c46 <TIM_TI1_SetConfig+0x5e>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	4a22      	ldr	r2, [pc, #136]	@ (8007cb4 <TIM_TI1_SetConfig+0xcc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d00b      	beq.n	8007c46 <TIM_TI1_SetConfig+0x5e>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4a21      	ldr	r2, [pc, #132]	@ (8007cb8 <TIM_TI1_SetConfig+0xd0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d007      	beq.n	8007c46 <TIM_TI1_SetConfig+0x5e>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	4a20      	ldr	r2, [pc, #128]	@ (8007cbc <TIM_TI1_SetConfig+0xd4>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d003      	beq.n	8007c46 <TIM_TI1_SetConfig+0x5e>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4a1f      	ldr	r2, [pc, #124]	@ (8007cc0 <TIM_TI1_SetConfig+0xd8>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d101      	bne.n	8007c4a <TIM_TI1_SetConfig+0x62>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e000      	b.n	8007c4c <TIM_TI1_SetConfig+0x64>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d008      	beq.n	8007c62 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f023 0303 	bic.w	r3, r3, #3
 8007c56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	617b      	str	r3, [r7, #20]
 8007c60:	e003      	b.n	8007c6a <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f023 030a 	bic.w	r3, r3, #10
 8007c84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f003 030a 	and.w	r3, r3, #10
 8007c8c:	693a      	ldr	r2, [r7, #16]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	621a      	str	r2, [r3, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	40012c00 	.word	0x40012c00
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40013400 	.word	0x40013400
 8007cbc:	40014000 	.word	0x40014000
 8007cc0:	40015000 	.word	0x40015000

08007cc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b087      	sub	sp, #28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f023 0201 	bic.w	r2, r3, #1
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007cee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f023 030a 	bic.w	r3, r3, #10
 8007d00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	621a      	str	r2, [r3, #32]
}
 8007d16:	bf00      	nop
 8007d18:	371c      	adds	r7, #28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b087      	sub	sp, #28
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	60f8      	str	r0, [r7, #12]
 8007d2a:	60b9      	str	r1, [r7, #8]
 8007d2c:	607a      	str	r2, [r7, #4]
 8007d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6a1b      	ldr	r3, [r3, #32]
 8007d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f023 0210 	bic.w	r2, r3, #16
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	699b      	ldr	r3, [r3, #24]
 8007d46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	693a      	ldr	r2, [r7, #16]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d60:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	031b      	lsls	r3, r3, #12
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	693a      	ldr	r2, [r7, #16]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d74:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	011b      	lsls	r3, r3, #4
 8007d7a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007d7e:	697a      	ldr	r2, [r7, #20]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	621a      	str	r2, [r3, #32]
}
 8007d90:	bf00      	nop
 8007d92:	371c      	adds	r7, #28
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b087      	sub	sp, #28
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	f023 0210 	bic.w	r2, r3, #16
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	699b      	ldr	r3, [r3, #24]
 8007dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	031b      	lsls	r3, r3, #12
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	011b      	lsls	r3, r3, #4
 8007dde:	697a      	ldr	r2, [r7, #20]
 8007de0:	4313      	orrs	r3, r2
 8007de2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	621a      	str	r2, [r3, #32]
}
 8007df0:	bf00      	nop
 8007df2:	371c      	adds	r7, #28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	f023 0303 	bic.w	r3, r3, #3
 8007e28:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007e38:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	011b      	lsls	r3, r3, #4
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8007e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	021b      	lsls	r3, r3, #8
 8007e52:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8007e56:	697a      	ldr	r2, [r7, #20]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	697a      	ldr	r2, [r7, #20]
 8007e66:	621a      	str	r2, [r3, #32]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
 8007e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	69db      	ldr	r3, [r3, #28]
 8007e98:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	021b      	lsls	r3, r3, #8
 8007ea6:	693a      	ldr	r2, [r7, #16]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007eb2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	031b      	lsls	r3, r3, #12
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	693a      	ldr	r2, [r7, #16]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8007ec6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	031b      	lsls	r3, r3, #12
 8007ecc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	621a      	str	r2, [r3, #32]
}
 8007ee2:	bf00      	nop
 8007ee4:	371c      	adds	r7, #28
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007eee:	b480      	push	{r7}
 8007ef0:	b085      	sub	sp, #20
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	f043 0307 	orr.w	r3, r3, #7
 8007f10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	609a      	str	r2, [r3, #8]
}
 8007f18:	bf00      	nop
 8007f1a:	3714      	adds	r7, #20
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b087      	sub	sp, #28
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	021a      	lsls	r2, r3, #8
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	609a      	str	r2, [r3, #8]
}
 8007f58:	bf00      	nop
 8007f5a:	371c      	adds	r7, #28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b087      	sub	sp, #28
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	f003 031f 	and.w	r3, r3, #31
 8007f76:	2201      	movs	r2, #1
 8007f78:	fa02 f303 	lsl.w	r3, r2, r3
 8007f7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a1a      	ldr	r2, [r3, #32]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	43db      	mvns	r3, r3
 8007f86:	401a      	ands	r2, r3
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6a1a      	ldr	r2, [r3, #32]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	f003 031f 	and.w	r3, r3, #31
 8007f96:	6879      	ldr	r1, [r7, #4]
 8007f98:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
	...

08007fb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d101      	bne.n	8007fc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	e06d      	b.n	80080a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2202      	movs	r2, #2
 8007fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a30      	ldr	r2, [pc, #192]	@ (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d009      	beq.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d004      	beq.n	8008006 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a2d      	ldr	r2, [pc, #180]	@ (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d108      	bne.n	8008018 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800800c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800801e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a1e      	ldr	r2, [pc, #120]	@ (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d01d      	beq.n	8008078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008044:	d018      	beq.n	8008078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1c      	ldr	r2, [pc, #112]	@ (80080bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d013      	beq.n	8008078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1a      	ldr	r2, [pc, #104]	@ (80080c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d00e      	beq.n	8008078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a15      	ldr	r2, [pc, #84]	@ (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d009      	beq.n	8008078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a16      	ldr	r2, [pc, #88]	@ (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d004      	beq.n	8008078 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a11      	ldr	r2, [pc, #68]	@ (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d10c      	bne.n	8008092 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800807e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	4313      	orrs	r3, r2
 8008088:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080a2:	2300      	movs	r3, #0
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr
 80080b0:	40012c00 	.word	0x40012c00
 80080b4:	40013400 	.word	0x40013400
 80080b8:	40015000 	.word	0x40015000
 80080bc:	40000400 	.word	0x40000400
 80080c0:	40000800 	.word	0x40000800
 80080c4:	40014000 	.word	0x40014000

080080c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b083      	sub	sp, #12
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080f8:	bf00      	nop
 80080fa:	370c      	adds	r7, #12
 80080fc:	46bd      	mov	sp, r7
 80080fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008102:	4770      	bx	lr

08008104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e040      	b.n	8008198 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800811a:	2b00      	cmp	r3, #0
 800811c:	d106      	bne.n	800812c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fa fa40 	bl	80025ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2224      	movs	r2, #36	@ 0x24
 8008130:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0201 	bic.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fdda 	bl	8008d04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fc03 	bl	800895c <UART_SetConfig>
 8008156:	4603      	mov	r3, r0
 8008158:	2b01      	cmp	r3, #1
 800815a:	d101      	bne.n	8008160 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e01b      	b.n	8008198 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	685a      	ldr	r2, [r3, #4]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800816e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800817e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0201 	orr.w	r2, r2, #1
 800818e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fe59 	bl	8008e48 <UART_CheckIdleState>
 8008196:	4603      	mov	r3, r0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b08a      	sub	sp, #40	@ 0x28
 80081a4:	af02      	add	r7, sp, #8
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	4613      	mov	r3, r2
 80081ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d177      	bne.n	80082a8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <HAL_UART_Transmit+0x24>
 80081be:	88fb      	ldrh	r3, [r7, #6]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	e070      	b.n	80082aa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2221      	movs	r2, #33	@ 0x21
 80081d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081d6:	f7fa fc51 	bl	8002a7c <HAL_GetTick>
 80081da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	88fa      	ldrh	r2, [r7, #6]
 80081e0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	88fa      	ldrh	r2, [r7, #6]
 80081e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081f4:	d108      	bne.n	8008208 <HAL_UART_Transmit+0x68>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d104      	bne.n	8008208 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80081fe:	2300      	movs	r3, #0
 8008200:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	61bb      	str	r3, [r7, #24]
 8008206:	e003      	b.n	8008210 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800820c:	2300      	movs	r3, #0
 800820e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008210:	e02f      	b.n	8008272 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	9300      	str	r3, [sp, #0]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2200      	movs	r2, #0
 800821a:	2180      	movs	r1, #128	@ 0x80
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 febb 	bl	8008f98 <UART_WaitOnFlagUntilTimeout>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2220      	movs	r2, #32
 800822c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800822e:	2303      	movs	r3, #3
 8008230:	e03b      	b.n	80082aa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10b      	bne.n	8008250 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	881a      	ldrh	r2, [r3, #0]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008244:	b292      	uxth	r2, r2
 8008246:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008248:	69bb      	ldr	r3, [r7, #24]
 800824a:	3302      	adds	r3, #2
 800824c:	61bb      	str	r3, [r7, #24]
 800824e:	e007      	b.n	8008260 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008250:	69fb      	ldr	r3, [r7, #28]
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	3301      	adds	r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008266:	b29b      	uxth	r3, r3
 8008268:	3b01      	subs	r3, #1
 800826a:	b29a      	uxth	r2, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8008278:	b29b      	uxth	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1c9      	bne.n	8008212 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	9300      	str	r3, [sp, #0]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2200      	movs	r2, #0
 8008286:	2140      	movs	r1, #64	@ 0x40
 8008288:	68f8      	ldr	r0, [r7, #12]
 800828a:	f000 fe85 	bl	8008f98 <UART_WaitOnFlagUntilTimeout>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d004      	beq.n	800829e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2220      	movs	r2, #32
 8008298:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e005      	b.n	80082aa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2220      	movs	r2, #32
 80082a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e000      	b.n	80082aa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80082a8:	2302      	movs	r3, #2
  }
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3720      	adds	r7, #32
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b08a      	sub	sp, #40	@ 0x28
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	60f8      	str	r0, [r7, #12]
 80082ba:	60b9      	str	r1, [r7, #8]
 80082bc:	4613      	mov	r3, r2
 80082be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082c6:	2b20      	cmp	r3, #32
 80082c8:	d132      	bne.n	8008330 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d002      	beq.n	80082d6 <HAL_UART_Receive_DMA+0x24>
 80082d0:	88fb      	ldrh	r3, [r7, #6]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e02b      	b.n	8008332 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	2200      	movs	r2, #0
 80082de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d018      	beq.n	8008320 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	e853 3f00 	ldrex	r3, [r3]
 80082fa:	613b      	str	r3, [r7, #16]
   return(result);
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008302:	627b      	str	r3, [r7, #36]	@ 0x24
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	461a      	mov	r2, r3
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	623b      	str	r3, [r7, #32]
 800830e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008310:	69f9      	ldr	r1, [r7, #28]
 8008312:	6a3a      	ldr	r2, [r7, #32]
 8008314:	e841 2300 	strex	r3, r2, [r1]
 8008318:	61bb      	str	r3, [r7, #24]
   return(result);
 800831a:	69bb      	ldr	r3, [r7, #24]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d1e6      	bne.n	80082ee <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008320:	88fb      	ldrh	r3, [r7, #6]
 8008322:	461a      	mov	r2, r3
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fea4 	bl	8009074 <UART_Start_Receive_DMA>
 800832c:	4603      	mov	r3, r0
 800832e:	e000      	b.n	8008332 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8008330:	2302      	movs	r3, #2
  }
}
 8008332:	4618      	mov	r0, r3
 8008334:	3728      	adds	r7, #40	@ 0x28
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b0ba      	sub	sp, #232	@ 0xe8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008362:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008366:	f640 030f 	movw	r3, #2063	@ 0x80f
 800836a:	4013      	ands	r3, r2
 800836c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008370:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d115      	bne.n	80083a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00f      	beq.n	80083a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b00      	cmp	r3, #0
 800838e:	d009      	beq.n	80083a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 82ab 	beq.w	80088f0 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	4798      	blx	r3
      }
      return;
 80083a2:	e2a5      	b.n	80088f0 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8117 	beq.w	80085dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80083ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083b2:	f003 0301 	and.w	r3, r3, #1
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d106      	bne.n	80083c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80083ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80083be:	4b85      	ldr	r3, [pc, #532]	@ (80085d4 <HAL_UART_IRQHandler+0x298>)
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	f000 810a 	beq.w	80085dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80083c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d011      	beq.n	80083f8 <HAL_UART_IRQHandler+0xbc>
 80083d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00b      	beq.n	80083f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2201      	movs	r2, #1
 80083e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083ee:	f043 0201 	orr.w	r2, r3, #1
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80083f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083fc:	f003 0302 	and.w	r3, r3, #2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d011      	beq.n	8008428 <HAL_UART_IRQHandler+0xec>
 8008404:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008408:	f003 0301 	and.w	r3, r3, #1
 800840c:	2b00      	cmp	r3, #0
 800840e:	d00b      	beq.n	8008428 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2202      	movs	r2, #2
 8008416:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800841e:	f043 0204 	orr.w	r2, r3, #4
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b00      	cmp	r3, #0
 8008432:	d011      	beq.n	8008458 <HAL_UART_IRQHandler+0x11c>
 8008434:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008438:	f003 0301 	and.w	r3, r3, #1
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	2204      	movs	r2, #4
 8008446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800844e:	f043 0202 	orr.w	r2, r3, #2
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d017      	beq.n	8008494 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008468:	f003 0320 	and.w	r3, r3, #32
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008474:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00b      	beq.n	8008494 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	2208      	movs	r2, #8
 8008482:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800848a:	f043 0208 	orr.w	r2, r3, #8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008498:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800849c:	2b00      	cmp	r3, #0
 800849e:	d012      	beq.n	80084c6 <HAL_UART_IRQHandler+0x18a>
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00c      	beq.n	80084c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80084b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084bc:	f043 0220 	orr.w	r2, r3, #32
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	f000 8211 	beq.w	80088f4 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084d6:	f003 0320 	and.w	r3, r3, #32
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00d      	beq.n	80084fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80084de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084e2:	f003 0320 	and.w	r3, r3, #32
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d007      	beq.n	80084fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d003      	beq.n	80084fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008500:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689b      	ldr	r3, [r3, #8]
 800850a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800850e:	2b40      	cmp	r3, #64	@ 0x40
 8008510:	d005      	beq.n	800851e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008516:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800851a:	2b00      	cmp	r3, #0
 800851c:	d04f      	beq.n	80085be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f000 fe6e 	bl	8009200 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800852e:	2b40      	cmp	r3, #64	@ 0x40
 8008530:	d141      	bne.n	80085b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	3308      	adds	r3, #8
 8008538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800854c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3308      	adds	r3, #8
 800855a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800855e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800856a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800856e:	e841 2300 	strex	r3, r2, [r1]
 8008572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1d9      	bne.n	8008532 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008582:	2b00      	cmp	r3, #0
 8008584:	d013      	beq.n	80085ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800858a:	4a13      	ldr	r2, [pc, #76]	@ (80085d8 <HAL_UART_IRQHandler+0x29c>)
 800858c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008592:	4618      	mov	r0, r3
 8008594:	f7fc f836 	bl	8004604 <HAL_DMA_Abort_IT>
 8008598:	4603      	mov	r3, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	d017      	beq.n	80085ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80085a8:	4610      	mov	r0, r2
 80085aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ac:	e00f      	b.n	80085ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9be 	bl	8008930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b4:	e00b      	b.n	80085ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f9ba 	bl	8008930 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085bc:	e007      	b.n	80085ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f9b6 	bl	8008930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80085cc:	e192      	b.n	80088f4 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ce:	bf00      	nop
    return;
 80085d0:	e190      	b.n	80088f4 <HAL_UART_IRQHandler+0x5b8>
 80085d2:	bf00      	nop
 80085d4:	04000120 	.word	0x04000120
 80085d8:	080094ab 	.word	0x080094ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	f040 814b 	bne.w	800887c <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80085e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8144 	beq.w	800887c <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80085f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 813d 	beq.w	800887c <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2210      	movs	r2, #16
 8008608:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008614:	2b40      	cmp	r3, #64	@ 0x40
 8008616:	f040 80b5 	bne.w	8008784 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008626:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800862a:	2b00      	cmp	r3, #0
 800862c:	f000 8164 	beq.w	80088f8 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800863a:	429a      	cmp	r2, r3
 800863c:	f080 815c 	bcs.w	80088f8 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008646:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	2b20      	cmp	r3, #32
 8008652:	f000 8086 	beq.w	8008762 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800866a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800866e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008672:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008680:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008684:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008688:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800868c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008690:	e841 2300 	strex	r3, r2, [r1]
 8008694:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008698:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800869c:	2b00      	cmp	r3, #0
 800869e:	d1da      	bne.n	8008656 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	3308      	adds	r3, #8
 80086a6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80086aa:	e853 3f00 	ldrex	r3, [r3]
 80086ae:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80086b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80086b2:	f023 0301 	bic.w	r3, r3, #1
 80086b6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3308      	adds	r3, #8
 80086c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80086c4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80086c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80086cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80086d0:	e841 2300 	strex	r3, r2, [r1]
 80086d4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80086d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d1e1      	bne.n	80086a0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	3308      	adds	r3, #8
 80086e2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80086e6:	e853 3f00 	ldrex	r3, [r3]
 80086ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80086ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80086ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	3308      	adds	r3, #8
 80086fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008700:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008702:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008706:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800870e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e3      	bne.n	80086dc <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008728:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800872a:	e853 3f00 	ldrex	r3, [r3]
 800872e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008730:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008732:	f023 0310 	bic.w	r3, r3, #16
 8008736:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	461a      	mov	r2, r3
 8008740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008744:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008746:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800874a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008752:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e4      	bne.n	8008722 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800875c:	4618      	mov	r0, r3
 800875e:	f7fb ff13 	bl	8004588 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2202      	movs	r2, #2
 8008766:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008774:	b29b      	uxth	r3, r3
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	b29b      	uxth	r3, r3
 800877a:	4619      	mov	r1, r3
 800877c:	6878      	ldr	r0, [r7, #4]
 800877e:	f000 f8e1 	bl	8008944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008782:	e0b9      	b.n	80088f8 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008790:	b29b      	uxth	r3, r3
 8008792:	1ad3      	subs	r3, r2, r3
 8008794:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800879e:	b29b      	uxth	r3, r3
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 80ab 	beq.w	80088fc <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80087a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f000 80a6 	beq.w	80088fc <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80087be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80087d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80087d4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80087d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80087da:	e841 2300 	strex	r3, r2, [r1]
 80087de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80087e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1e4      	bne.n	80087b0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	3308      	adds	r3, #8
 80087ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f0:	e853 3f00 	ldrex	r3, [r3]
 80087f4:	623b      	str	r3, [r7, #32]
   return(result);
 80087f6:	6a3b      	ldr	r3, [r7, #32]
 80087f8:	f023 0301 	bic.w	r3, r3, #1
 80087fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3308      	adds	r3, #8
 8008806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800880a:	633a      	str	r2, [r7, #48]	@ 0x30
 800880c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008812:	e841 2300 	strex	r3, r2, [r1]
 8008816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1e3      	bne.n	80087e6 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2220      	movs	r2, #32
 8008822:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f023 0310 	bic.w	r3, r3, #16
 8008846:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	461a      	mov	r2, r3
 8008850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008854:	61fb      	str	r3, [r7, #28]
 8008856:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	69b9      	ldr	r1, [r7, #24]
 800885a:	69fa      	ldr	r2, [r7, #28]
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	617b      	str	r3, [r7, #20]
   return(result);
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e4      	bne.n	8008832 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800886e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008872:	4619      	mov	r1, r3
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f865 	bl	8008944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800887a:	e03f      	b.n	80088fc <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800887c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008880:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00e      	beq.n	80088a6 <HAL_UART_IRQHandler+0x56a>
 8008888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800888c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800889c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fe43 	bl	800952a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088a4:	e02d      	b.n	8008902 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80088a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00e      	beq.n	80088d0 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80088b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d008      	beq.n	80088d0 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d01c      	beq.n	8008900 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4798      	blx	r3
    }
    return;
 80088ce:	e017      	b.n	8008900 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80088d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d012      	beq.n	8008902 <HAL_UART_IRQHandler+0x5c6>
 80088dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80088e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d00c      	beq.n	8008902 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 fdf4 	bl	80094d6 <UART_EndTransmit_IT>
    return;
 80088ee:	e008      	b.n	8008902 <HAL_UART_IRQHandler+0x5c6>
      return;
 80088f0:	bf00      	nop
 80088f2:	e006      	b.n	8008902 <HAL_UART_IRQHandler+0x5c6>
    return;
 80088f4:	bf00      	nop
 80088f6:	e004      	b.n	8008902 <HAL_UART_IRQHandler+0x5c6>
      return;
 80088f8:	bf00      	nop
 80088fa:	e002      	b.n	8008902 <HAL_UART_IRQHandler+0x5c6>
      return;
 80088fc:	bf00      	nop
 80088fe:	e000      	b.n	8008902 <HAL_UART_IRQHandler+0x5c6>
    return;
 8008900:	bf00      	nop
  }

}
 8008902:	37e8      	adds	r7, #232	@ 0xe8
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008924:	bf00      	nop
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr

08008930 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008930:	b480      	push	{r7}
 8008932:	b083      	sub	sp, #12
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b088      	sub	sp, #32
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689a      	ldr	r2, [r3, #8]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	691b      	ldr	r3, [r3, #16]
 8008970:	431a      	orrs	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	431a      	orrs	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	69db      	ldr	r3, [r3, #28]
 800897c:	4313      	orrs	r3, r2
 800897e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	4b92      	ldr	r3, [pc, #584]	@ (8008bd0 <UART_SetConfig+0x274>)
 8008988:	4013      	ands	r3, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6812      	ldr	r2, [r2, #0]
 800898e:	6979      	ldr	r1, [r7, #20]
 8008990:	430b      	orrs	r3, r1
 8008992:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	68da      	ldr	r2, [r3, #12]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	430a      	orrs	r2, r1
 80089a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a1b      	ldr	r3, [r3, #32]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a80      	ldr	r2, [pc, #512]	@ (8008bd4 <UART_SetConfig+0x278>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d120      	bne.n	8008a1a <UART_SetConfig+0xbe>
 80089d8:	4b7f      	ldr	r3, [pc, #508]	@ (8008bd8 <UART_SetConfig+0x27c>)
 80089da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089dc:	f003 0303 	and.w	r3, r3, #3
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d817      	bhi.n	8008a14 <UART_SetConfig+0xb8>
 80089e4:	a201      	add	r2, pc, #4	@ (adr r2, 80089ec <UART_SetConfig+0x90>)
 80089e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ea:	bf00      	nop
 80089ec:	080089fd 	.word	0x080089fd
 80089f0:	08008a09 	.word	0x08008a09
 80089f4:	08008a0f 	.word	0x08008a0f
 80089f8:	08008a03 	.word	0x08008a03
 80089fc:	2301      	movs	r3, #1
 80089fe:	77fb      	strb	r3, [r7, #31]
 8008a00:	e0b5      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a02:	2302      	movs	r3, #2
 8008a04:	77fb      	strb	r3, [r7, #31]
 8008a06:	e0b2      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a08:	2304      	movs	r3, #4
 8008a0a:	77fb      	strb	r3, [r7, #31]
 8008a0c:	e0af      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a0e:	2308      	movs	r3, #8
 8008a10:	77fb      	strb	r3, [r7, #31]
 8008a12:	e0ac      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a14:	2310      	movs	r3, #16
 8008a16:	77fb      	strb	r3, [r7, #31]
 8008a18:	e0a9      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a6f      	ldr	r2, [pc, #444]	@ (8008bdc <UART_SetConfig+0x280>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d124      	bne.n	8008a6e <UART_SetConfig+0x112>
 8008a24:	4b6c      	ldr	r3, [pc, #432]	@ (8008bd8 <UART_SetConfig+0x27c>)
 8008a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008a2c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a30:	d011      	beq.n	8008a56 <UART_SetConfig+0xfa>
 8008a32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a36:	d817      	bhi.n	8008a68 <UART_SetConfig+0x10c>
 8008a38:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a3c:	d011      	beq.n	8008a62 <UART_SetConfig+0x106>
 8008a3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a42:	d811      	bhi.n	8008a68 <UART_SetConfig+0x10c>
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <UART_SetConfig+0xf4>
 8008a48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a4c:	d006      	beq.n	8008a5c <UART_SetConfig+0x100>
 8008a4e:	e00b      	b.n	8008a68 <UART_SetConfig+0x10c>
 8008a50:	2300      	movs	r3, #0
 8008a52:	77fb      	strb	r3, [r7, #31]
 8008a54:	e08b      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a56:	2302      	movs	r3, #2
 8008a58:	77fb      	strb	r3, [r7, #31]
 8008a5a:	e088      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	77fb      	strb	r3, [r7, #31]
 8008a60:	e085      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a62:	2308      	movs	r3, #8
 8008a64:	77fb      	strb	r3, [r7, #31]
 8008a66:	e082      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a68:	2310      	movs	r3, #16
 8008a6a:	77fb      	strb	r3, [r7, #31]
 8008a6c:	e07f      	b.n	8008b6e <UART_SetConfig+0x212>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a5b      	ldr	r2, [pc, #364]	@ (8008be0 <UART_SetConfig+0x284>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d124      	bne.n	8008ac2 <UART_SetConfig+0x166>
 8008a78:	4b57      	ldr	r3, [pc, #348]	@ (8008bd8 <UART_SetConfig+0x27c>)
 8008a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a7c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008a80:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008a84:	d011      	beq.n	8008aaa <UART_SetConfig+0x14e>
 8008a86:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8008a8a:	d817      	bhi.n	8008abc <UART_SetConfig+0x160>
 8008a8c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a90:	d011      	beq.n	8008ab6 <UART_SetConfig+0x15a>
 8008a92:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8008a96:	d811      	bhi.n	8008abc <UART_SetConfig+0x160>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <UART_SetConfig+0x148>
 8008a9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008aa0:	d006      	beq.n	8008ab0 <UART_SetConfig+0x154>
 8008aa2:	e00b      	b.n	8008abc <UART_SetConfig+0x160>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	77fb      	strb	r3, [r7, #31]
 8008aa8:	e061      	b.n	8008b6e <UART_SetConfig+0x212>
 8008aaa:	2302      	movs	r3, #2
 8008aac:	77fb      	strb	r3, [r7, #31]
 8008aae:	e05e      	b.n	8008b6e <UART_SetConfig+0x212>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	77fb      	strb	r3, [r7, #31]
 8008ab4:	e05b      	b.n	8008b6e <UART_SetConfig+0x212>
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	77fb      	strb	r3, [r7, #31]
 8008aba:	e058      	b.n	8008b6e <UART_SetConfig+0x212>
 8008abc:	2310      	movs	r3, #16
 8008abe:	77fb      	strb	r3, [r7, #31]
 8008ac0:	e055      	b.n	8008b6e <UART_SetConfig+0x212>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a47      	ldr	r2, [pc, #284]	@ (8008be4 <UART_SetConfig+0x288>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d124      	bne.n	8008b16 <UART_SetConfig+0x1ba>
 8008acc:	4b42      	ldr	r3, [pc, #264]	@ (8008bd8 <UART_SetConfig+0x27c>)
 8008ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ad0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8008ad4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ad8:	d011      	beq.n	8008afe <UART_SetConfig+0x1a2>
 8008ada:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ade:	d817      	bhi.n	8008b10 <UART_SetConfig+0x1b4>
 8008ae0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ae4:	d011      	beq.n	8008b0a <UART_SetConfig+0x1ae>
 8008ae6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008aea:	d811      	bhi.n	8008b10 <UART_SetConfig+0x1b4>
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d003      	beq.n	8008af8 <UART_SetConfig+0x19c>
 8008af0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008af4:	d006      	beq.n	8008b04 <UART_SetConfig+0x1a8>
 8008af6:	e00b      	b.n	8008b10 <UART_SetConfig+0x1b4>
 8008af8:	2300      	movs	r3, #0
 8008afa:	77fb      	strb	r3, [r7, #31]
 8008afc:	e037      	b.n	8008b6e <UART_SetConfig+0x212>
 8008afe:	2302      	movs	r3, #2
 8008b00:	77fb      	strb	r3, [r7, #31]
 8008b02:	e034      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b04:	2304      	movs	r3, #4
 8008b06:	77fb      	strb	r3, [r7, #31]
 8008b08:	e031      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b0a:	2308      	movs	r3, #8
 8008b0c:	77fb      	strb	r3, [r7, #31]
 8008b0e:	e02e      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b10:	2310      	movs	r3, #16
 8008b12:	77fb      	strb	r3, [r7, #31]
 8008b14:	e02b      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a33      	ldr	r2, [pc, #204]	@ (8008be8 <UART_SetConfig+0x28c>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d124      	bne.n	8008b6a <UART_SetConfig+0x20e>
 8008b20:	4b2d      	ldr	r3, [pc, #180]	@ (8008bd8 <UART_SetConfig+0x27c>)
 8008b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b24:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8008b28:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008b2c:	d011      	beq.n	8008b52 <UART_SetConfig+0x1f6>
 8008b2e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008b32:	d817      	bhi.n	8008b64 <UART_SetConfig+0x208>
 8008b34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b38:	d011      	beq.n	8008b5e <UART_SetConfig+0x202>
 8008b3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b3e:	d811      	bhi.n	8008b64 <UART_SetConfig+0x208>
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <UART_SetConfig+0x1f0>
 8008b44:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b48:	d006      	beq.n	8008b58 <UART_SetConfig+0x1fc>
 8008b4a:	e00b      	b.n	8008b64 <UART_SetConfig+0x208>
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	77fb      	strb	r3, [r7, #31]
 8008b50:	e00d      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b52:	2302      	movs	r3, #2
 8008b54:	77fb      	strb	r3, [r7, #31]
 8008b56:	e00a      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	77fb      	strb	r3, [r7, #31]
 8008b5c:	e007      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b5e:	2308      	movs	r3, #8
 8008b60:	77fb      	strb	r3, [r7, #31]
 8008b62:	e004      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b64:	2310      	movs	r3, #16
 8008b66:	77fb      	strb	r3, [r7, #31]
 8008b68:	e001      	b.n	8008b6e <UART_SetConfig+0x212>
 8008b6a:	2310      	movs	r3, #16
 8008b6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	69db      	ldr	r3, [r3, #28]
 8008b72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b76:	d16b      	bne.n	8008c50 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008b78:	7ffb      	ldrb	r3, [r7, #31]
 8008b7a:	2b08      	cmp	r3, #8
 8008b7c:	d838      	bhi.n	8008bf0 <UART_SetConfig+0x294>
 8008b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b84 <UART_SetConfig+0x228>)
 8008b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b84:	08008ba9 	.word	0x08008ba9
 8008b88:	08008bb1 	.word	0x08008bb1
 8008b8c:	08008bb9 	.word	0x08008bb9
 8008b90:	08008bf1 	.word	0x08008bf1
 8008b94:	08008bbf 	.word	0x08008bbf
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008bf1 	.word	0x08008bf1
 8008ba0:	08008bf1 	.word	0x08008bf1
 8008ba4:	08008bc7 	.word	0x08008bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ba8:	f7fd fa6a 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 8008bac:	61b8      	str	r0, [r7, #24]
        break;
 8008bae:	e024      	b.n	8008bfa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb0:	f7fd fa88 	bl	80060c4 <HAL_RCC_GetPCLK2Freq>
 8008bb4:	61b8      	str	r0, [r7, #24]
        break;
 8008bb6:	e020      	b.n	8008bfa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8008bec <UART_SetConfig+0x290>)
 8008bba:	61bb      	str	r3, [r7, #24]
        break;
 8008bbc:	e01d      	b.n	8008bfa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008bbe:	f7fd f9ff 	bl	8005fc0 <HAL_RCC_GetSysClockFreq>
 8008bc2:	61b8      	str	r0, [r7, #24]
        break;
 8008bc4:	e019      	b.n	8008bfa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008bc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008bca:	61bb      	str	r3, [r7, #24]
        break;
 8008bcc:	e015      	b.n	8008bfa <UART_SetConfig+0x29e>
 8008bce:	bf00      	nop
 8008bd0:	efff69f3 	.word	0xefff69f3
 8008bd4:	40013800 	.word	0x40013800
 8008bd8:	40021000 	.word	0x40021000
 8008bdc:	40004400 	.word	0x40004400
 8008be0:	40004800 	.word	0x40004800
 8008be4:	40004c00 	.word	0x40004c00
 8008be8:	40005000 	.word	0x40005000
 8008bec:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	77bb      	strb	r3, [r7, #30]
        break;
 8008bf8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d073      	beq.n	8008ce8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008c00:	69bb      	ldr	r3, [r7, #24]
 8008c02:	005a      	lsls	r2, r3, #1
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	085b      	lsrs	r3, r3, #1
 8008c0a:	441a      	add	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b0f      	cmp	r3, #15
 8008c1a:	d916      	bls.n	8008c4a <UART_SetConfig+0x2ee>
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c22:	d212      	bcs.n	8008c4a <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f023 030f 	bic.w	r3, r3, #15
 8008c2c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	085b      	lsrs	r3, r3, #1
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	f003 0307 	and.w	r3, r3, #7
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	89fb      	ldrh	r3, [r7, #14]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	89fa      	ldrh	r2, [r7, #14]
 8008c46:	60da      	str	r2, [r3, #12]
 8008c48:	e04e      	b.n	8008ce8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	77bb      	strb	r3, [r7, #30]
 8008c4e:	e04b      	b.n	8008ce8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008c50:	7ffb      	ldrb	r3, [r7, #31]
 8008c52:	2b08      	cmp	r3, #8
 8008c54:	d827      	bhi.n	8008ca6 <UART_SetConfig+0x34a>
 8008c56:	a201      	add	r2, pc, #4	@ (adr r2, 8008c5c <UART_SetConfig+0x300>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c81 	.word	0x08008c81
 8008c60:	08008c89 	.word	0x08008c89
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	08008ca7 	.word	0x08008ca7
 8008c6c:	08008c97 	.word	0x08008c97
 8008c70:	08008ca7 	.word	0x08008ca7
 8008c74:	08008ca7 	.word	0x08008ca7
 8008c78:	08008ca7 	.word	0x08008ca7
 8008c7c:	08008c9f 	.word	0x08008c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c80:	f7fd f9fe 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 8008c84:	61b8      	str	r0, [r7, #24]
        break;
 8008c86:	e013      	b.n	8008cb0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c88:	f7fd fa1c 	bl	80060c4 <HAL_RCC_GetPCLK2Freq>
 8008c8c:	61b8      	str	r0, [r7, #24]
        break;
 8008c8e:	e00f      	b.n	8008cb0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c90:	4b1b      	ldr	r3, [pc, #108]	@ (8008d00 <UART_SetConfig+0x3a4>)
 8008c92:	61bb      	str	r3, [r7, #24]
        break;
 8008c94:	e00c      	b.n	8008cb0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c96:	f7fd f993 	bl	8005fc0 <HAL_RCC_GetSysClockFreq>
 8008c9a:	61b8      	str	r0, [r7, #24]
        break;
 8008c9c:	e008      	b.n	8008cb0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c9e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ca2:	61bb      	str	r3, [r7, #24]
        break;
 8008ca4:	e004      	b.n	8008cb0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	77bb      	strb	r3, [r7, #30]
        break;
 8008cae:	bf00      	nop
    }

    if (pclk != 0U)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d018      	beq.n	8008ce8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	085a      	lsrs	r2, r3, #1
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	441a      	add	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	2b0f      	cmp	r3, #15
 8008cce:	d909      	bls.n	8008ce4 <UART_SetConfig+0x388>
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008cd6:	d205      	bcs.n	8008ce4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	b29a      	uxth	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	60da      	str	r2, [r3, #12]
 8008ce2:	e001      	b.n	8008ce8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2200      	movs	r2, #0
 8008cec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8008cf4:	7fbb      	ldrb	r3, [r7, #30]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3720      	adds	r7, #32
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	007a1200 	.word	0x007a1200

08008d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d10:	f003 0308 	and.w	r3, r3, #8
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00a      	beq.n	8008d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	430a      	orrs	r2, r1
 8008d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00a      	beq.n	8008d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	430a      	orrs	r2, r1
 8008d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00a      	beq.n	8008d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00a      	beq.n	8008d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	430a      	orrs	r2, r1
 8008d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d98:	f003 0310 	and.w	r3, r3, #16
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d00a      	beq.n	8008db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dba:	f003 0320 	and.w	r3, r3, #32
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01a      	beq.n	8008e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008e02:	d10a      	bne.n	8008e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	430a      	orrs	r2, r1
 8008e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	605a      	str	r2, [r3, #4]
  }
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b098      	sub	sp, #96	@ 0x60
 8008e4c:	af02      	add	r7, sp, #8
 8008e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e58:	f7f9 fe10 	bl	8002a7c <HAL_GetTick>
 8008e5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f003 0308 	and.w	r3, r3, #8
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d12e      	bne.n	8008eca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008e70:	9300      	str	r3, [sp, #0]
 8008e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e74:	2200      	movs	r2, #0
 8008e76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f88c 	bl	8008f98 <UART_WaitOnFlagUntilTimeout>
 8008e80:	4603      	mov	r3, r0
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d021      	beq.n	8008eca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8e:	e853 3f00 	ldrex	r3, [r3]
 8008e92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ea4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ea6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008eac:	e841 2300 	strex	r3, r2, [r1]
 8008eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008eb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e6      	bne.n	8008e86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ec6:	2303      	movs	r3, #3
 8008ec8:	e062      	b.n	8008f90 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	d149      	bne.n	8008f6c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ed8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f856 	bl	8008f98 <UART_WaitOnFlagUntilTimeout>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d03c      	beq.n	8008f6c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	623b      	str	r3, [r7, #32]
   return(result);
 8008f00:	6a3b      	ldr	r3, [r7, #32]
 8008f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f10:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e6      	bne.n	8008ef2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3308      	adds	r3, #8
 8008f2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	e853 3f00 	ldrex	r3, [r3]
 8008f32:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3308      	adds	r3, #8
 8008f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f44:	61fa      	str	r2, [r7, #28]
 8008f46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f48:	69b9      	ldr	r1, [r7, #24]
 8008f4a:	69fa      	ldr	r2, [r7, #28]
 8008f4c:	e841 2300 	strex	r3, r2, [r1]
 8008f50:	617b      	str	r3, [r7, #20]
   return(result);
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1e5      	bne.n	8008f24 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2220      	movs	r2, #32
 8008f5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e011      	b.n	8008f90 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2220      	movs	r2, #32
 8008f70:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8008f8e:	2300      	movs	r3, #0
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3758      	adds	r7, #88	@ 0x58
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	603b      	str	r3, [r7, #0]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fa8:	e04f      	b.n	800904a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb0:	d04b      	beq.n	800904a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fb2:	f7f9 fd63 	bl	8002a7c <HAL_GetTick>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	1ad3      	subs	r3, r2, r3
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d302      	bcc.n	8008fc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d101      	bne.n	8008fcc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fc8:	2303      	movs	r3, #3
 8008fca:	e04e      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0304 	and.w	r3, r3, #4
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d037      	beq.n	800904a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b80      	cmp	r3, #128	@ 0x80
 8008fde:	d034      	beq.n	800904a <UART_WaitOnFlagUntilTimeout+0xb2>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	2b40      	cmp	r3, #64	@ 0x40
 8008fe4:	d031      	beq.n	800904a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d110      	bne.n	8009016 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 f8ff 	bl	8009200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2208      	movs	r2, #8
 8009006:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8009012:	2301      	movs	r3, #1
 8009014:	e029      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009020:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009024:	d111      	bne.n	800904a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800902e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 f8e5 	bl	8009200 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2220      	movs	r2, #32
 800903a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8009046:	2303      	movs	r3, #3
 8009048:	e00f      	b.n	800906a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	69da      	ldr	r2, [r3, #28]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	4013      	ands	r3, r2
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	429a      	cmp	r2, r3
 8009058:	bf0c      	ite	eq
 800905a:	2301      	moveq	r3, #1
 800905c:	2300      	movne	r3, #0
 800905e:	b2db      	uxtb	r3, r3
 8009060:	461a      	mov	r2, r3
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	429a      	cmp	r2, r3
 8009066:	d0a0      	beq.n	8008faa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b096      	sub	sp, #88	@ 0x58
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	4613      	mov	r3, r2
 8009080:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	88fa      	ldrh	r2, [r7, #6]
 800908c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2222      	movs	r2, #34	@ 0x22
 800909c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d028      	beq.n	80090fa <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090ac:	4a3e      	ldr	r2, [pc, #248]	@ (80091a8 <UART_Start_Receive_DMA+0x134>)
 80090ae:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b4:	4a3d      	ldr	r2, [pc, #244]	@ (80091ac <UART_Start_Receive_DMA+0x138>)
 80090b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090bc:	4a3c      	ldr	r2, [pc, #240]	@ (80091b0 <UART_Start_Receive_DMA+0x13c>)
 80090be:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c4:	2200      	movs	r2, #0
 80090c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3324      	adds	r3, #36	@ 0x24
 80090d2:	4619      	mov	r1, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d8:	461a      	mov	r2, r3
 80090da:	88fb      	ldrh	r3, [r7, #6]
 80090dc:	f7fb f9f5 	bl	80044ca <HAL_DMA_Start_IT>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d009      	beq.n	80090fa <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2210      	movs	r2, #16
 80090ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2220      	movs	r2, #32
 80090f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e051      	b.n	800919e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d018      	beq.n	8009134 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800910a:	e853 3f00 	ldrex	r3, [r3]
 800910e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009112:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009116:	657b      	str	r3, [r7, #84]	@ 0x54
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009120:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009122:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009124:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009128:	e841 2300 	strex	r3, r2, [r1]
 800912c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800912e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d1e6      	bne.n	8009102 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3308      	adds	r3, #8
 800913a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	e853 3f00 	ldrex	r3, [r3]
 8009142:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009146:	f043 0301 	orr.w	r3, r3, #1
 800914a:	653b      	str	r3, [r7, #80]	@ 0x50
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3308      	adds	r3, #8
 8009152:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009154:	637a      	str	r2, [r7, #52]	@ 0x34
 8009156:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009158:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800915a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800915c:	e841 2300 	strex	r3, r2, [r1]
 8009160:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1e5      	bne.n	8009134 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3308      	adds	r3, #8
 800916e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	e853 3f00 	ldrex	r3, [r3]
 8009176:	613b      	str	r3, [r7, #16]
   return(result);
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800917e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	3308      	adds	r3, #8
 8009186:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009188:	623a      	str	r2, [r7, #32]
 800918a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	69f9      	ldr	r1, [r7, #28]
 800918e:	6a3a      	ldr	r2, [r7, #32]
 8009190:	e841 2300 	strex	r3, r2, [r1]
 8009194:	61bb      	str	r3, [r7, #24]
   return(result);
 8009196:	69bb      	ldr	r3, [r7, #24]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1e5      	bne.n	8009168 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3758      	adds	r7, #88	@ 0x58
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	080092c9 	.word	0x080092c9
 80091ac:	080093ef 	.word	0x080093ef
 80091b0:	0800942d 	.word	0x0800942d

080091b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b089      	sub	sp, #36	@ 0x24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	461a      	mov	r2, r3
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	61bb      	str	r3, [r7, #24]
 80091dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6979      	ldr	r1, [r7, #20]
 80091e0:	69ba      	ldr	r2, [r7, #24]
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	613b      	str	r3, [r7, #16]
   return(result);
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e6      	bne.n	80091bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80091f4:	bf00      	nop
 80091f6:	3724      	adds	r7, #36	@ 0x24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b095      	sub	sp, #84	@ 0x54
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800921c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009226:	643b      	str	r3, [r7, #64]	@ 0x40
 8009228:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800922c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e6      	bne.n	8009208 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009242:	6a3b      	ldr	r3, [r7, #32]
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	61fb      	str	r3, [r7, #28]
   return(result);
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3308      	adds	r3, #8
 8009258:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800925a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800925c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009260:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009262:	e841 2300 	strex	r3, r2, [r1]
 8009266:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d1e5      	bne.n	800923a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009272:	2b01      	cmp	r3, #1
 8009274:	d118      	bne.n	80092a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	60bb      	str	r3, [r7, #8]
   return(result);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f023 0310 	bic.w	r3, r3, #16
 800928a:	647b      	str	r3, [r7, #68]	@ 0x44
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6979      	ldr	r1, [r7, #20]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	613b      	str	r3, [r7, #16]
   return(result);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e6      	bne.n	8009276 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2220      	movs	r2, #32
 80092ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2200      	movs	r2, #0
 80092ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80092bc:	bf00      	nop
 80092be:	3754      	adds	r7, #84	@ 0x54
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b09c      	sub	sp, #112	@ 0x70
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	2b20      	cmp	r3, #32
 80092dc:	d071      	beq.n	80093c2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80092de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092e0:	2200      	movs	r2, #0
 80092e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092ee:	e853 3f00 	ldrex	r3, [r3]
 80092f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80092f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80092fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80092fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009306:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009308:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800930a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800930c:	e841 2300 	strex	r3, r2, [r1]
 8009310:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1e6      	bne.n	80092e6 <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3308      	adds	r3, #8
 800931e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800932a:	f023 0301 	bic.w	r3, r3, #1
 800932e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	3308      	adds	r3, #8
 8009336:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009338:	647a      	str	r2, [r7, #68]	@ 0x44
 800933a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800933e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009340:	e841 2300 	strex	r3, r2, [r1]
 8009344:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1e5      	bne.n	8009318 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800934c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	623b      	str	r3, [r7, #32]
   return(result);
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009362:	663b      	str	r3, [r7, #96]	@ 0x60
 8009364:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800936c:	633a      	str	r2, [r7, #48]	@ 0x30
 800936e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009372:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800937a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e5      	bne.n	800934c <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009382:	2220      	movs	r2, #32
 8009384:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009388:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800938a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800938c:	2b01      	cmp	r3, #1
 800938e:	d118      	bne.n	80093c2 <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	e853 3f00 	ldrex	r3, [r3]
 800939c:	60fb      	str	r3, [r7, #12]
   return(result);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f023 0310 	bic.w	r3, r3, #16
 80093a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	461a      	mov	r2, r3
 80093ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093ae:	61fb      	str	r3, [r7, #28]
 80093b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b2:	69b9      	ldr	r1, [r7, #24]
 80093b4:	69fa      	ldr	r2, [r7, #28]
 80093b6:	e841 2300 	strex	r3, r2, [r1]
 80093ba:	617b      	str	r3, [r7, #20]
   return(result);
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1e6      	bne.n	8009390 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093c4:	2200      	movs	r2, #0
 80093c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d107      	bne.n	80093e0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80093d6:	4619      	mov	r1, r3
 80093d8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80093da:	f7ff fab3 	bl	8008944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093de:	e002      	b.n	80093e6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80093e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80093e2:	f7f7 fdad 	bl	8000f40 <HAL_UART_RxCpltCallback>
}
 80093e6:	bf00      	nop
 80093e8:	3770      	adds	r7, #112	@ 0x70
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}

080093ee <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093ee:	b580      	push	{r7, lr}
 80093f0:	b084      	sub	sp, #16
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2201      	movs	r2, #1
 8009400:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009406:	2b01      	cmp	r3, #1
 8009408:	d109      	bne.n	800941e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8009410:	085b      	lsrs	r3, r3, #1
 8009412:	b29b      	uxth	r3, r3
 8009414:	4619      	mov	r1, r3
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f7ff fa94 	bl	8008944 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800941c:	e002      	b.n	8009424 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f7ff fa7c 	bl	800891c <HAL_UART_RxHalfCpltCallback>
}
 8009424:	bf00      	nop
 8009426:	3710      	adds	r7, #16
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009438:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800943e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009440:	697b      	ldr	r3, [r7, #20]
 8009442:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009446:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009452:	2b80      	cmp	r3, #128	@ 0x80
 8009454:	d109      	bne.n	800946a <UART_DMAError+0x3e>
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	2b21      	cmp	r3, #33	@ 0x21
 800945a:	d106      	bne.n	800946a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2200      	movs	r2, #0
 8009460:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8009464:	6978      	ldr	r0, [r7, #20]
 8009466:	f7ff fea5 	bl	80091b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009474:	2b40      	cmp	r3, #64	@ 0x40
 8009476:	d109      	bne.n	800948c <UART_DMAError+0x60>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2b22      	cmp	r3, #34	@ 0x22
 800947c:	d106      	bne.n	800948c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	2200      	movs	r2, #0
 8009482:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8009486:	6978      	ldr	r0, [r7, #20]
 8009488:	f7ff feba 	bl	8009200 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009492:	f043 0210 	orr.w	r2, r3, #16
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800949c:	6978      	ldr	r0, [r7, #20]
 800949e:	f7ff fa47 	bl	8008930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094a2:	bf00      	nop
 80094a4:	3718      	adds	r7, #24
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094c8:	68f8      	ldr	r0, [r7, #12]
 80094ca:	f7ff fa31 	bl	8008930 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ce:	bf00      	nop
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}

080094d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80094d6:	b580      	push	{r7, lr}
 80094d8:	b088      	sub	sp, #32
 80094da:	af00      	add	r7, sp, #0
 80094dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	e853 3f00 	ldrex	r3, [r3]
 80094ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094f2:	61fb      	str	r3, [r7, #28]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	461a      	mov	r2, r3
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	61bb      	str	r3, [r7, #24]
 80094fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009500:	6979      	ldr	r1, [r7, #20]
 8009502:	69ba      	ldr	r2, [r7, #24]
 8009504:	e841 2300 	strex	r3, r2, [r1]
 8009508:	613b      	str	r3, [r7, #16]
   return(result);
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1e6      	bne.n	80094de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2220      	movs	r2, #32
 8009514:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7ff f9f3 	bl	8008908 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009522:	bf00      	nop
 8009524:	3720      	adds	r7, #32
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800952a:	b480      	push	{r7}
 800952c:	b083      	sub	sp, #12
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009532:	bf00      	nop
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
	...

08009540 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009546:	f3ef 8305 	mrs	r3, IPSR
 800954a:	60bb      	str	r3, [r7, #8]
  return(result);
 800954c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10f      	bne.n	8009572 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009552:	f3ef 8310 	mrs	r3, PRIMASK
 8009556:	607b      	str	r3, [r7, #4]
  return(result);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d109      	bne.n	8009572 <osKernelInitialize+0x32>
 800955e:	4b11      	ldr	r3, [pc, #68]	@ (80095a4 <osKernelInitialize+0x64>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d109      	bne.n	800957a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009566:	f3ef 8311 	mrs	r3, BASEPRI
 800956a:	603b      	str	r3, [r7, #0]
  return(result);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d003      	beq.n	800957a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8009572:	f06f 0305 	mvn.w	r3, #5
 8009576:	60fb      	str	r3, [r7, #12]
 8009578:	e00c      	b.n	8009594 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800957a:	4b0a      	ldr	r3, [pc, #40]	@ (80095a4 <osKernelInitialize+0x64>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d105      	bne.n	800958e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8009582:	4b08      	ldr	r3, [pc, #32]	@ (80095a4 <osKernelInitialize+0x64>)
 8009584:	2201      	movs	r2, #1
 8009586:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]
 800958c:	e002      	b.n	8009594 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800958e:	f04f 33ff 	mov.w	r3, #4294967295
 8009592:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009594:	68fb      	ldr	r3, [r7, #12]
}
 8009596:	4618      	mov	r0, r3
 8009598:	3714      	adds	r7, #20
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	200005c0 	.word	0x200005c0

080095a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095ae:	f3ef 8305 	mrs	r3, IPSR
 80095b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80095b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10f      	bne.n	80095da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095ba:	f3ef 8310 	mrs	r3, PRIMASK
 80095be:	607b      	str	r3, [r7, #4]
  return(result);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <osKernelStart+0x32>
 80095c6:	4b11      	ldr	r3, [pc, #68]	@ (800960c <osKernelStart+0x64>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d109      	bne.n	80095e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80095ce:	f3ef 8311 	mrs	r3, BASEPRI
 80095d2:	603b      	str	r3, [r7, #0]
  return(result);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d003      	beq.n	80095e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80095da:	f06f 0305 	mvn.w	r3, #5
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	e00e      	b.n	8009600 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80095e2:	4b0a      	ldr	r3, [pc, #40]	@ (800960c <osKernelStart+0x64>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b01      	cmp	r3, #1
 80095e8:	d107      	bne.n	80095fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80095ea:	4b08      	ldr	r3, [pc, #32]	@ (800960c <osKernelStart+0x64>)
 80095ec:	2202      	movs	r2, #2
 80095ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80095f0:	f001 f8b0 	bl	800a754 <vTaskStartScheduler>
      stat = osOK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	e002      	b.n	8009600 <osKernelStart+0x58>
    } else {
      stat = osError;
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295
 80095fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009600:	68fb      	ldr	r3, [r7, #12]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	200005c0 	.word	0x200005c0

08009610 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009610:	b580      	push	{r7, lr}
 8009612:	b092      	sub	sp, #72	@ 0x48
 8009614:	af04      	add	r7, sp, #16
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009620:	f3ef 8305 	mrs	r3, IPSR
 8009624:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 8094 	bne.w	8009756 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800962e:	f3ef 8310 	mrs	r3, PRIMASK
 8009632:	623b      	str	r3, [r7, #32]
  return(result);
 8009634:	6a3b      	ldr	r3, [r7, #32]
 8009636:	2b00      	cmp	r3, #0
 8009638:	f040 808d 	bne.w	8009756 <osThreadNew+0x146>
 800963c:	4b48      	ldr	r3, [pc, #288]	@ (8009760 <osThreadNew+0x150>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	2b02      	cmp	r3, #2
 8009642:	d106      	bne.n	8009652 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009644:	f3ef 8311 	mrs	r3, BASEPRI
 8009648:	61fb      	str	r3, [r7, #28]
  return(result);
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2b00      	cmp	r3, #0
 800964e:	f040 8082 	bne.w	8009756 <osThreadNew+0x146>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d07e      	beq.n	8009756 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8009658:	2380      	movs	r3, #128	@ 0x80
 800965a:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800965c:	2318      	movs	r3, #24
 800965e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8009660:	2300      	movs	r3, #0
 8009662:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8009664:	f107 031b 	add.w	r3, r7, #27
 8009668:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 800966a:	f04f 33ff 	mov.w	r3, #4294967295
 800966e:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d045      	beq.n	8009702 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d002      	beq.n	8009684 <osThreadNew+0x74>
        name = attr->name;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009694:	2b00      	cmp	r3, #0
 8009696:	d008      	beq.n	80096aa <osThreadNew+0x9a>
 8009698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800969a:	2b38      	cmp	r3, #56	@ 0x38
 800969c:	d805      	bhi.n	80096aa <osThreadNew+0x9a>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f003 0301 	and.w	r3, r3, #1
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d001      	beq.n	80096ae <osThreadNew+0x9e>
        return (NULL);
 80096aa:	2300      	movs	r3, #0
 80096ac:	e054      	b.n	8009758 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	089b      	lsrs	r3, r3, #2
 80096bc:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00e      	beq.n	80096e4 <osThreadNew+0xd4>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	2ba7      	cmp	r3, #167	@ 0xa7
 80096cc:	d90a      	bls.n	80096e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d006      	beq.n	80096e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <osThreadNew+0xd4>
        mem = 1;
 80096de:	2301      	movs	r3, #1
 80096e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80096e2:	e010      	b.n	8009706 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10c      	bne.n	8009706 <osThreadNew+0xf6>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d108      	bne.n	8009706 <osThreadNew+0xf6>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	691b      	ldr	r3, [r3, #16]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d104      	bne.n	8009706 <osThreadNew+0xf6>
          mem = 0;
 80096fc:	2300      	movs	r3, #0
 80096fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009700:	e001      	b.n	8009706 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8009706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009708:	2b01      	cmp	r3, #1
 800970a:	d110      	bne.n	800972e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009714:	9202      	str	r2, [sp, #8]
 8009716:	9301      	str	r3, [sp, #4]
 8009718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009720:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fe2c 	bl	800a380 <xTaskCreateStatic>
 8009728:	4603      	mov	r3, r0
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	e013      	b.n	8009756 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800972e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009730:	2b00      	cmp	r3, #0
 8009732:	d110      	bne.n	8009756 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009736:	b29a      	uxth	r2, r3
 8009738:	f107 0314 	add.w	r3, r7, #20
 800973c:	9301      	str	r3, [sp, #4]
 800973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009740:	9300      	str	r3, [sp, #0]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	f000 fe79 	bl	800a43e <xTaskCreate>
 800974c:	4603      	mov	r3, r0
 800974e:	2b01      	cmp	r3, #1
 8009750:	d001      	beq.n	8009756 <osThreadNew+0x146>
          hTask = NULL;
 8009752:	2300      	movs	r3, #0
 8009754:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009756:	697b      	ldr	r3, [r7, #20]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3738      	adds	r7, #56	@ 0x38
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	200005c0 	.word	0x200005c0

08009764 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009764:	b580      	push	{r7, lr}
 8009766:	b086      	sub	sp, #24
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800976c:	f3ef 8305 	mrs	r3, IPSR
 8009770:	613b      	str	r3, [r7, #16]
  return(result);
 8009772:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10f      	bne.n	8009798 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009778:	f3ef 8310 	mrs	r3, PRIMASK
 800977c:	60fb      	str	r3, [r7, #12]
  return(result);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d109      	bne.n	8009798 <osDelay+0x34>
 8009784:	4b0d      	ldr	r3, [pc, #52]	@ (80097bc <osDelay+0x58>)
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b02      	cmp	r3, #2
 800978a:	d109      	bne.n	80097a0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800978c:	f3ef 8311 	mrs	r3, BASEPRI
 8009790:	60bb      	str	r3, [r7, #8]
  return(result);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d003      	beq.n	80097a0 <osDelay+0x3c>
    stat = osErrorISR;
 8009798:	f06f 0305 	mvn.w	r3, #5
 800979c:	617b      	str	r3, [r7, #20]
 800979e:	e007      	b.n	80097b0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80097a0:	2300      	movs	r3, #0
 80097a2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d002      	beq.n	80097b0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 ff9c 	bl	800a6e8 <vTaskDelay>
    }
  }

  return (stat);
 80097b0:	697b      	ldr	r3, [r7, #20]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	200005c0 	.word	0x200005c0

080097c0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80097c0:	b480      	push	{r7}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	4a07      	ldr	r2, [pc, #28]	@ (80097ec <vApplicationGetIdleTaskMemory+0x2c>)
 80097d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	4a06      	ldr	r2, [pc, #24]	@ (80097f0 <vApplicationGetIdleTaskMemory+0x30>)
 80097d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2280      	movs	r2, #128	@ 0x80
 80097dc:	601a      	str	r2, [r3, #0]
}
 80097de:	bf00      	nop
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	200005c4 	.word	0x200005c4
 80097f0:	2000066c 	.word	0x2000066c

080097f4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	4a07      	ldr	r2, [pc, #28]	@ (8009820 <vApplicationGetTimerTaskMemory+0x2c>)
 8009804:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	4a06      	ldr	r2, [pc, #24]	@ (8009824 <vApplicationGetTimerTaskMemory+0x30>)
 800980a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	3714      	adds	r7, #20
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr
 8009820:	2000086c 	.word	0x2000086c
 8009824:	20000914 	.word	0x20000914

08009828 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f103 0208 	add.w	r2, r3, #8
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f04f 32ff 	mov.w	r2, #4294967295
 8009840:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f103 0208 	add.w	r2, r3, #8
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f103 0208 	add.w	r2, r3, #8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr

08009882 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009882:	b480      	push	{r7}
 8009884:	b085      	sub	sp, #20
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	685b      	ldr	r3, [r3, #4]
 8009890:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	689a      	ldr	r2, [r3, #8]
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	683a      	ldr	r2, [r7, #0]
 80098a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	683a      	ldr	r2, [r7, #0]
 80098ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	687a      	ldr	r2, [r7, #4]
 80098b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	601a      	str	r2, [r3, #0]
}
 80098be:	bf00      	nop
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr

080098ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80098ca:	b480      	push	{r7}
 80098cc:	b085      	sub	sp, #20
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	6078      	str	r0, [r7, #4]
 80098d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098e0:	d103      	bne.n	80098ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	e00c      	b.n	8009904 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	3308      	adds	r3, #8
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	e002      	b.n	80098f8 <vListInsert+0x2e>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	60fb      	str	r3, [r7, #12]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68ba      	ldr	r2, [r7, #8]
 8009900:	429a      	cmp	r2, r3
 8009902:	d2f6      	bcs.n	80098f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	683a      	ldr	r2, [r7, #0]
 8009912:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	68fa      	ldr	r2, [r7, #12]
 8009918:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	683a      	ldr	r2, [r7, #0]
 800991e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	601a      	str	r2, [r3, #0]
}
 8009930:	bf00      	nop
 8009932:	3714      	adds	r7, #20
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6892      	ldr	r2, [r2, #8]
 8009952:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6852      	ldr	r2, [r2, #4]
 800995c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	429a      	cmp	r2, r3
 8009966:	d103      	bne.n	8009970 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689a      	ldr	r2, [r3, #8]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1e5a      	subs	r2, r3, #1
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3714      	adds	r7, #20
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d10b      	bne.n	80099bc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80099a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099a8:	f383 8811 	msr	BASEPRI, r3
 80099ac:	f3bf 8f6f 	isb	sy
 80099b0:	f3bf 8f4f 	dsb	sy
 80099b4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80099b6:	bf00      	nop
 80099b8:	bf00      	nop
 80099ba:	e7fd      	b.n	80099b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80099bc:	f002 f86c 	bl	800ba98 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099c8:	68f9      	ldr	r1, [r7, #12]
 80099ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80099cc:	fb01 f303 	mul.w	r3, r1, r3
 80099d0:	441a      	add	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ec:	3b01      	subs	r3, #1
 80099ee:	68f9      	ldr	r1, [r7, #12]
 80099f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80099f2:	fb01 f303 	mul.w	r3, r1, r3
 80099f6:	441a      	add	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	22ff      	movs	r2, #255	@ 0xff
 8009a00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	22ff      	movs	r2, #255	@ 0xff
 8009a08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d114      	bne.n	8009a3c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d01a      	beq.n	8009a50 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	3310      	adds	r3, #16
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f001 f93c 	bl	800ac9c <xTaskRemoveFromEventList>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d012      	beq.n	8009a50 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a60 <xQueueGenericReset+0xd0>)
 8009a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a30:	601a      	str	r2, [r3, #0]
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	e009      	b.n	8009a50 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3310      	adds	r3, #16
 8009a40:	4618      	mov	r0, r3
 8009a42:	f7ff fef1 	bl	8009828 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3324      	adds	r3, #36	@ 0x24
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f7ff feec 	bl	8009828 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009a50:	f002 f854 	bl	800bafc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009a54:	2301      	movs	r3, #1
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3710      	adds	r7, #16
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	e000ed04 	.word	0xe000ed04

08009a64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b08e      	sub	sp, #56	@ 0x38
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
 8009a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d10b      	bne.n	8009a90 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009a8a:	bf00      	nop
 8009a8c:	bf00      	nop
 8009a8e:	e7fd      	b.n	8009a8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d002      	beq.n	8009aba <xQueueGenericCreateStatic+0x56>
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <xQueueGenericCreateStatic+0x5a>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e000      	b.n	8009ac0 <xQueueGenericCreateStatic+0x5c>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10b      	bne.n	8009adc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	623b      	str	r3, [r7, #32]
}
 8009ad6:	bf00      	nop
 8009ad8:	bf00      	nop
 8009ada:	e7fd      	b.n	8009ad8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d102      	bne.n	8009ae8 <xQueueGenericCreateStatic+0x84>
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d101      	bne.n	8009aec <xQueueGenericCreateStatic+0x88>
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e000      	b.n	8009aee <xQueueGenericCreateStatic+0x8a>
 8009aec:	2300      	movs	r3, #0
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10b      	bne.n	8009b0a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009af6:	f383 8811 	msr	BASEPRI, r3
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	f3bf 8f4f 	dsb	sy
 8009b02:	61fb      	str	r3, [r7, #28]
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop
 8009b08:	e7fd      	b.n	8009b06 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009b0a:	2350      	movs	r3, #80	@ 0x50
 8009b0c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	2b50      	cmp	r3, #80	@ 0x50
 8009b12:	d00b      	beq.n	8009b2c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	61bb      	str	r3, [r7, #24]
}
 8009b26:	bf00      	nop
 8009b28:	bf00      	nop
 8009b2a:	e7fd      	b.n	8009b28 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00d      	beq.n	8009b52 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b38:	2201      	movs	r2, #1
 8009b3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b3e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	4613      	mov	r3, r2
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	68b9      	ldr	r1, [r7, #8]
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f805 	bl	8009b5c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3730      	adds	r7, #48	@ 0x30
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d103      	bne.n	8009b78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	e002      	b.n	8009b7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	68fa      	ldr	r2, [r7, #12]
 8009b82:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b8a:	2101      	movs	r1, #1
 8009b8c:	69b8      	ldr	r0, [r7, #24]
 8009b8e:	f7ff feff 	bl	8009990 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b9a:	bf00      	nop
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
	...

08009ba4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b08e      	sub	sp, #56	@ 0x38
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10b      	bne.n	8009bd8 <xQueueGenericSend+0x34>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	e7fd      	b.n	8009bd4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d103      	bne.n	8009be6 <xQueueGenericSend+0x42>
 8009bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d101      	bne.n	8009bea <xQueueGenericSend+0x46>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e000      	b.n	8009bec <xQueueGenericSend+0x48>
 8009bea:	2300      	movs	r3, #0
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10b      	bne.n	8009c08 <xQueueGenericSend+0x64>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c02:	bf00      	nop
 8009c04:	bf00      	nop
 8009c06:	e7fd      	b.n	8009c04 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d103      	bne.n	8009c16 <xQueueGenericSend+0x72>
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d101      	bne.n	8009c1a <xQueueGenericSend+0x76>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e000      	b.n	8009c1c <xQueueGenericSend+0x78>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10b      	bne.n	8009c38 <xQueueGenericSend+0x94>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	623b      	str	r3, [r7, #32]
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c38:	f001 f9fc 	bl	800b034 <xTaskGetSchedulerState>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <xQueueGenericSend+0xa4>
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d101      	bne.n	8009c4c <xQueueGenericSend+0xa8>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e000      	b.n	8009c4e <xQueueGenericSend+0xaa>
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d10b      	bne.n	8009c6a <xQueueGenericSend+0xc6>
	__asm volatile
 8009c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c56:	f383 8811 	msr	BASEPRI, r3
 8009c5a:	f3bf 8f6f 	isb	sy
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	61fb      	str	r3, [r7, #28]
}
 8009c64:	bf00      	nop
 8009c66:	bf00      	nop
 8009c68:	e7fd      	b.n	8009c66 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c6a:	f001 ff15 	bl	800ba98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d302      	bcc.n	8009c80 <xQueueGenericSend+0xdc>
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d129      	bne.n	8009cd4 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c80:	683a      	ldr	r2, [r7, #0]
 8009c82:	68b9      	ldr	r1, [r7, #8]
 8009c84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009c86:	f000 fa0d 	bl	800a0a4 <prvCopyDataToQueue>
 8009c8a:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d010      	beq.n	8009cb6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c96:	3324      	adds	r3, #36	@ 0x24
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f000 ffff 	bl	800ac9c <xTaskRemoveFromEventList>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d013      	beq.n	8009ccc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ca4:	4b3f      	ldr	r3, [pc, #252]	@ (8009da4 <xQueueGenericSend+0x200>)
 8009ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009caa:	601a      	str	r2, [r3, #0]
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	f3bf 8f6f 	isb	sy
 8009cb4:	e00a      	b.n	8009ccc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009cb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d007      	beq.n	8009ccc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cbc:	4b39      	ldr	r3, [pc, #228]	@ (8009da4 <xQueueGenericSend+0x200>)
 8009cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ccc:	f001 ff16 	bl	800bafc <vPortExitCritical>
				return pdPASS;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e063      	b.n	8009d9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d103      	bne.n	8009ce2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cda:	f001 ff0f 	bl	800bafc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	e05c      	b.n	8009d9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d106      	bne.n	8009cf6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ce8:	f107 0314 	add.w	r3, r7, #20
 8009cec:	4618      	mov	r0, r3
 8009cee:	f001 f839 	bl	800ad64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009cf6:	f001 ff01 	bl	800bafc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009cfa:	f000 fd9b 	bl	800a834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cfe:	f001 fecb 	bl	800ba98 <vPortEnterCritical>
 8009d02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d08:	b25b      	sxtb	r3, r3
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0e:	d103      	bne.n	8009d18 <xQueueGenericSend+0x174>
 8009d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d1e:	b25b      	sxtb	r3, r3
 8009d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d24:	d103      	bne.n	8009d2e <xQueueGenericSend+0x18a>
 8009d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d28:	2200      	movs	r2, #0
 8009d2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d2e:	f001 fee5 	bl	800bafc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d32:	1d3a      	adds	r2, r7, #4
 8009d34:	f107 0314 	add.w	r3, r7, #20
 8009d38:	4611      	mov	r1, r2
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f001 f828 	bl	800ad90 <xTaskCheckForTimeOut>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d124      	bne.n	8009d90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d48:	f000 faa4 	bl	800a294 <prvIsQueueFull>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d018      	beq.n	8009d84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d54:	3310      	adds	r3, #16
 8009d56:	687a      	ldr	r2, [r7, #4]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f000 ff4c 	bl	800abf8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d62:	f000 fa2f 	bl	800a1c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d66:	f000 fd73 	bl	800a850 <xTaskResumeAll>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f47f af7c 	bne.w	8009c6a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009d72:	4b0c      	ldr	r3, [pc, #48]	@ (8009da4 <xQueueGenericSend+0x200>)
 8009d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	f3bf 8f6f 	isb	sy
 8009d82:	e772      	b.n	8009c6a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d86:	f000 fa1d 	bl	800a1c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d8a:	f000 fd61 	bl	800a850 <xTaskResumeAll>
 8009d8e:	e76c      	b.n	8009c6a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009d90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d92:	f000 fa17 	bl	800a1c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d96:	f000 fd5b 	bl	800a850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009d9a:	2300      	movs	r3, #0
		}
	}
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3738      	adds	r7, #56	@ 0x38
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	e000ed04 	.word	0xe000ed04

08009da8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08e      	sub	sp, #56	@ 0x38
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	60f8      	str	r0, [r7, #12]
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	607a      	str	r2, [r7, #4]
 8009db4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10b      	bne.n	8009dd8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009dd2:	bf00      	nop
 8009dd4:	bf00      	nop
 8009dd6:	e7fd      	b.n	8009dd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d103      	bne.n	8009de6 <xQueueGenericSendFromISR+0x3e>
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <xQueueGenericSendFromISR+0x42>
 8009de6:	2301      	movs	r3, #1
 8009de8:	e000      	b.n	8009dec <xQueueGenericSendFromISR+0x44>
 8009dea:	2300      	movs	r3, #0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10b      	bne.n	8009e08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	623b      	str	r3, [r7, #32]
}
 8009e02:	bf00      	nop
 8009e04:	bf00      	nop
 8009e06:	e7fd      	b.n	8009e04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d103      	bne.n	8009e16 <xQueueGenericSendFromISR+0x6e>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d101      	bne.n	8009e1a <xQueueGenericSendFromISR+0x72>
 8009e16:	2301      	movs	r3, #1
 8009e18:	e000      	b.n	8009e1c <xQueueGenericSendFromISR+0x74>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d10b      	bne.n	8009e38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e24:	f383 8811 	msr	BASEPRI, r3
 8009e28:	f3bf 8f6f 	isb	sy
 8009e2c:	f3bf 8f4f 	dsb	sy
 8009e30:	61fb      	str	r3, [r7, #28]
}
 8009e32:	bf00      	nop
 8009e34:	bf00      	nop
 8009e36:	e7fd      	b.n	8009e34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e38:	f001 ff0e 	bl	800bc58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e3c:	f3ef 8211 	mrs	r2, BASEPRI
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	61ba      	str	r2, [r7, #24]
 8009e52:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e54:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e60:	429a      	cmp	r2, r3
 8009e62:	d302      	bcc.n	8009e6a <xQueueGenericSendFromISR+0xc2>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d12c      	bne.n	8009ec4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	68b9      	ldr	r1, [r7, #8]
 8009e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e7a:	f000 f913 	bl	800a0a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8009e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e86:	d112      	bne.n	8009eae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d016      	beq.n	8009ebe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	3324      	adds	r3, #36	@ 0x24
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 ff01 	bl	800ac9c <xTaskRemoveFromEventList>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00e      	beq.n	8009ebe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d00b      	beq.n	8009ebe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	601a      	str	r2, [r3, #0]
 8009eac:	e007      	b.n	8009ebe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009eae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	b25a      	sxtb	r2, r3
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8009ec2:	e001      	b.n	8009ec8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009eca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ed2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3738      	adds	r7, #56	@ 0x38
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
	...

08009ee0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b08c      	sub	sp, #48	@ 0x30
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009eec:	2300      	movs	r3, #0
 8009eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10b      	bne.n	8009f12 <xQueueReceive+0x32>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	623b      	str	r3, [r7, #32]
}
 8009f0c:	bf00      	nop
 8009f0e:	bf00      	nop
 8009f10:	e7fd      	b.n	8009f0e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d103      	bne.n	8009f20 <xQueueReceive+0x40>
 8009f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d101      	bne.n	8009f24 <xQueueReceive+0x44>
 8009f20:	2301      	movs	r3, #1
 8009f22:	e000      	b.n	8009f26 <xQueueReceive+0x46>
 8009f24:	2300      	movs	r3, #0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d10b      	bne.n	8009f42 <xQueueReceive+0x62>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	61fb      	str	r3, [r7, #28]
}
 8009f3c:	bf00      	nop
 8009f3e:	bf00      	nop
 8009f40:	e7fd      	b.n	8009f3e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f42:	f001 f877 	bl	800b034 <xTaskGetSchedulerState>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d102      	bne.n	8009f52 <xQueueReceive+0x72>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <xQueueReceive+0x76>
 8009f52:	2301      	movs	r3, #1
 8009f54:	e000      	b.n	8009f58 <xQueueReceive+0x78>
 8009f56:	2300      	movs	r3, #0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d10b      	bne.n	8009f74 <xQueueReceive+0x94>
	__asm volatile
 8009f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f60:	f383 8811 	msr	BASEPRI, r3
 8009f64:	f3bf 8f6f 	isb	sy
 8009f68:	f3bf 8f4f 	dsb	sy
 8009f6c:	61bb      	str	r3, [r7, #24]
}
 8009f6e:	bf00      	nop
 8009f70:	bf00      	nop
 8009f72:	e7fd      	b.n	8009f70 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f74:	f001 fd90 	bl	800ba98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f7c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01f      	beq.n	8009fc4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009f84:	68b9      	ldr	r1, [r7, #8]
 8009f86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f88:	f000 f8f6 	bl	800a178 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f8e:	1e5a      	subs	r2, r3, #1
 8009f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f92:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f96:	691b      	ldr	r3, [r3, #16]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00f      	beq.n	8009fbc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f9e:	3310      	adds	r3, #16
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	f000 fe7b 	bl	800ac9c <xTaskRemoveFromEventList>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d007      	beq.n	8009fbc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009fac:	4b3c      	ldr	r3, [pc, #240]	@ (800a0a0 <xQueueReceive+0x1c0>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009fbc:	f001 fd9e 	bl	800bafc <vPortExitCritical>
				return pdPASS;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e069      	b.n	800a098 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d103      	bne.n	8009fd2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fca:	f001 fd97 	bl	800bafc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	e062      	b.n	800a098 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d106      	bne.n	8009fe6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fd8:	f107 0310 	add.w	r3, r7, #16
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f000 fec1 	bl	800ad64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fe6:	f001 fd89 	bl	800bafc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fea:	f000 fc23 	bl	800a834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fee:	f001 fd53 	bl	800ba98 <vPortEnterCritical>
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009ff8:	b25b      	sxtb	r3, r3
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d103      	bne.n	800a008 <xQueueReceive+0x128>
 800a000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a00a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a00e:	b25b      	sxtb	r3, r3
 800a010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a014:	d103      	bne.n	800a01e <xQueueReceive+0x13e>
 800a016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a01e:	f001 fd6d 	bl	800bafc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a022:	1d3a      	adds	r2, r7, #4
 800a024:	f107 0310 	add.w	r3, r7, #16
 800a028:	4611      	mov	r1, r2
 800a02a:	4618      	mov	r0, r3
 800a02c:	f000 feb0 	bl	800ad90 <xTaskCheckForTimeOut>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d123      	bne.n	800a07e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a038:	f000 f916 	bl	800a268 <prvIsQueueEmpty>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d017      	beq.n	800a072 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a044:	3324      	adds	r3, #36	@ 0x24
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f000 fdd4 	bl	800abf8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a050:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a052:	f000 f8b7 	bl	800a1c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a056:	f000 fbfb 	bl	800a850 <xTaskResumeAll>
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d189      	bne.n	8009f74 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a060:	4b0f      	ldr	r3, [pc, #60]	@ (800a0a0 <xQueueReceive+0x1c0>)
 800a062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a066:	601a      	str	r2, [r3, #0]
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	f3bf 8f6f 	isb	sy
 800a070:	e780      	b.n	8009f74 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a072:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a074:	f000 f8a6 	bl	800a1c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a078:	f000 fbea 	bl	800a850 <xTaskResumeAll>
 800a07c:	e77a      	b.n	8009f74 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a07e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a080:	f000 f8a0 	bl	800a1c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a084:	f000 fbe4 	bl	800a850 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a088:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a08a:	f000 f8ed 	bl	800a268 <prvIsQueueEmpty>
 800a08e:	4603      	mov	r3, r0
 800a090:	2b00      	cmp	r3, #0
 800a092:	f43f af6f 	beq.w	8009f74 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a096:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3730      	adds	r7, #48	@ 0x30
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	e000ed04 	.word	0xe000ed04

0800a0a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d10d      	bne.n	800a0de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d14d      	bne.n	800a166 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f000 ffce 	bl	800b070 <xTaskPriorityDisinherit>
 800a0d4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	605a      	str	r2, [r3, #4]
 800a0dc:	e043      	b.n	800a166 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d119      	bne.n	800a118 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6898      	ldr	r0, [r3, #8]
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	f003 f92d 	bl	800d34e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	689a      	ldr	r2, [r3, #8]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0fc:	441a      	add	r2, r3
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	689a      	ldr	r2, [r3, #8]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d32b      	bcc.n	800a166 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	609a      	str	r2, [r3, #8]
 800a116:	e026      	b.n	800a166 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	68d8      	ldr	r0, [r3, #12]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a120:	461a      	mov	r2, r3
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	f003 f913 	bl	800d34e <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	68da      	ldr	r2, [r3, #12]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a130:	425b      	negs	r3, r3
 800a132:	441a      	add	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	68da      	ldr	r2, [r3, #12]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	429a      	cmp	r2, r3
 800a142:	d207      	bcs.n	800a154 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	685a      	ldr	r2, [r3, #4]
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a14c:	425b      	negs	r3, r3
 800a14e:	441a      	add	r2, r3
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2b02      	cmp	r3, #2
 800a158:	d105      	bne.n	800a166 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d002      	beq.n	800a166 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	3b01      	subs	r3, #1
 800a164:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	1c5a      	adds	r2, r3, #1
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a16e:	697b      	ldr	r3, [r7, #20]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3718      	adds	r7, #24
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a186:	2b00      	cmp	r3, #0
 800a188:	d018      	beq.n	800a1bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a192:	441a      	add	r2, r3
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	68da      	ldr	r2, [r3, #12]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d303      	bcc.n	800a1ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68d9      	ldr	r1, [r3, #12]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b4:	461a      	mov	r2, r3
 800a1b6:	6838      	ldr	r0, [r7, #0]
 800a1b8:	f003 f8c9 	bl	800d34e <memcpy>
	}
}
 800a1bc:	bf00      	nop
 800a1be:	3708      	adds	r7, #8
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a1cc:	f001 fc64 	bl	800ba98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a1d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1d8:	e011      	b.n	800a1fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d012      	beq.n	800a208 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	3324      	adds	r3, #36	@ 0x24
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	f000 fd58 	bl	800ac9c <xTaskRemoveFromEventList>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a1f2:	f000 fe31 	bl	800ae58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a1f6:	7bfb      	ldrb	r3, [r7, #15]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a1fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a202:	2b00      	cmp	r3, #0
 800a204:	dce9      	bgt.n	800a1da <prvUnlockQueue+0x16>
 800a206:	e000      	b.n	800a20a <prvUnlockQueue+0x46>
					break;
 800a208:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	22ff      	movs	r2, #255	@ 0xff
 800a20e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a212:	f001 fc73 	bl	800bafc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a216:	f001 fc3f 	bl	800ba98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a220:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a222:	e011      	b.n	800a248 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	691b      	ldr	r3, [r3, #16]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d012      	beq.n	800a252 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	3310      	adds	r3, #16
 800a230:	4618      	mov	r0, r3
 800a232:	f000 fd33 	bl	800ac9c <xTaskRemoveFromEventList>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a23c:	f000 fe0c 	bl	800ae58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a240:	7bbb      	ldrb	r3, [r7, #14]
 800a242:	3b01      	subs	r3, #1
 800a244:	b2db      	uxtb	r3, r3
 800a246:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a248:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	dce9      	bgt.n	800a224 <prvUnlockQueue+0x60>
 800a250:	e000      	b.n	800a254 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a252:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	22ff      	movs	r2, #255	@ 0xff
 800a258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a25c:	f001 fc4e 	bl	800bafc <vPortExitCritical>
}
 800a260:	bf00      	nop
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a270:	f001 fc12 	bl	800ba98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d102      	bne.n	800a282 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a27c:	2301      	movs	r3, #1
 800a27e:	60fb      	str	r3, [r7, #12]
 800a280:	e001      	b.n	800a286 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a282:	2300      	movs	r3, #0
 800a284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a286:	f001 fc39 	bl	800bafc <vPortExitCritical>

	return xReturn;
 800a28a:	68fb      	ldr	r3, [r7, #12]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a29c:	f001 fbfc 	bl	800ba98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d102      	bne.n	800a2b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	e001      	b.n	800a2b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2b6:	f001 fc21 	bl	800bafc <vPortExitCritical>

	return xReturn;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3710      	adds	r7, #16
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
 800a2d2:	e014      	b.n	800a2fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a2d4:	4a0f      	ldr	r2, [pc, #60]	@ (800a314 <vQueueAddToRegistry+0x50>)
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10b      	bne.n	800a2f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a2e0:	490c      	ldr	r1, [pc, #48]	@ (800a314 <vQueueAddToRegistry+0x50>)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a2ea:	4a0a      	ldr	r2, [pc, #40]	@ (800a314 <vQueueAddToRegistry+0x50>)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	4413      	add	r3, r2
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a2f6:	e006      	b.n	800a306 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	3301      	adds	r3, #1
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2b07      	cmp	r3, #7
 800a302:	d9e7      	bls.n	800a2d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a304:	bf00      	nop
 800a306:	bf00      	nop
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000d14 	.word	0x20000d14

0800a318 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a328:	f001 fbb6 	bl	800ba98 <vPortEnterCritical>
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a332:	b25b      	sxtb	r3, r3
 800a334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a338:	d103      	bne.n	800a342 <vQueueWaitForMessageRestricted+0x2a>
 800a33a:	697b      	ldr	r3, [r7, #20]
 800a33c:	2200      	movs	r2, #0
 800a33e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a342:	697b      	ldr	r3, [r7, #20]
 800a344:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a348:	b25b      	sxtb	r3, r3
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a34e:	d103      	bne.n	800a358 <vQueueWaitForMessageRestricted+0x40>
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	2200      	movs	r2, #0
 800a354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a358:	f001 fbd0 	bl	800bafc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a360:	2b00      	cmp	r3, #0
 800a362:	d106      	bne.n	800a372 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	3324      	adds	r3, #36	@ 0x24
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	68b9      	ldr	r1, [r7, #8]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f000 fc69 	bl	800ac44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a372:	6978      	ldr	r0, [r7, #20]
 800a374:	f7ff ff26 	bl	800a1c4 <prvUnlockQueue>
	}
 800a378:	bf00      	nop
 800a37a:	3718      	adds	r7, #24
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08e      	sub	sp, #56	@ 0x38
 800a384:	af04      	add	r7, sp, #16
 800a386:	60f8      	str	r0, [r7, #12]
 800a388:	60b9      	str	r1, [r7, #8]
 800a38a:	607a      	str	r2, [r7, #4]
 800a38c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a390:	2b00      	cmp	r3, #0
 800a392:	d10b      	bne.n	800a3ac <xTaskCreateStatic+0x2c>
	__asm volatile
 800a394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a398:	f383 8811 	msr	BASEPRI, r3
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	f3bf 8f4f 	dsb	sy
 800a3a4:	623b      	str	r3, [r7, #32]
}
 800a3a6:	bf00      	nop
 800a3a8:	bf00      	nop
 800a3aa:	e7fd      	b.n	800a3a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d10b      	bne.n	800a3ca <xTaskCreateStatic+0x4a>
	__asm volatile
 800a3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b6:	f383 8811 	msr	BASEPRI, r3
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	f3bf 8f4f 	dsb	sy
 800a3c2:	61fb      	str	r3, [r7, #28]
}
 800a3c4:	bf00      	nop
 800a3c6:	bf00      	nop
 800a3c8:	e7fd      	b.n	800a3c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a3ca:	23a8      	movs	r3, #168	@ 0xa8
 800a3cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	2ba8      	cmp	r3, #168	@ 0xa8
 800a3d2:	d00b      	beq.n	800a3ec <xTaskCreateStatic+0x6c>
	__asm volatile
 800a3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d8:	f383 8811 	msr	BASEPRI, r3
 800a3dc:	f3bf 8f6f 	isb	sy
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	61bb      	str	r3, [r7, #24]
}
 800a3e6:	bf00      	nop
 800a3e8:	bf00      	nop
 800a3ea:	e7fd      	b.n	800a3e8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d01e      	beq.n	800a430 <xTaskCreateStatic+0xb0>
 800a3f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d01b      	beq.n	800a430 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3fa:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a400:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a404:	2202      	movs	r2, #2
 800a406:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a40a:	2300      	movs	r3, #0
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a410:	9302      	str	r3, [sp, #8]
 800a412:	f107 0314 	add.w	r3, r7, #20
 800a416:	9301      	str	r3, [sp, #4]
 800a418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	68b9      	ldr	r1, [r7, #8]
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 f850 	bl	800a4c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a428:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a42a:	f000 f8ed 	bl	800a608 <prvAddNewTaskToReadyList>
 800a42e:	e001      	b.n	800a434 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 800a430:	2300      	movs	r3, #0
 800a432:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a434:	697b      	ldr	r3, [r7, #20]
	}
 800a436:	4618      	mov	r0, r3
 800a438:	3728      	adds	r7, #40	@ 0x28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bd80      	pop	{r7, pc}

0800a43e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b08c      	sub	sp, #48	@ 0x30
 800a442:	af04      	add	r7, sp, #16
 800a444:	60f8      	str	r0, [r7, #12]
 800a446:	60b9      	str	r1, [r7, #8]
 800a448:	603b      	str	r3, [r7, #0]
 800a44a:	4613      	mov	r3, r2
 800a44c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a44e:	88fb      	ldrh	r3, [r7, #6]
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	4618      	mov	r0, r3
 800a454:	f001 fc42 	bl	800bcdc <pvPortMalloc>
 800a458:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00e      	beq.n	800a47e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a460:	20a8      	movs	r0, #168	@ 0xa8
 800a462:	f001 fc3b 	bl	800bcdc <pvPortMalloc>
 800a466:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	631a      	str	r2, [r3, #48]	@ 0x30
 800a474:	e005      	b.n	800a482 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f001 fcf8 	bl	800be6c <vPortFree>
 800a47c:	e001      	b.n	800a482 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a47e:	2300      	movs	r3, #0
 800a480:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d017      	beq.n	800a4b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a490:	88fa      	ldrh	r2, [r7, #6]
 800a492:	2300      	movs	r3, #0
 800a494:	9303      	str	r3, [sp, #12]
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	9302      	str	r3, [sp, #8]
 800a49a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49c:	9301      	str	r3, [sp, #4]
 800a49e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a0:	9300      	str	r3, [sp, #0]
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	68b9      	ldr	r1, [r7, #8]
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f000 f80e 	bl	800a4c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4ac:	69f8      	ldr	r0, [r7, #28]
 800a4ae:	f000 f8ab 	bl	800a608 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	61bb      	str	r3, [r7, #24]
 800a4b6:	e002      	b.n	800a4be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a4be:	69bb      	ldr	r3, [r7, #24]
	}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3720      	adds	r7, #32
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b088      	sub	sp, #32
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	607a      	str	r2, [r7, #4]
 800a4d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	461a      	mov	r2, r3
 800a4e0:	21a5      	movs	r1, #165	@ 0xa5
 800a4e2:	f002 fe4e 	bl	800d182 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	f023 0307 	bic.w	r3, r3, #7
 800a4fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	f003 0307 	and.w	r3, r3, #7
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00b      	beq.n	800a522 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	617b      	str	r3, [r7, #20]
}
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	e7fd      	b.n	800a51e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a522:	2300      	movs	r3, #0
 800a524:	61fb      	str	r3, [r7, #28]
 800a526:	e012      	b.n	800a54e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	4413      	add	r3, r2
 800a52e:	7819      	ldrb	r1, [r3, #0]
 800a530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	4413      	add	r3, r2
 800a536:	3334      	adds	r3, #52	@ 0x34
 800a538:	460a      	mov	r2, r1
 800a53a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	4413      	add	r3, r2
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d006      	beq.n	800a556 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	3301      	adds	r3, #1
 800a54c:	61fb      	str	r3, [r7, #28]
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	2b0f      	cmp	r3, #15
 800a552:	d9e9      	bls.n	800a528 <prvInitialiseNewTask+0x60>
 800a554:	e000      	b.n	800a558 <prvInitialiseNewTask+0x90>
		{
			break;
 800a556:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a562:	2b37      	cmp	r3, #55	@ 0x37
 800a564:	d901      	bls.n	800a56a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a566:	2337      	movs	r3, #55	@ 0x37
 800a568:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a56e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a572:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a574:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a578:	2200      	movs	r2, #0
 800a57a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57e:	3304      	adds	r3, #4
 800a580:	4618      	mov	r0, r3
 800a582:	f7ff f971 	bl	8009868 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a588:	3318      	adds	r3, #24
 800a58a:	4618      	mov	r0, r3
 800a58c:	f7ff f96c 	bl	8009868 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a594:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a598:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5a4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a5ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b8:	3354      	adds	r3, #84	@ 0x54
 800a5ba:	224c      	movs	r2, #76	@ 0x4c
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f002 fddf 	bl	800d182 <memset>
 800a5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5c6:	4a0d      	ldr	r2, [pc, #52]	@ (800a5fc <prvInitialiseNewTask+0x134>)
 800a5c8:	659a      	str	r2, [r3, #88]	@ 0x58
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5cc:	4a0c      	ldr	r2, [pc, #48]	@ (800a600 <prvInitialiseNewTask+0x138>)
 800a5ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d2:	4a0c      	ldr	r2, [pc, #48]	@ (800a604 <prvInitialiseNewTask+0x13c>)
 800a5d4:	661a      	str	r2, [r3, #96]	@ 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	68f9      	ldr	r1, [r7, #12]
 800a5da:	69b8      	ldr	r0, [r7, #24]
 800a5dc:	f001 f92c 	bl	800b838 <pxPortInitialiseStack>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a5e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a5f2:	bf00      	nop
 800a5f4:	3720      	adds	r7, #32
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	20001fa8 	.word	0x20001fa8
 800a600:	20002010 	.word	0x20002010
 800a604:	20002078 	.word	0x20002078

0800a608 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a610:	f001 fa42 	bl	800ba98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a614:	4b2d      	ldr	r3, [pc, #180]	@ (800a6cc <prvAddNewTaskToReadyList+0xc4>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3301      	adds	r3, #1
 800a61a:	4a2c      	ldr	r2, [pc, #176]	@ (800a6cc <prvAddNewTaskToReadyList+0xc4>)
 800a61c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a61e:	4b2c      	ldr	r3, [pc, #176]	@ (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d109      	bne.n	800a63a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a626:	4a2a      	ldr	r2, [pc, #168]	@ (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a62c:	4b27      	ldr	r3, [pc, #156]	@ (800a6cc <prvAddNewTaskToReadyList+0xc4>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	2b01      	cmp	r3, #1
 800a632:	d110      	bne.n	800a656 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a634:	f000 fc34 	bl	800aea0 <prvInitialiseTaskLists>
 800a638:	e00d      	b.n	800a656 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a63a:	4b26      	ldr	r3, [pc, #152]	@ (800a6d4 <prvAddNewTaskToReadyList+0xcc>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d109      	bne.n	800a656 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a642:	4b23      	ldr	r3, [pc, #140]	@ (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d802      	bhi.n	800a656 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a650:	4a1f      	ldr	r2, [pc, #124]	@ (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a656:	4b20      	ldr	r3, [pc, #128]	@ (800a6d8 <prvAddNewTaskToReadyList+0xd0>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	3301      	adds	r3, #1
 800a65c:	4a1e      	ldr	r2, [pc, #120]	@ (800a6d8 <prvAddNewTaskToReadyList+0xd0>)
 800a65e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a660:	4b1d      	ldr	r3, [pc, #116]	@ (800a6d8 <prvAddNewTaskToReadyList+0xd0>)
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66c:	4b1b      	ldr	r3, [pc, #108]	@ (800a6dc <prvAddNewTaskToReadyList+0xd4>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d903      	bls.n	800a67c <prvAddNewTaskToReadyList+0x74>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a678:	4a18      	ldr	r2, [pc, #96]	@ (800a6dc <prvAddNewTaskToReadyList+0xd4>)
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a680:	4613      	mov	r3, r2
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	4413      	add	r3, r2
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	4a15      	ldr	r2, [pc, #84]	@ (800a6e0 <prvAddNewTaskToReadyList+0xd8>)
 800a68a:	441a      	add	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	3304      	adds	r3, #4
 800a690:	4619      	mov	r1, r3
 800a692:	4610      	mov	r0, r2
 800a694:	f7ff f8f5 	bl	8009882 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a698:	f001 fa30 	bl	800bafc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a69c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d4 <prvAddNewTaskToReadyList+0xcc>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00e      	beq.n	800a6c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a6a4:	4b0a      	ldr	r3, [pc, #40]	@ (800a6d0 <prvAddNewTaskToReadyList+0xc8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d207      	bcs.n	800a6c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a6b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a6e4 <prvAddNewTaskToReadyList+0xdc>)
 800a6b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6c2:	bf00      	nop
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20001228 	.word	0x20001228
 800a6d0:	20000d54 	.word	0x20000d54
 800a6d4:	20001234 	.word	0x20001234
 800a6d8:	20001244 	.word	0x20001244
 800a6dc:	20001230 	.word	0x20001230
 800a6e0:	20000d58 	.word	0x20000d58
 800a6e4:	e000ed04 	.word	0xe000ed04

0800a6e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d018      	beq.n	800a72c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a6fa:	4b14      	ldr	r3, [pc, #80]	@ (800a74c <vTaskDelay+0x64>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00b      	beq.n	800a71a <vTaskDelay+0x32>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	60bb      	str	r3, [r7, #8]
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop
 800a718:	e7fd      	b.n	800a716 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a71a:	f000 f88b 	bl	800a834 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a71e:	2100      	movs	r1, #0
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 fd15 	bl	800b150 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a726:	f000 f893 	bl	800a850 <xTaskResumeAll>
 800a72a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d107      	bne.n	800a742 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a732:	4b07      	ldr	r3, [pc, #28]	@ (800a750 <vTaskDelay+0x68>)
 800a734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	f3bf 8f4f 	dsb	sy
 800a73e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a742:	bf00      	nop
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	20001250 	.word	0x20001250
 800a750:	e000ed04 	.word	0xe000ed04

0800a754 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08a      	sub	sp, #40	@ 0x28
 800a758:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a75e:	2300      	movs	r3, #0
 800a760:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a762:	463a      	mov	r2, r7
 800a764:	1d39      	adds	r1, r7, #4
 800a766:	f107 0308 	add.w	r3, r7, #8
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff f828 	bl	80097c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a770:	6839      	ldr	r1, [r7, #0]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68ba      	ldr	r2, [r7, #8]
 800a776:	9202      	str	r2, [sp, #8]
 800a778:	9301      	str	r3, [sp, #4]
 800a77a:	2300      	movs	r3, #0
 800a77c:	9300      	str	r3, [sp, #0]
 800a77e:	2300      	movs	r3, #0
 800a780:	460a      	mov	r2, r1
 800a782:	4924      	ldr	r1, [pc, #144]	@ (800a814 <vTaskStartScheduler+0xc0>)
 800a784:	4824      	ldr	r0, [pc, #144]	@ (800a818 <vTaskStartScheduler+0xc4>)
 800a786:	f7ff fdfb 	bl	800a380 <xTaskCreateStatic>
 800a78a:	4603      	mov	r3, r0
 800a78c:	4a23      	ldr	r2, [pc, #140]	@ (800a81c <vTaskStartScheduler+0xc8>)
 800a78e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a790:	4b22      	ldr	r3, [pc, #136]	@ (800a81c <vTaskStartScheduler+0xc8>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d002      	beq.n	800a79e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a798:	2301      	movs	r3, #1
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	e001      	b.n	800a7a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d102      	bne.n	800a7ae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a7a8:	f000 fd26 	bl	800b1f8 <xTimerCreateTimerTask>
 800a7ac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d11b      	bne.n	800a7ec <vTaskStartScheduler+0x98>
	__asm volatile
 800a7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b8:	f383 8811 	msr	BASEPRI, r3
 800a7bc:	f3bf 8f6f 	isb	sy
 800a7c0:	f3bf 8f4f 	dsb	sy
 800a7c4:	613b      	str	r3, [r7, #16]
}
 800a7c6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7c8:	4b15      	ldr	r3, [pc, #84]	@ (800a820 <vTaskStartScheduler+0xcc>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3354      	adds	r3, #84	@ 0x54
 800a7ce:	4a15      	ldr	r2, [pc, #84]	@ (800a824 <vTaskStartScheduler+0xd0>)
 800a7d0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a7d2:	4b15      	ldr	r3, [pc, #84]	@ (800a828 <vTaskStartScheduler+0xd4>)
 800a7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a7da:	4b14      	ldr	r3, [pc, #80]	@ (800a82c <vTaskStartScheduler+0xd8>)
 800a7dc:	2201      	movs	r2, #1
 800a7de:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a7e0:	4b13      	ldr	r3, [pc, #76]	@ (800a830 <vTaskStartScheduler+0xdc>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a7e6:	f001 f8b3 	bl	800b950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a7ea:	e00f      	b.n	800a80c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d10b      	bne.n	800a80c <vTaskStartScheduler+0xb8>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	60fb      	str	r3, [r7, #12]
}
 800a806:	bf00      	nop
 800a808:	bf00      	nop
 800a80a:	e7fd      	b.n	800a808 <vTaskStartScheduler+0xb4>
}
 800a80c:	bf00      	nop
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	08011184 	.word	0x08011184
 800a818:	0800ae71 	.word	0x0800ae71
 800a81c:	2000124c 	.word	0x2000124c
 800a820:	20000d54 	.word	0x20000d54
 800a824:	20000028 	.word	0x20000028
 800a828:	20001248 	.word	0x20001248
 800a82c:	20001234 	.word	0x20001234
 800a830:	2000122c 	.word	0x2000122c

0800a834 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a834:	b480      	push	{r7}
 800a836:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a838:	4b04      	ldr	r3, [pc, #16]	@ (800a84c <vTaskSuspendAll+0x18>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	3301      	adds	r3, #1
 800a83e:	4a03      	ldr	r2, [pc, #12]	@ (800a84c <vTaskSuspendAll+0x18>)
 800a840:	6013      	str	r3, [r2, #0]
}
 800a842:	bf00      	nop
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	20001250 	.word	0x20001250

0800a850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a856:	2300      	movs	r3, #0
 800a858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a85a:	2300      	movs	r3, #0
 800a85c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a85e:	4b42      	ldr	r3, [pc, #264]	@ (800a968 <xTaskResumeAll+0x118>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <xTaskResumeAll+0x2e>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	603b      	str	r3, [r7, #0]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a87e:	f001 f90b 	bl	800ba98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a882:	4b39      	ldr	r3, [pc, #228]	@ (800a968 <xTaskResumeAll+0x118>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	3b01      	subs	r3, #1
 800a888:	4a37      	ldr	r2, [pc, #220]	@ (800a968 <xTaskResumeAll+0x118>)
 800a88a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a88c:	4b36      	ldr	r3, [pc, #216]	@ (800a968 <xTaskResumeAll+0x118>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d162      	bne.n	800a95a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a894:	4b35      	ldr	r3, [pc, #212]	@ (800a96c <xTaskResumeAll+0x11c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d05e      	beq.n	800a95a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a89c:	e02f      	b.n	800a8fe <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a89e:	4b34      	ldr	r3, [pc, #208]	@ (800a970 <xTaskResumeAll+0x120>)
 800a8a0:	68db      	ldr	r3, [r3, #12]
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	3318      	adds	r3, #24
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff f846 	bl	800993c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	f7ff f841 	bl	800993c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8be:	4b2d      	ldr	r3, [pc, #180]	@ (800a974 <xTaskResumeAll+0x124>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d903      	bls.n	800a8ce <xTaskResumeAll+0x7e>
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8ca:	4a2a      	ldr	r2, [pc, #168]	@ (800a974 <xTaskResumeAll+0x124>)
 800a8cc:	6013      	str	r3, [r2, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8d2:	4613      	mov	r3, r2
 800a8d4:	009b      	lsls	r3, r3, #2
 800a8d6:	4413      	add	r3, r2
 800a8d8:	009b      	lsls	r3, r3, #2
 800a8da:	4a27      	ldr	r2, [pc, #156]	@ (800a978 <xTaskResumeAll+0x128>)
 800a8dc:	441a      	add	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3304      	adds	r3, #4
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	4610      	mov	r0, r2
 800a8e6:	f7fe ffcc 	bl	8009882 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8ee:	4b23      	ldr	r3, [pc, #140]	@ (800a97c <xTaskResumeAll+0x12c>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d302      	bcc.n	800a8fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a8f8:	4b21      	ldr	r3, [pc, #132]	@ (800a980 <xTaskResumeAll+0x130>)
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a8fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a970 <xTaskResumeAll+0x120>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1cb      	bne.n	800a89e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a90c:	f000 fb6c 	bl	800afe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a910:	4b1c      	ldr	r3, [pc, #112]	@ (800a984 <xTaskResumeAll+0x134>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d010      	beq.n	800a93e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a91c:	f000 f846 	bl	800a9ac <xTaskIncrementTick>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a926:	4b16      	ldr	r3, [pc, #88]	@ (800a980 <xTaskResumeAll+0x130>)
 800a928:	2201      	movs	r2, #1
 800a92a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	3b01      	subs	r3, #1
 800a930:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d1f1      	bne.n	800a91c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800a938:	4b12      	ldr	r3, [pc, #72]	@ (800a984 <xTaskResumeAll+0x134>)
 800a93a:	2200      	movs	r2, #0
 800a93c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a93e:	4b10      	ldr	r3, [pc, #64]	@ (800a980 <xTaskResumeAll+0x130>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d009      	beq.n	800a95a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a946:	2301      	movs	r3, #1
 800a948:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a94a:	4b0f      	ldr	r3, [pc, #60]	@ (800a988 <xTaskResumeAll+0x138>)
 800a94c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	f3bf 8f4f 	dsb	sy
 800a956:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a95a:	f001 f8cf 	bl	800bafc <vPortExitCritical>

	return xAlreadyYielded;
 800a95e:	68bb      	ldr	r3, [r7, #8]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}
 800a968:	20001250 	.word	0x20001250
 800a96c:	20001228 	.word	0x20001228
 800a970:	200011e8 	.word	0x200011e8
 800a974:	20001230 	.word	0x20001230
 800a978:	20000d58 	.word	0x20000d58
 800a97c:	20000d54 	.word	0x20000d54
 800a980:	2000123c 	.word	0x2000123c
 800a984:	20001238 	.word	0x20001238
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a992:	4b05      	ldr	r3, [pc, #20]	@ (800a9a8 <xTaskGetTickCount+0x1c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a998:	687b      	ldr	r3, [r7, #4]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	2000122c 	.word	0x2000122c

0800a9ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9b6:	4b52      	ldr	r3, [pc, #328]	@ (800ab00 <xTaskIncrementTick+0x154>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	f040 808f 	bne.w	800aade <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a9c0:	4b50      	ldr	r3, [pc, #320]	@ (800ab04 <xTaskIncrementTick+0x158>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a9c8:	4a4e      	ldr	r2, [pc, #312]	@ (800ab04 <xTaskIncrementTick+0x158>)
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d121      	bne.n	800aa18 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a9d4:	4b4c      	ldr	r3, [pc, #304]	@ (800ab08 <xTaskIncrementTick+0x15c>)
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d00b      	beq.n	800a9f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e2:	f383 8811 	msr	BASEPRI, r3
 800a9e6:	f3bf 8f6f 	isb	sy
 800a9ea:	f3bf 8f4f 	dsb	sy
 800a9ee:	603b      	str	r3, [r7, #0]
}
 800a9f0:	bf00      	nop
 800a9f2:	bf00      	nop
 800a9f4:	e7fd      	b.n	800a9f2 <xTaskIncrementTick+0x46>
 800a9f6:	4b44      	ldr	r3, [pc, #272]	@ (800ab08 <xTaskIncrementTick+0x15c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	4b43      	ldr	r3, [pc, #268]	@ (800ab0c <xTaskIncrementTick+0x160>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a41      	ldr	r2, [pc, #260]	@ (800ab08 <xTaskIncrementTick+0x15c>)
 800aa02:	6013      	str	r3, [r2, #0]
 800aa04:	4a41      	ldr	r2, [pc, #260]	@ (800ab0c <xTaskIncrementTick+0x160>)
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	4b41      	ldr	r3, [pc, #260]	@ (800ab10 <xTaskIncrementTick+0x164>)
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	4a3f      	ldr	r2, [pc, #252]	@ (800ab10 <xTaskIncrementTick+0x164>)
 800aa12:	6013      	str	r3, [r2, #0]
 800aa14:	f000 fae8 	bl	800afe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aa18:	4b3e      	ldr	r3, [pc, #248]	@ (800ab14 <xTaskIncrementTick+0x168>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	693a      	ldr	r2, [r7, #16]
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d34e      	bcc.n	800aac0 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa22:	4b39      	ldr	r3, [pc, #228]	@ (800ab08 <xTaskIncrementTick+0x15c>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <xTaskIncrementTick+0x84>
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e000      	b.n	800aa32 <xTaskIncrementTick+0x86>
 800aa30:	2300      	movs	r3, #0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d004      	beq.n	800aa40 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa36:	4b37      	ldr	r3, [pc, #220]	@ (800ab14 <xTaskIncrementTick+0x168>)
 800aa38:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3c:	601a      	str	r2, [r3, #0]
					break;
 800aa3e:	e03f      	b.n	800aac0 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aa40:	4b31      	ldr	r3, [pc, #196]	@ (800ab08 <xTaskIncrementTick+0x15c>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	68db      	ldr	r3, [r3, #12]
 800aa48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d203      	bcs.n	800aa60 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800aa58:	4a2e      	ldr	r2, [pc, #184]	@ (800ab14 <xTaskIncrementTick+0x168>)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6013      	str	r3, [r2, #0]
						break;
 800aa5e:	e02f      	b.n	800aac0 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	3304      	adds	r3, #4
 800aa64:	4618      	mov	r0, r3
 800aa66:	f7fe ff69 	bl	800993c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d004      	beq.n	800aa7c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	3318      	adds	r3, #24
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe ff60 	bl	800993c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa80:	4b25      	ldr	r3, [pc, #148]	@ (800ab18 <xTaskIncrementTick+0x16c>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d903      	bls.n	800aa90 <xTaskIncrementTick+0xe4>
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa8c:	4a22      	ldr	r2, [pc, #136]	@ (800ab18 <xTaskIncrementTick+0x16c>)
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa94:	4613      	mov	r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	4413      	add	r3, r2
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	4a1f      	ldr	r2, [pc, #124]	@ (800ab1c <xTaskIncrementTick+0x170>)
 800aa9e:	441a      	add	r2, r3
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	3304      	adds	r3, #4
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	4610      	mov	r0, r2
 800aaa8:	f7fe feeb 	bl	8009882 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aaac:	68bb      	ldr	r3, [r7, #8]
 800aaae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aab0:	4b1b      	ldr	r3, [pc, #108]	@ (800ab20 <xTaskIncrementTick+0x174>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d3b3      	bcc.n	800aa22 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800aaba:	2301      	movs	r3, #1
 800aabc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aabe:	e7b0      	b.n	800aa22 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aac0:	4b17      	ldr	r3, [pc, #92]	@ (800ab20 <xTaskIncrementTick+0x174>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aac6:	4915      	ldr	r1, [pc, #84]	@ (800ab1c <xTaskIncrementTick+0x170>)
 800aac8:	4613      	mov	r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	009b      	lsls	r3, r3, #2
 800aad0:	440b      	add	r3, r1
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d907      	bls.n	800aae8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aad8:	2301      	movs	r3, #1
 800aada:	617b      	str	r3, [r7, #20]
 800aadc:	e004      	b.n	800aae8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aade:	4b11      	ldr	r3, [pc, #68]	@ (800ab24 <xTaskIncrementTick+0x178>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	3301      	adds	r3, #1
 800aae4:	4a0f      	ldr	r2, [pc, #60]	@ (800ab24 <xTaskIncrementTick+0x178>)
 800aae6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aae8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab28 <xTaskIncrementTick+0x17c>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d001      	beq.n	800aaf4 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aaf4:	697b      	ldr	r3, [r7, #20]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	20001250 	.word	0x20001250
 800ab04:	2000122c 	.word	0x2000122c
 800ab08:	200011e0 	.word	0x200011e0
 800ab0c:	200011e4 	.word	0x200011e4
 800ab10:	20001240 	.word	0x20001240
 800ab14:	20001248 	.word	0x20001248
 800ab18:	20001230 	.word	0x20001230
 800ab1c:	20000d58 	.word	0x20000d58
 800ab20:	20000d54 	.word	0x20000d54
 800ab24:	20001238 	.word	0x20001238
 800ab28:	2000123c 	.word	0x2000123c

0800ab2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ab32:	4b2b      	ldr	r3, [pc, #172]	@ (800abe0 <vTaskSwitchContext+0xb4>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ab3a:	4b2a      	ldr	r3, [pc, #168]	@ (800abe4 <vTaskSwitchContext+0xb8>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ab40:	e047      	b.n	800abd2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800ab42:	4b28      	ldr	r3, [pc, #160]	@ (800abe4 <vTaskSwitchContext+0xb8>)
 800ab44:	2200      	movs	r2, #0
 800ab46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ab48:	4b27      	ldr	r3, [pc, #156]	@ (800abe8 <vTaskSwitchContext+0xbc>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	e011      	b.n	800ab74 <vTaskSwitchContext+0x48>
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d10b      	bne.n	800ab6e <vTaskSwitchContext+0x42>
	__asm volatile
 800ab56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab5a:	f383 8811 	msr	BASEPRI, r3
 800ab5e:	f3bf 8f6f 	isb	sy
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	607b      	str	r3, [r7, #4]
}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	e7fd      	b.n	800ab6a <vTaskSwitchContext+0x3e>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3b01      	subs	r3, #1
 800ab72:	60fb      	str	r3, [r7, #12]
 800ab74:	491d      	ldr	r1, [pc, #116]	@ (800abec <vTaskSwitchContext+0xc0>)
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	009b      	lsls	r3, r3, #2
 800ab7c:	4413      	add	r3, r2
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	440b      	add	r3, r1
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d0e3      	beq.n	800ab50 <vTaskSwitchContext+0x24>
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4a16      	ldr	r2, [pc, #88]	@ (800abec <vTaskSwitchContext+0xc0>)
 800ab94:	4413      	add	r3, r2
 800ab96:	60bb      	str	r3, [r7, #8]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	685b      	ldr	r3, [r3, #4]
 800ab9c:	685a      	ldr	r2, [r3, #4]
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	605a      	str	r2, [r3, #4]
 800aba2:	68bb      	ldr	r3, [r7, #8]
 800aba4:	685a      	ldr	r2, [r3, #4]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	3308      	adds	r3, #8
 800abaa:	429a      	cmp	r2, r3
 800abac:	d104      	bne.n	800abb8 <vTaskSwitchContext+0x8c>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	605a      	str	r2, [r3, #4]
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	4a0c      	ldr	r2, [pc, #48]	@ (800abf0 <vTaskSwitchContext+0xc4>)
 800abc0:	6013      	str	r3, [r2, #0]
 800abc2:	4a09      	ldr	r2, [pc, #36]	@ (800abe8 <vTaskSwitchContext+0xbc>)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800abc8:	4b09      	ldr	r3, [pc, #36]	@ (800abf0 <vTaskSwitchContext+0xc4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	3354      	adds	r3, #84	@ 0x54
 800abce:	4a09      	ldr	r2, [pc, #36]	@ (800abf4 <vTaskSwitchContext+0xc8>)
 800abd0:	6013      	str	r3, [r2, #0]
}
 800abd2:	bf00      	nop
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	20001250 	.word	0x20001250
 800abe4:	2000123c 	.word	0x2000123c
 800abe8:	20001230 	.word	0x20001230
 800abec:	20000d58 	.word	0x20000d58
 800abf0:	20000d54 	.word	0x20000d54
 800abf4:	20000028 	.word	0x20000028

0800abf8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
 800ac00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10b      	bne.n	800ac20 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	60fb      	str	r3, [r7, #12]
}
 800ac1a:	bf00      	nop
 800ac1c:	bf00      	nop
 800ac1e:	e7fd      	b.n	800ac1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac20:	4b07      	ldr	r3, [pc, #28]	@ (800ac40 <vTaskPlaceOnEventList+0x48>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3318      	adds	r3, #24
 800ac26:	4619      	mov	r1, r3
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f7fe fe4e 	bl	80098ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ac2e:	2101      	movs	r1, #1
 800ac30:	6838      	ldr	r0, [r7, #0]
 800ac32:	f000 fa8d 	bl	800b150 <prvAddCurrentTaskToDelayedList>
}
 800ac36:	bf00      	nop
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	20000d54 	.word	0x20000d54

0800ac44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b086      	sub	sp, #24
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	60f8      	str	r0, [r7, #12]
 800ac4c:	60b9      	str	r1, [r7, #8]
 800ac4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10b      	bne.n	800ac6e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	617b      	str	r3, [r7, #20]
}
 800ac68:	bf00      	nop
 800ac6a:	bf00      	nop
 800ac6c:	e7fd      	b.n	800ac6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ac6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ac98 <vTaskPlaceOnEventListRestricted+0x54>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3318      	adds	r3, #24
 800ac74:	4619      	mov	r1, r3
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f7fe fe03 	bl	8009882 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d002      	beq.n	800ac88 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ac82:	f04f 33ff 	mov.w	r3, #4294967295
 800ac86:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	68b8      	ldr	r0, [r7, #8]
 800ac8c:	f000 fa60 	bl	800b150 <prvAddCurrentTaskToDelayedList>
	}
 800ac90:	bf00      	nop
 800ac92:	3718      	adds	r7, #24
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}
 800ac98:	20000d54 	.word	0x20000d54

0800ac9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b086      	sub	sp, #24
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10b      	bne.n	800acca <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800acb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb6:	f383 8811 	msr	BASEPRI, r3
 800acba:	f3bf 8f6f 	isb	sy
 800acbe:	f3bf 8f4f 	dsb	sy
 800acc2:	60fb      	str	r3, [r7, #12]
}
 800acc4:	bf00      	nop
 800acc6:	bf00      	nop
 800acc8:	e7fd      	b.n	800acc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	3318      	adds	r3, #24
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fe34 	bl	800993c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800acd4:	4b1d      	ldr	r3, [pc, #116]	@ (800ad4c <xTaskRemoveFromEventList+0xb0>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d11d      	bne.n	800ad18 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	3304      	adds	r3, #4
 800ace0:	4618      	mov	r0, r3
 800ace2:	f7fe fe2b 	bl	800993c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acea:	4b19      	ldr	r3, [pc, #100]	@ (800ad50 <xTaskRemoveFromEventList+0xb4>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d903      	bls.n	800acfa <xTaskRemoveFromEventList+0x5e>
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acf6:	4a16      	ldr	r2, [pc, #88]	@ (800ad50 <xTaskRemoveFromEventList+0xb4>)
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acfe:	4613      	mov	r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	4413      	add	r3, r2
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4a13      	ldr	r2, [pc, #76]	@ (800ad54 <xTaskRemoveFromEventList+0xb8>)
 800ad08:	441a      	add	r2, r3
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	3304      	adds	r3, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4610      	mov	r0, r2
 800ad12:	f7fe fdb6 	bl	8009882 <vListInsertEnd>
 800ad16:	e005      	b.n	800ad24 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	3318      	adds	r3, #24
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	480e      	ldr	r0, [pc, #56]	@ (800ad58 <xTaskRemoveFromEventList+0xbc>)
 800ad20:	f7fe fdaf 	bl	8009882 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad28:	4b0c      	ldr	r3, [pc, #48]	@ (800ad5c <xTaskRemoveFromEventList+0xc0>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d905      	bls.n	800ad3e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ad32:	2301      	movs	r3, #1
 800ad34:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ad36:	4b0a      	ldr	r3, [pc, #40]	@ (800ad60 <xTaskRemoveFromEventList+0xc4>)
 800ad38:	2201      	movs	r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]
 800ad3c:	e001      	b.n	800ad42 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ad42:	697b      	ldr	r3, [r7, #20]
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3718      	adds	r7, #24
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	20001250 	.word	0x20001250
 800ad50:	20001230 	.word	0x20001230
 800ad54:	20000d58 	.word	0x20000d58
 800ad58:	200011e8 	.word	0x200011e8
 800ad5c:	20000d54 	.word	0x20000d54
 800ad60:	2000123c 	.word	0x2000123c

0800ad64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ad64:	b480      	push	{r7}
 800ad66:	b083      	sub	sp, #12
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ad6c:	4b06      	ldr	r3, [pc, #24]	@ (800ad88 <vTaskInternalSetTimeOutState+0x24>)
 800ad6e:	681a      	ldr	r2, [r3, #0]
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ad74:	4b05      	ldr	r3, [pc, #20]	@ (800ad8c <vTaskInternalSetTimeOutState+0x28>)
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	605a      	str	r2, [r3, #4]
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	20001240 	.word	0x20001240
 800ad8c:	2000122c 	.word	0x2000122c

0800ad90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b088      	sub	sp, #32
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10b      	bne.n	800adb8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	613b      	str	r3, [r7, #16]
}
 800adb2:	bf00      	nop
 800adb4:	bf00      	nop
 800adb6:	e7fd      	b.n	800adb4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d10b      	bne.n	800add6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	60fb      	str	r3, [r7, #12]
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	e7fd      	b.n	800add2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800add6:	f000 fe5f 	bl	800ba98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800adda:	4b1d      	ldr	r3, [pc, #116]	@ (800ae50 <xTaskCheckForTimeOut+0xc0>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf2:	d102      	bne.n	800adfa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800adf4:	2300      	movs	r3, #0
 800adf6:	61fb      	str	r3, [r7, #28]
 800adf8:	e023      	b.n	800ae42 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681a      	ldr	r2, [r3, #0]
 800adfe:	4b15      	ldr	r3, [pc, #84]	@ (800ae54 <xTaskCheckForTimeOut+0xc4>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d007      	beq.n	800ae16 <xTaskCheckForTimeOut+0x86>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	69ba      	ldr	r2, [r7, #24]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d302      	bcc.n	800ae16 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae10:	2301      	movs	r3, #1
 800ae12:	61fb      	str	r3, [r7, #28]
 800ae14:	e015      	b.n	800ae42 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	697a      	ldr	r2, [r7, #20]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d20b      	bcs.n	800ae38 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	1ad2      	subs	r2, r2, r3
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7ff ff99 	bl	800ad64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ae32:	2300      	movs	r3, #0
 800ae34:	61fb      	str	r3, [r7, #28]
 800ae36:	e004      	b.n	800ae42 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ae42:	f000 fe5b 	bl	800bafc <vPortExitCritical>

	return xReturn;
 800ae46:	69fb      	ldr	r3, [r7, #28]
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3720      	adds	r7, #32
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}
 800ae50:	2000122c 	.word	0x2000122c
 800ae54:	20001240 	.word	0x20001240

0800ae58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ae5c:	4b03      	ldr	r3, [pc, #12]	@ (800ae6c <vTaskMissedYield+0x14>)
 800ae5e:	2201      	movs	r2, #1
 800ae60:	601a      	str	r2, [r3, #0]
}
 800ae62:	bf00      	nop
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr
 800ae6c:	2000123c 	.word	0x2000123c

0800ae70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ae78:	f000 f852 	bl	800af20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae7c:	4b06      	ldr	r3, [pc, #24]	@ (800ae98 <prvIdleTask+0x28>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d9f9      	bls.n	800ae78 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae84:	4b05      	ldr	r3, [pc, #20]	@ (800ae9c <prvIdleTask+0x2c>)
 800ae86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae8a:	601a      	str	r2, [r3, #0]
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae94:	e7f0      	b.n	800ae78 <prvIdleTask+0x8>
 800ae96:	bf00      	nop
 800ae98:	20000d58 	.word	0x20000d58
 800ae9c:	e000ed04 	.word	0xe000ed04

0800aea0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]
 800aeaa:	e00c      	b.n	800aec6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	4613      	mov	r3, r2
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	4413      	add	r3, r2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4a12      	ldr	r2, [pc, #72]	@ (800af00 <prvInitialiseTaskLists+0x60>)
 800aeb8:	4413      	add	r3, r2
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fcb4 	bl	8009828 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	3301      	adds	r3, #1
 800aec4:	607b      	str	r3, [r7, #4]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b37      	cmp	r3, #55	@ 0x37
 800aeca:	d9ef      	bls.n	800aeac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aecc:	480d      	ldr	r0, [pc, #52]	@ (800af04 <prvInitialiseTaskLists+0x64>)
 800aece:	f7fe fcab 	bl	8009828 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aed2:	480d      	ldr	r0, [pc, #52]	@ (800af08 <prvInitialiseTaskLists+0x68>)
 800aed4:	f7fe fca8 	bl	8009828 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aed8:	480c      	ldr	r0, [pc, #48]	@ (800af0c <prvInitialiseTaskLists+0x6c>)
 800aeda:	f7fe fca5 	bl	8009828 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aede:	480c      	ldr	r0, [pc, #48]	@ (800af10 <prvInitialiseTaskLists+0x70>)
 800aee0:	f7fe fca2 	bl	8009828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aee4:	480b      	ldr	r0, [pc, #44]	@ (800af14 <prvInitialiseTaskLists+0x74>)
 800aee6:	f7fe fc9f 	bl	8009828 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aeea:	4b0b      	ldr	r3, [pc, #44]	@ (800af18 <prvInitialiseTaskLists+0x78>)
 800aeec:	4a05      	ldr	r2, [pc, #20]	@ (800af04 <prvInitialiseTaskLists+0x64>)
 800aeee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aef0:	4b0a      	ldr	r3, [pc, #40]	@ (800af1c <prvInitialiseTaskLists+0x7c>)
 800aef2:	4a05      	ldr	r2, [pc, #20]	@ (800af08 <prvInitialiseTaskLists+0x68>)
 800aef4:	601a      	str	r2, [r3, #0]
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20000d58 	.word	0x20000d58
 800af04:	200011b8 	.word	0x200011b8
 800af08:	200011cc 	.word	0x200011cc
 800af0c:	200011e8 	.word	0x200011e8
 800af10:	200011fc 	.word	0x200011fc
 800af14:	20001214 	.word	0x20001214
 800af18:	200011e0 	.word	0x200011e0
 800af1c:	200011e4 	.word	0x200011e4

0800af20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b082      	sub	sp, #8
 800af24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af26:	e019      	b.n	800af5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800af28:	f000 fdb6 	bl	800ba98 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800af2c:	4b10      	ldr	r3, [pc, #64]	@ (800af70 <prvCheckTasksWaitingTermination+0x50>)
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	3304      	adds	r3, #4
 800af38:	4618      	mov	r0, r3
 800af3a:	f7fe fcff 	bl	800993c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af3e:	4b0d      	ldr	r3, [pc, #52]	@ (800af74 <prvCheckTasksWaitingTermination+0x54>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3b01      	subs	r3, #1
 800af44:	4a0b      	ldr	r2, [pc, #44]	@ (800af74 <prvCheckTasksWaitingTermination+0x54>)
 800af46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af48:	4b0b      	ldr	r3, [pc, #44]	@ (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	3b01      	subs	r3, #1
 800af4e:	4a0a      	ldr	r2, [pc, #40]	@ (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800af52:	f000 fdd3 	bl	800bafc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f810 	bl	800af7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af5c:	4b06      	ldr	r3, [pc, #24]	@ (800af78 <prvCheckTasksWaitingTermination+0x58>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1e1      	bne.n	800af28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800af64:	bf00      	nop
 800af66:	bf00      	nop
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	200011fc 	.word	0x200011fc
 800af74:	20001228 	.word	0x20001228
 800af78:	20001210 	.word	0x20001210

0800af7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	3354      	adds	r3, #84	@ 0x54
 800af88:	4618      	mov	r0, r3
 800af8a:	f002 f917 	bl	800d1bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800af94:	2b00      	cmp	r3, #0
 800af96:	d108      	bne.n	800afaa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af9c:	4618      	mov	r0, r3
 800af9e:	f000 ff65 	bl	800be6c <vPortFree>
				vPortFree( pxTCB );
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f000 ff62 	bl	800be6c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800afa8:	e019      	b.n	800afde <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d103      	bne.n	800afbc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 ff59 	bl	800be6c <vPortFree>
	}
 800afba:	e010      	b.n	800afde <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d00b      	beq.n	800afde <prvDeleteTCB+0x62>
	__asm volatile
 800afc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afca:	f383 8811 	msr	BASEPRI, r3
 800afce:	f3bf 8f6f 	isb	sy
 800afd2:	f3bf 8f4f 	dsb	sy
 800afd6:	60fb      	str	r3, [r7, #12]
}
 800afd8:	bf00      	nop
 800afda:	bf00      	nop
 800afdc:	e7fd      	b.n	800afda <prvDeleteTCB+0x5e>
	}
 800afde:	bf00      	nop
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afee:	4b0f      	ldr	r3, [pc, #60]	@ (800b02c <prvResetNextTaskUnblockTime+0x44>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <prvResetNextTaskUnblockTime+0x14>
 800aff8:	2301      	movs	r3, #1
 800affa:	e000      	b.n	800affe <prvResetNextTaskUnblockTime+0x16>
 800affc:	2300      	movs	r3, #0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d004      	beq.n	800b00c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b002:	4b0b      	ldr	r3, [pc, #44]	@ (800b030 <prvResetNextTaskUnblockTime+0x48>)
 800b004:	f04f 32ff 	mov.w	r2, #4294967295
 800b008:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b00a:	e008      	b.n	800b01e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b00c:	4b07      	ldr	r3, [pc, #28]	@ (800b02c <prvResetNextTaskUnblockTime+0x44>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	68db      	ldr	r3, [r3, #12]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	4a05      	ldr	r2, [pc, #20]	@ (800b030 <prvResetNextTaskUnblockTime+0x48>)
 800b01c:	6013      	str	r3, [r2, #0]
}
 800b01e:	bf00      	nop
 800b020:	370c      	adds	r7, #12
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	200011e0 	.word	0x200011e0
 800b030:	20001248 	.word	0x20001248

0800b034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b03a:	4b0b      	ldr	r3, [pc, #44]	@ (800b068 <xTaskGetSchedulerState+0x34>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d102      	bne.n	800b048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b042:	2301      	movs	r3, #1
 800b044:	607b      	str	r3, [r7, #4]
 800b046:	e008      	b.n	800b05a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b048:	4b08      	ldr	r3, [pc, #32]	@ (800b06c <xTaskGetSchedulerState+0x38>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d102      	bne.n	800b056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b050:	2302      	movs	r3, #2
 800b052:	607b      	str	r3, [r7, #4]
 800b054:	e001      	b.n	800b05a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b056:	2300      	movs	r3, #0
 800b058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b05a:	687b      	ldr	r3, [r7, #4]
	}
 800b05c:	4618      	mov	r0, r3
 800b05e:	370c      	adds	r7, #12
 800b060:	46bd      	mov	sp, r7
 800b062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b066:	4770      	bx	lr
 800b068:	20001234 	.word	0x20001234
 800b06c:	20001250 	.word	0x20001250

0800b070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b070:	b580      	push	{r7, lr}
 800b072:	b086      	sub	sp, #24
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b07c:	2300      	movs	r3, #0
 800b07e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d058      	beq.n	800b138 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b086:	4b2f      	ldr	r3, [pc, #188]	@ (800b144 <xTaskPriorityDisinherit+0xd4>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d00b      	beq.n	800b0a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b094:	f383 8811 	msr	BASEPRI, r3
 800b098:	f3bf 8f6f 	isb	sy
 800b09c:	f3bf 8f4f 	dsb	sy
 800b0a0:	60fb      	str	r3, [r7, #12]
}
 800b0a2:	bf00      	nop
 800b0a4:	bf00      	nop
 800b0a6:	e7fd      	b.n	800b0a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d10b      	bne.n	800b0c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	60bb      	str	r3, [r7, #8]
}
 800b0c2:	bf00      	nop
 800b0c4:	bf00      	nop
 800b0c6:	e7fd      	b.n	800b0c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0cc:	1e5a      	subs	r2, r3, #1
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d02c      	beq.n	800b138 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d128      	bne.n	800b138 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fc26 	bl	800993c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b108:	4b0f      	ldr	r3, [pc, #60]	@ (800b148 <xTaskPriorityDisinherit+0xd8>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d903      	bls.n	800b118 <xTaskPriorityDisinherit+0xa8>
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b114:	4a0c      	ldr	r2, [pc, #48]	@ (800b148 <xTaskPriorityDisinherit+0xd8>)
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b11c:	4613      	mov	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4413      	add	r3, r2
 800b122:	009b      	lsls	r3, r3, #2
 800b124:	4a09      	ldr	r2, [pc, #36]	@ (800b14c <xTaskPriorityDisinherit+0xdc>)
 800b126:	441a      	add	r2, r3
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4619      	mov	r1, r3
 800b12e:	4610      	mov	r0, r2
 800b130:	f7fe fba7 	bl	8009882 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b134:	2301      	movs	r3, #1
 800b136:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b138:	697b      	ldr	r3, [r7, #20]
	}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20000d54 	.word	0x20000d54
 800b148:	20001230 	.word	0x20001230
 800b14c:	20000d58 	.word	0x20000d58

0800b150 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b15a:	4b21      	ldr	r3, [pc, #132]	@ (800b1e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b160:	4b20      	ldr	r3, [pc, #128]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	3304      	adds	r3, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f7fe fbe8 	bl	800993c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b172:	d10a      	bne.n	800b18a <prvAddCurrentTaskToDelayedList+0x3a>
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d007      	beq.n	800b18a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b17a:	4b1a      	ldr	r3, [pc, #104]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3304      	adds	r3, #4
 800b180:	4619      	mov	r1, r3
 800b182:	4819      	ldr	r0, [pc, #100]	@ (800b1e8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b184:	f7fe fb7d 	bl	8009882 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b188:	e026      	b.n	800b1d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b18a:	68fa      	ldr	r2, [r7, #12]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4413      	add	r3, r2
 800b190:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b192:	4b14      	ldr	r3, [pc, #80]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d209      	bcs.n	800b1b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1a2:	4b12      	ldr	r3, [pc, #72]	@ (800b1ec <prvAddCurrentTaskToDelayedList+0x9c>)
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3304      	adds	r3, #4
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4610      	mov	r0, r2
 800b1b0:	f7fe fb8b 	bl	80098ca <vListInsert>
}
 800b1b4:	e010      	b.n	800b1d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b1f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	4b0a      	ldr	r3, [pc, #40]	@ (800b1e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	3304      	adds	r3, #4
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	4610      	mov	r0, r2
 800b1c4:	f7fe fb81 	bl	80098ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	68ba      	ldr	r2, [r7, #8]
 800b1ce:	429a      	cmp	r2, r3
 800b1d0:	d202      	bcs.n	800b1d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b1d2:	4a08      	ldr	r2, [pc, #32]	@ (800b1f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	6013      	str	r3, [r2, #0]
}
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	2000122c 	.word	0x2000122c
 800b1e4:	20000d54 	.word	0x20000d54
 800b1e8:	20001214 	.word	0x20001214
 800b1ec:	200011e4 	.word	0x200011e4
 800b1f0:	200011e0 	.word	0x200011e0
 800b1f4:	20001248 	.word	0x20001248

0800b1f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b08a      	sub	sp, #40	@ 0x28
 800b1fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b202:	f000 fad9 	bl	800b7b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b206:	4b1d      	ldr	r3, [pc, #116]	@ (800b27c <xTimerCreateTimerTask+0x84>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d021      	beq.n	800b252 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b20e:	2300      	movs	r3, #0
 800b210:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b212:	2300      	movs	r3, #0
 800b214:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b216:	1d3a      	adds	r2, r7, #4
 800b218:	f107 0108 	add.w	r1, r7, #8
 800b21c:	f107 030c 	add.w	r3, r7, #12
 800b220:	4618      	mov	r0, r3
 800b222:	f7fe fae7 	bl	80097f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b226:	6879      	ldr	r1, [r7, #4]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	9202      	str	r2, [sp, #8]
 800b22e:	9301      	str	r3, [sp, #4]
 800b230:	2306      	movs	r3, #6
 800b232:	9300      	str	r3, [sp, #0]
 800b234:	2300      	movs	r3, #0
 800b236:	460a      	mov	r2, r1
 800b238:	4911      	ldr	r1, [pc, #68]	@ (800b280 <xTimerCreateTimerTask+0x88>)
 800b23a:	4812      	ldr	r0, [pc, #72]	@ (800b284 <xTimerCreateTimerTask+0x8c>)
 800b23c:	f7ff f8a0 	bl	800a380 <xTaskCreateStatic>
 800b240:	4603      	mov	r3, r0
 800b242:	4a11      	ldr	r2, [pc, #68]	@ (800b288 <xTimerCreateTimerTask+0x90>)
 800b244:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b246:	4b10      	ldr	r3, [pc, #64]	@ (800b288 <xTimerCreateTimerTask+0x90>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d001      	beq.n	800b252 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b24e:	2301      	movs	r3, #1
 800b250:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d10b      	bne.n	800b270 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b25c:	f383 8811 	msr	BASEPRI, r3
 800b260:	f3bf 8f6f 	isb	sy
 800b264:	f3bf 8f4f 	dsb	sy
 800b268:	613b      	str	r3, [r7, #16]
}
 800b26a:	bf00      	nop
 800b26c:	bf00      	nop
 800b26e:	e7fd      	b.n	800b26c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b270:	697b      	ldr	r3, [r7, #20]
}
 800b272:	4618      	mov	r0, r3
 800b274:	3718      	adds	r7, #24
 800b276:	46bd      	mov	sp, r7
 800b278:	bd80      	pop	{r7, pc}
 800b27a:	bf00      	nop
 800b27c:	20001284 	.word	0x20001284
 800b280:	0801118c 	.word	0x0801118c
 800b284:	0800b3ad 	.word	0x0800b3ad
 800b288:	20001288 	.word	0x20001288

0800b28c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08a      	sub	sp, #40	@ 0x28
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
 800b298:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b29a:	2300      	movs	r3, #0
 800b29c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d10b      	bne.n	800b2bc <xTimerGenericCommand+0x30>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	623b      	str	r3, [r7, #32]
}
 800b2b6:	bf00      	nop
 800b2b8:	bf00      	nop
 800b2ba:	e7fd      	b.n	800b2b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b2bc:	4b19      	ldr	r3, [pc, #100]	@ (800b324 <xTimerGenericCommand+0x98>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d02a      	beq.n	800b31a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2b05      	cmp	r3, #5
 800b2d4:	dc18      	bgt.n	800b308 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b2d6:	f7ff fead 	bl	800b034 <xTaskGetSchedulerState>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d109      	bne.n	800b2f4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b2e0:	4b10      	ldr	r3, [pc, #64]	@ (800b324 <xTimerGenericCommand+0x98>)
 800b2e2:	6818      	ldr	r0, [r3, #0]
 800b2e4:	f107 0110 	add.w	r1, r7, #16
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ec:	f7fe fc5a 	bl	8009ba4 <xQueueGenericSend>
 800b2f0:	6278      	str	r0, [r7, #36]	@ 0x24
 800b2f2:	e012      	b.n	800b31a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b2f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b324 <xTimerGenericCommand+0x98>)
 800b2f6:	6818      	ldr	r0, [r3, #0]
 800b2f8:	f107 0110 	add.w	r1, r7, #16
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	2200      	movs	r2, #0
 800b300:	f7fe fc50 	bl	8009ba4 <xQueueGenericSend>
 800b304:	6278      	str	r0, [r7, #36]	@ 0x24
 800b306:	e008      	b.n	800b31a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b308:	4b06      	ldr	r3, [pc, #24]	@ (800b324 <xTimerGenericCommand+0x98>)
 800b30a:	6818      	ldr	r0, [r3, #0]
 800b30c:	f107 0110 	add.w	r1, r7, #16
 800b310:	2300      	movs	r3, #0
 800b312:	683a      	ldr	r2, [r7, #0]
 800b314:	f7fe fd48 	bl	8009da8 <xQueueGenericSendFromISR>
 800b318:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3728      	adds	r7, #40	@ 0x28
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}
 800b324:	20001284 	.word	0x20001284

0800b328 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b088      	sub	sp, #32
 800b32c:	af02      	add	r7, sp, #8
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b332:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a8 <prvProcessExpiredTimer+0x80>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	68db      	ldr	r3, [r3, #12]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	3304      	adds	r3, #4
 800b340:	4618      	mov	r0, r3
 800b342:	f7fe fafb 	bl	800993c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	69db      	ldr	r3, [r3, #28]
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d123      	bne.n	800b396 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	699a      	ldr	r2, [r3, #24]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	18d1      	adds	r1, r2, r3
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	683a      	ldr	r2, [r7, #0]
 800b35a:	6978      	ldr	r0, [r7, #20]
 800b35c:	f000 f8cc 	bl	800b4f8 <prvInsertTimerInActiveList>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d017      	beq.n	800b396 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b366:	2300      	movs	r3, #0
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	2300      	movs	r3, #0
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	2100      	movs	r1, #0
 800b370:	6978      	ldr	r0, [r7, #20]
 800b372:	f7ff ff8b 	bl	800b28c <xTimerGenericCommand>
 800b376:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10b      	bne.n	800b396 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 800b37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	60fb      	str	r3, [r7, #12]
}
 800b390:	bf00      	nop
 800b392:	bf00      	nop
 800b394:	e7fd      	b.n	800b392 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39a:	6978      	ldr	r0, [r7, #20]
 800b39c:	4798      	blx	r3
}
 800b39e:	bf00      	nop
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	2000127c 	.word	0x2000127c

0800b3ac <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3b4:	f107 0308 	add.w	r3, r7, #8
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f000 f859 	bl	800b470 <prvGetNextExpireTime>
 800b3be:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 f805 	bl	800b3d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b3ca:	f000 f8d7 	bl	800b57c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b3ce:	bf00      	nop
 800b3d0:	e7f0      	b.n	800b3b4 <prvTimerTask+0x8>
	...

0800b3d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b3de:	f7ff fa29 	bl	800a834 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b3e2:	f107 0308 	add.w	r3, r7, #8
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f000 f866 	bl	800b4b8 <prvSampleTimeNow>
 800b3ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d130      	bne.n	800b456 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d10a      	bne.n	800b410 <prvProcessTimerOrBlockTask+0x3c>
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d806      	bhi.n	800b410 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b402:	f7ff fa25 	bl	800a850 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b406:	68f9      	ldr	r1, [r7, #12]
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff ff8d 	bl	800b328 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b40e:	e024      	b.n	800b45a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d008      	beq.n	800b428 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b416:	4b13      	ldr	r3, [pc, #76]	@ (800b464 <prvProcessTimerOrBlockTask+0x90>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	bf0c      	ite	eq
 800b420:	2301      	moveq	r3, #1
 800b422:	2300      	movne	r3, #0
 800b424:	b2db      	uxtb	r3, r3
 800b426:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b428:	4b0f      	ldr	r3, [pc, #60]	@ (800b468 <prvProcessTimerOrBlockTask+0x94>)
 800b42a:	6818      	ldr	r0, [r3, #0]
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	683a      	ldr	r2, [r7, #0]
 800b434:	4619      	mov	r1, r3
 800b436:	f7fe ff6f 	bl	800a318 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b43a:	f7ff fa09 	bl	800a850 <xTaskResumeAll>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d10a      	bne.n	800b45a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b444:	4b09      	ldr	r3, [pc, #36]	@ (800b46c <prvProcessTimerOrBlockTask+0x98>)
 800b446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	f3bf 8f6f 	isb	sy
}
 800b454:	e001      	b.n	800b45a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b456:	f7ff f9fb 	bl	800a850 <xTaskResumeAll>
}
 800b45a:	bf00      	nop
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	20001280 	.word	0x20001280
 800b468:	20001284 	.word	0x20001284
 800b46c:	e000ed04 	.word	0xe000ed04

0800b470 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b470:	b480      	push	{r7}
 800b472:	b085      	sub	sp, #20
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b478:	4b0e      	ldr	r3, [pc, #56]	@ (800b4b4 <prvGetNextExpireTime+0x44>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	bf0c      	ite	eq
 800b482:	2301      	moveq	r3, #1
 800b484:	2300      	movne	r3, #0
 800b486:	b2db      	uxtb	r3, r3
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d105      	bne.n	800b4a2 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b496:	4b07      	ldr	r3, [pc, #28]	@ (800b4b4 <prvGetNextExpireTime+0x44>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68db      	ldr	r3, [r3, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	60fb      	str	r3, [r7, #12]
 800b4a0:	e001      	b.n	800b4a6 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3714      	adds	r7, #20
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr
 800b4b4:	2000127c 	.word	0x2000127c

0800b4b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b4c0:	f7ff fa64 	bl	800a98c <xTaskGetTickCount>
 800b4c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b4c6:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f4 <prvSampleTimeNow+0x3c>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68fa      	ldr	r2, [r7, #12]
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d205      	bcs.n	800b4dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b4d0:	f000 f910 	bl	800b6f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	601a      	str	r2, [r3, #0]
 800b4da:	e002      	b.n	800b4e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b4e2:	4a04      	ldr	r2, [pc, #16]	@ (800b4f4 <prvSampleTimeNow+0x3c>)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3710      	adds	r7, #16
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	2000128c 	.word	0x2000128c

0800b4f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
 800b504:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b506:	2300      	movs	r3, #0
 800b508:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	68ba      	ldr	r2, [r7, #8]
 800b50e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d812      	bhi.n	800b544 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b51e:	687a      	ldr	r2, [r7, #4]
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	1ad2      	subs	r2, r2, r3
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	699b      	ldr	r3, [r3, #24]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d302      	bcc.n	800b532 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b52c:	2301      	movs	r3, #1
 800b52e:	617b      	str	r3, [r7, #20]
 800b530:	e01b      	b.n	800b56a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b532:	4b10      	ldr	r3, [pc, #64]	@ (800b574 <prvInsertTimerInActiveList+0x7c>)
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3304      	adds	r3, #4
 800b53a:	4619      	mov	r1, r3
 800b53c:	4610      	mov	r0, r2
 800b53e:	f7fe f9c4 	bl	80098ca <vListInsert>
 800b542:	e012      	b.n	800b56a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d206      	bcs.n	800b55a <prvInsertTimerInActiveList+0x62>
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	429a      	cmp	r2, r3
 800b552:	d302      	bcc.n	800b55a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b554:	2301      	movs	r3, #1
 800b556:	617b      	str	r3, [r7, #20]
 800b558:	e007      	b.n	800b56a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b55a:	4b07      	ldr	r3, [pc, #28]	@ (800b578 <prvInsertTimerInActiveList+0x80>)
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3304      	adds	r3, #4
 800b562:	4619      	mov	r1, r3
 800b564:	4610      	mov	r0, r2
 800b566:	f7fe f9b0 	bl	80098ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b56a:	697b      	ldr	r3, [r7, #20]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	20001280 	.word	0x20001280
 800b578:	2000127c 	.word	0x2000127c

0800b57c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b08e      	sub	sp, #56	@ 0x38
 800b580:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b582:	e0a5      	b.n	800b6d0 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	da19      	bge.n	800b5be <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b58a:	1d3b      	adds	r3, r7, #4
 800b58c:	3304      	adds	r3, #4
 800b58e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b592:	2b00      	cmp	r3, #0
 800b594:	d10b      	bne.n	800b5ae <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59a:	f383 8811 	msr	BASEPRI, r3
 800b59e:	f3bf 8f6f 	isb	sy
 800b5a2:	f3bf 8f4f 	dsb	sy
 800b5a6:	61fb      	str	r3, [r7, #28]
}
 800b5a8:	bf00      	nop
 800b5aa:	bf00      	nop
 800b5ac:	e7fd      	b.n	800b5aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5b4:	6850      	ldr	r0, [r2, #4]
 800b5b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b5b8:	6892      	ldr	r2, [r2, #8]
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f2c0 8085 	blt.w	800b6d0 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5cc:	695b      	ldr	r3, [r3, #20]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d004      	beq.n	800b5dc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d4:	3304      	adds	r3, #4
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7fe f9b0 	bl	800993c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b5dc:	463b      	mov	r3, r7
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff ff6a 	bl	800b4b8 <prvSampleTimeNow>
 800b5e4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2b09      	cmp	r3, #9
 800b5ea:	d86c      	bhi.n	800b6c6 <prvProcessReceivedCommands+0x14a>
 800b5ec:	a201      	add	r2, pc, #4	@ (adr r2, 800b5f4 <prvProcessReceivedCommands+0x78>)
 800b5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5f2:	bf00      	nop
 800b5f4:	0800b61d 	.word	0x0800b61d
 800b5f8:	0800b61d 	.word	0x0800b61d
 800b5fc:	0800b61d 	.word	0x0800b61d
 800b600:	0800b6c7 	.word	0x0800b6c7
 800b604:	0800b67b 	.word	0x0800b67b
 800b608:	0800b6b5 	.word	0x0800b6b5
 800b60c:	0800b61d 	.word	0x0800b61d
 800b610:	0800b61d 	.word	0x0800b61d
 800b614:	0800b6c7 	.word	0x0800b6c7
 800b618:	0800b67b 	.word	0x0800b67b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b620:	699b      	ldr	r3, [r3, #24]
 800b622:	18d1      	adds	r1, r2, r3
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b628:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b62a:	f7ff ff65 	bl	800b4f8 <prvInsertTimerInActiveList>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	d04a      	beq.n	800b6ca <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b63a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b63e:	69db      	ldr	r3, [r3, #28]
 800b640:	2b01      	cmp	r3, #1
 800b642:	d142      	bne.n	800b6ca <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	441a      	add	r2, r3
 800b64c:	2300      	movs	r3, #0
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	2300      	movs	r3, #0
 800b652:	2100      	movs	r1, #0
 800b654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b656:	f7ff fe19 	bl	800b28c <xTimerGenericCommand>
 800b65a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b65c:	6a3b      	ldr	r3, [r7, #32]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d133      	bne.n	800b6ca <prvProcessReceivedCommands+0x14e>
	__asm volatile
 800b662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b666:	f383 8811 	msr	BASEPRI, r3
 800b66a:	f3bf 8f6f 	isb	sy
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	61bb      	str	r3, [r7, #24]
}
 800b674:	bf00      	nop
 800b676:	bf00      	nop
 800b678:	e7fd      	b.n	800b676 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d10b      	bne.n	800b6a0 <prvProcessReceivedCommands+0x124>
	__asm volatile
 800b688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b68c:	f383 8811 	msr	BASEPRI, r3
 800b690:	f3bf 8f6f 	isb	sy
 800b694:	f3bf 8f4f 	dsb	sy
 800b698:	617b      	str	r3, [r7, #20]
}
 800b69a:	bf00      	nop
 800b69c:	bf00      	nop
 800b69e:	e7fd      	b.n	800b69c <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a2:	699a      	ldr	r2, [r3, #24]
 800b6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a6:	18d1      	adds	r1, r2, r3
 800b6a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6ae:	f7ff ff23 	bl	800b4f8 <prvInsertTimerInActiveList>
					break;
 800b6b2:	e00d      	b.n	800b6d0 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d107      	bne.n	800b6ce <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 800b6be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b6c0:	f000 fbd4 	bl	800be6c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b6c4:	e003      	b.n	800b6ce <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800b6c6:	bf00      	nop
 800b6c8:	e002      	b.n	800b6d0 <prvProcessReceivedCommands+0x154>
					break;
 800b6ca:	bf00      	nop
 800b6cc:	e000      	b.n	800b6d0 <prvProcessReceivedCommands+0x154>
					break;
 800b6ce:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6d0:	4b07      	ldr	r3, [pc, #28]	@ (800b6f0 <prvProcessReceivedCommands+0x174>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	1d39      	adds	r1, r7, #4
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe fc01 	bl	8009ee0 <xQueueReceive>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	f47f af4f 	bne.w	800b584 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b6e6:	bf00      	nop
 800b6e8:	bf00      	nop
 800b6ea:	3730      	adds	r7, #48	@ 0x30
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	20001284 	.word	0x20001284

0800b6f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b088      	sub	sp, #32
 800b6f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6fa:	e046      	b.n	800b78a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6fc:	4b2c      	ldr	r3, [pc, #176]	@ (800b7b0 <prvSwitchTimerLists+0xbc>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b706:	4b2a      	ldr	r3, [pc, #168]	@ (800b7b0 <prvSwitchTimerLists+0xbc>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	3304      	adds	r3, #4
 800b714:	4618      	mov	r0, r3
 800b716:	f7fe f911 	bl	800993c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b71e:	68f8      	ldr	r0, [r7, #12]
 800b720:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	69db      	ldr	r3, [r3, #28]
 800b726:	2b01      	cmp	r3, #1
 800b728:	d12f      	bne.n	800b78a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	699b      	ldr	r3, [r3, #24]
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	4413      	add	r3, r2
 800b732:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b734:	68ba      	ldr	r2, [r7, #8]
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	429a      	cmp	r2, r3
 800b73a:	d90e      	bls.n	800b75a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	68fa      	ldr	r2, [r7, #12]
 800b746:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b748:	4b19      	ldr	r3, [pc, #100]	@ (800b7b0 <prvSwitchTimerLists+0xbc>)
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3304      	adds	r3, #4
 800b750:	4619      	mov	r1, r3
 800b752:	4610      	mov	r0, r2
 800b754:	f7fe f8b9 	bl	80098ca <vListInsert>
 800b758:	e017      	b.n	800b78a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b75a:	2300      	movs	r3, #0
 800b75c:	9300      	str	r3, [sp, #0]
 800b75e:	2300      	movs	r3, #0
 800b760:	693a      	ldr	r2, [r7, #16]
 800b762:	2100      	movs	r1, #0
 800b764:	68f8      	ldr	r0, [r7, #12]
 800b766:	f7ff fd91 	bl	800b28c <xTimerGenericCommand>
 800b76a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10b      	bne.n	800b78a <prvSwitchTimerLists+0x96>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	603b      	str	r3, [r7, #0]
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop
 800b788:	e7fd      	b.n	800b786 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b78a:	4b09      	ldr	r3, [pc, #36]	@ (800b7b0 <prvSwitchTimerLists+0xbc>)
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d1b3      	bne.n	800b6fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b794:	4b06      	ldr	r3, [pc, #24]	@ (800b7b0 <prvSwitchTimerLists+0xbc>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b79a:	4b06      	ldr	r3, [pc, #24]	@ (800b7b4 <prvSwitchTimerLists+0xc0>)
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	4a04      	ldr	r2, [pc, #16]	@ (800b7b0 <prvSwitchTimerLists+0xbc>)
 800b7a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b7a2:	4a04      	ldr	r2, [pc, #16]	@ (800b7b4 <prvSwitchTimerLists+0xc0>)
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	6013      	str	r3, [r2, #0]
}
 800b7a8:	bf00      	nop
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	2000127c 	.word	0x2000127c
 800b7b4:	20001280 	.word	0x20001280

0800b7b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b7be:	f000 f96b 	bl	800ba98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b7c2:	4b15      	ldr	r3, [pc, #84]	@ (800b818 <prvCheckForValidListAndQueue+0x60>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d120      	bne.n	800b80c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b7ca:	4814      	ldr	r0, [pc, #80]	@ (800b81c <prvCheckForValidListAndQueue+0x64>)
 800b7cc:	f7fe f82c 	bl	8009828 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b7d0:	4813      	ldr	r0, [pc, #76]	@ (800b820 <prvCheckForValidListAndQueue+0x68>)
 800b7d2:	f7fe f829 	bl	8009828 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b7d6:	4b13      	ldr	r3, [pc, #76]	@ (800b824 <prvCheckForValidListAndQueue+0x6c>)
 800b7d8:	4a10      	ldr	r2, [pc, #64]	@ (800b81c <prvCheckForValidListAndQueue+0x64>)
 800b7da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b7dc:	4b12      	ldr	r3, [pc, #72]	@ (800b828 <prvCheckForValidListAndQueue+0x70>)
 800b7de:	4a10      	ldr	r2, [pc, #64]	@ (800b820 <prvCheckForValidListAndQueue+0x68>)
 800b7e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9300      	str	r3, [sp, #0]
 800b7e6:	4b11      	ldr	r3, [pc, #68]	@ (800b82c <prvCheckForValidListAndQueue+0x74>)
 800b7e8:	4a11      	ldr	r2, [pc, #68]	@ (800b830 <prvCheckForValidListAndQueue+0x78>)
 800b7ea:	2110      	movs	r1, #16
 800b7ec:	200a      	movs	r0, #10
 800b7ee:	f7fe f939 	bl	8009a64 <xQueueGenericCreateStatic>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	4a08      	ldr	r2, [pc, #32]	@ (800b818 <prvCheckForValidListAndQueue+0x60>)
 800b7f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b7f8:	4b07      	ldr	r3, [pc, #28]	@ (800b818 <prvCheckForValidListAndQueue+0x60>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d005      	beq.n	800b80c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b800:	4b05      	ldr	r3, [pc, #20]	@ (800b818 <prvCheckForValidListAndQueue+0x60>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	490b      	ldr	r1, [pc, #44]	@ (800b834 <prvCheckForValidListAndQueue+0x7c>)
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fd5c 	bl	800a2c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b80c:	f000 f976 	bl	800bafc <vPortExitCritical>
}
 800b810:	bf00      	nop
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20001284 	.word	0x20001284
 800b81c:	20001254 	.word	0x20001254
 800b820:	20001268 	.word	0x20001268
 800b824:	2000127c 	.word	0x2000127c
 800b828:	20001280 	.word	0x20001280
 800b82c:	20001330 	.word	0x20001330
 800b830:	20001290 	.word	0x20001290
 800b834:	08011194 	.word	0x08011194

0800b838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3b04      	subs	r3, #4
 800b848:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3b04      	subs	r3, #4
 800b856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	f023 0201 	bic.w	r2, r3, #1
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3b04      	subs	r3, #4
 800b866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b868:	4a0c      	ldr	r2, [pc, #48]	@ (800b89c <pxPortInitialiseStack+0x64>)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3b14      	subs	r3, #20
 800b872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3b04      	subs	r3, #4
 800b87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f06f 0202 	mvn.w	r2, #2
 800b886:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3b20      	subs	r3, #32
 800b88c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b88e:	68fb      	ldr	r3, [r7, #12]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	0800b8a1 	.word	0x0800b8a1

0800b8a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8aa:	4b13      	ldr	r3, [pc, #76]	@ (800b8f8 <prvTaskExitError+0x58>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b2:	d00b      	beq.n	800b8cc <prvTaskExitError+0x2c>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	60fb      	str	r3, [r7, #12]
}
 800b8c6:	bf00      	nop
 800b8c8:	bf00      	nop
 800b8ca:	e7fd      	b.n	800b8c8 <prvTaskExitError+0x28>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d0:	f383 8811 	msr	BASEPRI, r3
 800b8d4:	f3bf 8f6f 	isb	sy
 800b8d8:	f3bf 8f4f 	dsb	sy
 800b8dc:	60bb      	str	r3, [r7, #8]
}
 800b8de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b8e0:	bf00      	nop
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d0fc      	beq.n	800b8e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	3714      	adds	r7, #20
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	20000018 	.word	0x20000018
 800b8fc:	00000000 	.word	0x00000000

0800b900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b900:	4b07      	ldr	r3, [pc, #28]	@ (800b920 <pxCurrentTCBConst2>)
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	6808      	ldr	r0, [r1, #0]
 800b906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90a:	f380 8809 	msr	PSP, r0
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f04f 0000 	mov.w	r0, #0
 800b916:	f380 8811 	msr	BASEPRI, r0
 800b91a:	4770      	bx	lr
 800b91c:	f3af 8000 	nop.w

0800b920 <pxCurrentTCBConst2>:
 800b920:	20000d54 	.word	0x20000d54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop

0800b928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b928:	4808      	ldr	r0, [pc, #32]	@ (800b94c <prvPortStartFirstTask+0x24>)
 800b92a:	6800      	ldr	r0, [r0, #0]
 800b92c:	6800      	ldr	r0, [r0, #0]
 800b92e:	f380 8808 	msr	MSP, r0
 800b932:	f04f 0000 	mov.w	r0, #0
 800b936:	f380 8814 	msr	CONTROL, r0
 800b93a:	b662      	cpsie	i
 800b93c:	b661      	cpsie	f
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	df00      	svc	0
 800b948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b94a:	bf00      	nop
 800b94c:	e000ed08 	.word	0xe000ed08

0800b950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b956:	4b47      	ldr	r3, [pc, #284]	@ (800ba74 <xPortStartScheduler+0x124>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a47      	ldr	r2, [pc, #284]	@ (800ba78 <xPortStartScheduler+0x128>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d10b      	bne.n	800b978 <xPortStartScheduler+0x28>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	613b      	str	r3, [r7, #16]
}
 800b972:	bf00      	nop
 800b974:	bf00      	nop
 800b976:	e7fd      	b.n	800b974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b978:	4b3e      	ldr	r3, [pc, #248]	@ (800ba74 <xPortStartScheduler+0x124>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a3f      	ldr	r2, [pc, #252]	@ (800ba7c <xPortStartScheduler+0x12c>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d10b      	bne.n	800b99a <xPortStartScheduler+0x4a>
	__asm volatile
 800b982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	60fb      	str	r3, [r7, #12]
}
 800b994:	bf00      	nop
 800b996:	bf00      	nop
 800b998:	e7fd      	b.n	800b996 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b99a:	4b39      	ldr	r3, [pc, #228]	@ (800ba80 <xPortStartScheduler+0x130>)
 800b99c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	22ff      	movs	r2, #255	@ 0xff
 800b9aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9ac:	697b      	ldr	r3, [r7, #20]
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9b4:	78fb      	ldrb	r3, [r7, #3]
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b9bc:	b2da      	uxtb	r2, r3
 800b9be:	4b31      	ldr	r3, [pc, #196]	@ (800ba84 <xPortStartScheduler+0x134>)
 800b9c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9c2:	4b31      	ldr	r3, [pc, #196]	@ (800ba88 <xPortStartScheduler+0x138>)
 800b9c4:	2207      	movs	r2, #7
 800b9c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9c8:	e009      	b.n	800b9de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b9ca:	4b2f      	ldr	r3, [pc, #188]	@ (800ba88 <xPortStartScheduler+0x138>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	4a2d      	ldr	r2, [pc, #180]	@ (800ba88 <xPortStartScheduler+0x138>)
 800b9d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9d4:	78fb      	ldrb	r3, [r7, #3]
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9de:	78fb      	ldrb	r3, [r7, #3]
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b9e6:	2b80      	cmp	r3, #128	@ 0x80
 800b9e8:	d0ef      	beq.n	800b9ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9ea:	4b27      	ldr	r3, [pc, #156]	@ (800ba88 <xPortStartScheduler+0x138>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f1c3 0307 	rsb	r3, r3, #7
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	d00b      	beq.n	800ba0e <xPortStartScheduler+0xbe>
	__asm volatile
 800b9f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	60bb      	str	r3, [r7, #8]
}
 800ba08:	bf00      	nop
 800ba0a:	bf00      	nop
 800ba0c:	e7fd      	b.n	800ba0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba0e:	4b1e      	ldr	r3, [pc, #120]	@ (800ba88 <xPortStartScheduler+0x138>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	021b      	lsls	r3, r3, #8
 800ba14:	4a1c      	ldr	r2, [pc, #112]	@ (800ba88 <xPortStartScheduler+0x138>)
 800ba16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba18:	4b1b      	ldr	r3, [pc, #108]	@ (800ba88 <xPortStartScheduler+0x138>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ba20:	4a19      	ldr	r2, [pc, #100]	@ (800ba88 <xPortStartScheduler+0x138>)
 800ba22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba2c:	4b17      	ldr	r3, [pc, #92]	@ (800ba8c <xPortStartScheduler+0x13c>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a16      	ldr	r2, [pc, #88]	@ (800ba8c <xPortStartScheduler+0x13c>)
 800ba32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ba36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba38:	4b14      	ldr	r3, [pc, #80]	@ (800ba8c <xPortStartScheduler+0x13c>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	4a13      	ldr	r2, [pc, #76]	@ (800ba8c <xPortStartScheduler+0x13c>)
 800ba3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ba42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba44:	f000 f8da 	bl	800bbfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba48:	4b11      	ldr	r3, [pc, #68]	@ (800ba90 <xPortStartScheduler+0x140>)
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba4e:	f000 f8f9 	bl	800bc44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba52:	4b10      	ldr	r3, [pc, #64]	@ (800ba94 <xPortStartScheduler+0x144>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a0f      	ldr	r2, [pc, #60]	@ (800ba94 <xPortStartScheduler+0x144>)
 800ba58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ba5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba5e:	f7ff ff63 	bl	800b928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba62:	f7ff f863 	bl	800ab2c <vTaskSwitchContext>
	prvTaskExitError();
 800ba66:	f7ff ff1b 	bl	800b8a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3718      	adds	r7, #24
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	e000ed00 	.word	0xe000ed00
 800ba78:	410fc271 	.word	0x410fc271
 800ba7c:	410fc270 	.word	0x410fc270
 800ba80:	e000e400 	.word	0xe000e400
 800ba84:	20001380 	.word	0x20001380
 800ba88:	20001384 	.word	0x20001384
 800ba8c:	e000ed20 	.word	0xe000ed20
 800ba90:	20000018 	.word	0x20000018
 800ba94:	e000ef34 	.word	0xe000ef34

0800ba98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
	__asm volatile
 800ba9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa2:	f383 8811 	msr	BASEPRI, r3
 800baa6:	f3bf 8f6f 	isb	sy
 800baaa:	f3bf 8f4f 	dsb	sy
 800baae:	607b      	str	r3, [r7, #4]
}
 800bab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bab2:	4b10      	ldr	r3, [pc, #64]	@ (800baf4 <vPortEnterCritical+0x5c>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3301      	adds	r3, #1
 800bab8:	4a0e      	ldr	r2, [pc, #56]	@ (800baf4 <vPortEnterCritical+0x5c>)
 800baba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800babc:	4b0d      	ldr	r3, [pc, #52]	@ (800baf4 <vPortEnterCritical+0x5c>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d110      	bne.n	800bae6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bac4:	4b0c      	ldr	r3, [pc, #48]	@ (800baf8 <vPortEnterCritical+0x60>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d00b      	beq.n	800bae6 <vPortEnterCritical+0x4e>
	__asm volatile
 800bace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad2:	f383 8811 	msr	BASEPRI, r3
 800bad6:	f3bf 8f6f 	isb	sy
 800bada:	f3bf 8f4f 	dsb	sy
 800bade:	603b      	str	r3, [r7, #0]
}
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	e7fd      	b.n	800bae2 <vPortEnterCritical+0x4a>
	}
}
 800bae6:	bf00      	nop
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20000018 	.word	0x20000018
 800baf8:	e000ed04 	.word	0xe000ed04

0800bafc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bb02:	4b12      	ldr	r3, [pc, #72]	@ (800bb4c <vPortExitCritical+0x50>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d10b      	bne.n	800bb22 <vPortExitCritical+0x26>
	__asm volatile
 800bb0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb0e:	f383 8811 	msr	BASEPRI, r3
 800bb12:	f3bf 8f6f 	isb	sy
 800bb16:	f3bf 8f4f 	dsb	sy
 800bb1a:	607b      	str	r3, [r7, #4]
}
 800bb1c:	bf00      	nop
 800bb1e:	bf00      	nop
 800bb20:	e7fd      	b.n	800bb1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb22:	4b0a      	ldr	r3, [pc, #40]	@ (800bb4c <vPortExitCritical+0x50>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	3b01      	subs	r3, #1
 800bb28:	4a08      	ldr	r2, [pc, #32]	@ (800bb4c <vPortExitCritical+0x50>)
 800bb2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb2c:	4b07      	ldr	r3, [pc, #28]	@ (800bb4c <vPortExitCritical+0x50>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d105      	bne.n	800bb40 <vPortExitCritical+0x44>
 800bb34:	2300      	movs	r3, #0
 800bb36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	f383 8811 	msr	BASEPRI, r3
}
 800bb3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb40:	bf00      	nop
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr
 800bb4c:	20000018 	.word	0x20000018

0800bb50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb50:	f3ef 8009 	mrs	r0, PSP
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	4b15      	ldr	r3, [pc, #84]	@ (800bbb0 <pxCurrentTCBConst>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	f01e 0f10 	tst.w	lr, #16
 800bb60:	bf08      	it	eq
 800bb62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	6010      	str	r0, [r2, #0]
 800bb6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bb74:	f380 8811 	msr	BASEPRI, r0
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f7fe ffd4 	bl	800ab2c <vTaskSwitchContext>
 800bb84:	f04f 0000 	mov.w	r0, #0
 800bb88:	f380 8811 	msr	BASEPRI, r0
 800bb8c:	bc09      	pop	{r0, r3}
 800bb8e:	6819      	ldr	r1, [r3, #0]
 800bb90:	6808      	ldr	r0, [r1, #0]
 800bb92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb96:	f01e 0f10 	tst.w	lr, #16
 800bb9a:	bf08      	it	eq
 800bb9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bba0:	f380 8809 	msr	PSP, r0
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	f3af 8000 	nop.w

0800bbb0 <pxCurrentTCBConst>:
 800bbb0:	20000d54 	.word	0x20000d54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop

0800bbb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	607b      	str	r3, [r7, #4]
}
 800bbd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bbd2:	f7fe feeb 	bl	800a9ac <xTaskIncrementTick>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbdc:	4b06      	ldr	r3, [pc, #24]	@ (800bbf8 <SysTick_Handler+0x40>)
 800bbde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f383 8811 	msr	BASEPRI, r3
}
 800bbee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	e000ed04 	.word	0xe000ed04

0800bbfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc00:	4b0b      	ldr	r3, [pc, #44]	@ (800bc30 <vPortSetupTimerInterrupt+0x34>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc06:	4b0b      	ldr	r3, [pc, #44]	@ (800bc34 <vPortSetupTimerInterrupt+0x38>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc38 <vPortSetupTimerInterrupt+0x3c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a0a      	ldr	r2, [pc, #40]	@ (800bc3c <vPortSetupTimerInterrupt+0x40>)
 800bc12:	fba2 2303 	umull	r2, r3, r2, r3
 800bc16:	099b      	lsrs	r3, r3, #6
 800bc18:	4a09      	ldr	r2, [pc, #36]	@ (800bc40 <vPortSetupTimerInterrupt+0x44>)
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc1e:	4b04      	ldr	r3, [pc, #16]	@ (800bc30 <vPortSetupTimerInterrupt+0x34>)
 800bc20:	2207      	movs	r2, #7
 800bc22:	601a      	str	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	e000e010 	.word	0xe000e010
 800bc34:	e000e018 	.word	0xe000e018
 800bc38:	2000000c 	.word	0x2000000c
 800bc3c:	10624dd3 	.word	0x10624dd3
 800bc40:	e000e014 	.word	0xe000e014

0800bc44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bc54 <vPortEnableVFP+0x10>
 800bc48:	6801      	ldr	r1, [r0, #0]
 800bc4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bc4e:	6001      	str	r1, [r0, #0]
 800bc50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc52:	bf00      	nop
 800bc54:	e000ed88 	.word	0xe000ed88

0800bc58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc5e:	f3ef 8305 	mrs	r3, IPSR
 800bc62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b0f      	cmp	r3, #15
 800bc68:	d915      	bls.n	800bc96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc6a:	4a18      	ldr	r2, [pc, #96]	@ (800bccc <vPortValidateInterruptPriority+0x74>)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc74:	4b16      	ldr	r3, [pc, #88]	@ (800bcd0 <vPortValidateInterruptPriority+0x78>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	7afa      	ldrb	r2, [r7, #11]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d20b      	bcs.n	800bc96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	607b      	str	r3, [r7, #4]
}
 800bc90:	bf00      	nop
 800bc92:	bf00      	nop
 800bc94:	e7fd      	b.n	800bc92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc96:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd4 <vPortValidateInterruptPriority+0x7c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bc9e:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd8 <vPortValidateInterruptPriority+0x80>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d90b      	bls.n	800bcbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	603b      	str	r3, [r7, #0]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <vPortValidateInterruptPriority+0x62>
	}
 800bcbe:	bf00      	nop
 800bcc0:	3714      	adds	r7, #20
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	e000e3f0 	.word	0xe000e3f0
 800bcd0:	20001380 	.word	0x20001380
 800bcd4:	e000ed0c 	.word	0xe000ed0c
 800bcd8:	20001384 	.word	0x20001384

0800bcdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b08a      	sub	sp, #40	@ 0x28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bce4:	2300      	movs	r3, #0
 800bce6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bce8:	f7fe fda4 	bl	800a834 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bcec:	4b5a      	ldr	r3, [pc, #360]	@ (800be58 <pvPortMalloc+0x17c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d101      	bne.n	800bcf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bcf4:	f000 f916 	bl	800bf24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcf8:	4b58      	ldr	r3, [pc, #352]	@ (800be5c <pvPortMalloc+0x180>)
 800bcfa:	681a      	ldr	r2, [r3, #0]
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4013      	ands	r3, r2
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f040 8090 	bne.w	800be26 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d01e      	beq.n	800bd4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800bd0c:	2208      	movs	r2, #8
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4413      	add	r3, r2
 800bd12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d015      	beq.n	800bd4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f023 0307 	bic.w	r3, r3, #7
 800bd24:	3308      	adds	r3, #8
 800bd26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f003 0307 	and.w	r3, r3, #7
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d00b      	beq.n	800bd4a <pvPortMalloc+0x6e>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	617b      	str	r3, [r7, #20]
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	e7fd      	b.n	800bd46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d06a      	beq.n	800be26 <pvPortMalloc+0x14a>
 800bd50:	4b43      	ldr	r3, [pc, #268]	@ (800be60 <pvPortMalloc+0x184>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d865      	bhi.n	800be26 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd5a:	4b42      	ldr	r3, [pc, #264]	@ (800be64 <pvPortMalloc+0x188>)
 800bd5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd5e:	4b41      	ldr	r3, [pc, #260]	@ (800be64 <pvPortMalloc+0x188>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd64:	e004      	b.n	800bd70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800bd66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	687a      	ldr	r2, [r7, #4]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d903      	bls.n	800bd82 <pvPortMalloc+0xa6>
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1f1      	bne.n	800bd66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd82:	4b35      	ldr	r3, [pc, #212]	@ (800be58 <pvPortMalloc+0x17c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd88:	429a      	cmp	r2, r3
 800bd8a:	d04c      	beq.n	800be26 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd8c:	6a3b      	ldr	r3, [r7, #32]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	2208      	movs	r2, #8
 800bd92:	4413      	add	r3, r2
 800bd94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	6a3b      	ldr	r3, [r7, #32]
 800bd9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda0:	685a      	ldr	r2, [r3, #4]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	1ad2      	subs	r2, r2, r3
 800bda6:	2308      	movs	r3, #8
 800bda8:	005b      	lsls	r3, r3, #1
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d920      	bls.n	800bdf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bdae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4413      	add	r3, r2
 800bdb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	f003 0307 	and.w	r3, r3, #7
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d00b      	beq.n	800bdd8 <pvPortMalloc+0xfc>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	613b      	str	r3, [r7, #16]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdda:	685a      	ldr	r2, [r3, #4]
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	1ad2      	subs	r2, r2, r3
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bde4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bdea:	69b8      	ldr	r0, [r7, #24]
 800bdec:	f000 f8fc 	bl	800bfe8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bdf0:	4b1b      	ldr	r3, [pc, #108]	@ (800be60 <pvPortMalloc+0x184>)
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	1ad3      	subs	r3, r2, r3
 800bdfa:	4a19      	ldr	r2, [pc, #100]	@ (800be60 <pvPortMalloc+0x184>)
 800bdfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdfe:	4b18      	ldr	r3, [pc, #96]	@ (800be60 <pvPortMalloc+0x184>)
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	4b19      	ldr	r3, [pc, #100]	@ (800be68 <pvPortMalloc+0x18c>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	429a      	cmp	r2, r3
 800be08:	d203      	bcs.n	800be12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be0a:	4b15      	ldr	r3, [pc, #84]	@ (800be60 <pvPortMalloc+0x184>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	4a16      	ldr	r2, [pc, #88]	@ (800be68 <pvPortMalloc+0x18c>)
 800be10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	4b11      	ldr	r3, [pc, #68]	@ (800be5c <pvPortMalloc+0x180>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	431a      	orrs	r2, r3
 800be1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be22:	2200      	movs	r2, #0
 800be24:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be26:	f7fe fd13 	bl	800a850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	f003 0307 	and.w	r3, r3, #7
 800be30:	2b00      	cmp	r3, #0
 800be32:	d00b      	beq.n	800be4c <pvPortMalloc+0x170>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	60fb      	str	r3, [r7, #12]
}
 800be46:	bf00      	nop
 800be48:	bf00      	nop
 800be4a:	e7fd      	b.n	800be48 <pvPortMalloc+0x16c>
	return pvReturn;
 800be4c:	69fb      	ldr	r3, [r7, #28]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3728      	adds	r7, #40	@ 0x28
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20001f90 	.word	0x20001f90
 800be5c:	20001f9c 	.word	0x20001f9c
 800be60:	20001f94 	.word	0x20001f94
 800be64:	20001f88 	.word	0x20001f88
 800be68:	20001f98 	.word	0x20001f98

0800be6c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b086      	sub	sp, #24
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d04a      	beq.n	800bf14 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be7e:	2308      	movs	r3, #8
 800be80:	425b      	negs	r3, r3
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	4413      	add	r3, r2
 800be86:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	685a      	ldr	r2, [r3, #4]
 800be90:	4b22      	ldr	r3, [pc, #136]	@ (800bf1c <vPortFree+0xb0>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4013      	ands	r3, r2
 800be96:	2b00      	cmp	r3, #0
 800be98:	d10b      	bne.n	800beb2 <vPortFree+0x46>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	60fb      	str	r3, [r7, #12]
}
 800beac:	bf00      	nop
 800beae:	bf00      	nop
 800beb0:	e7fd      	b.n	800beae <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00b      	beq.n	800bed2 <vPortFree+0x66>
	__asm volatile
 800beba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bebe:	f383 8811 	msr	BASEPRI, r3
 800bec2:	f3bf 8f6f 	isb	sy
 800bec6:	f3bf 8f4f 	dsb	sy
 800beca:	60bb      	str	r3, [r7, #8]
}
 800becc:	bf00      	nop
 800bece:	bf00      	nop
 800bed0:	e7fd      	b.n	800bece <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	4b11      	ldr	r3, [pc, #68]	@ (800bf1c <vPortFree+0xb0>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d019      	beq.n	800bf14 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d115      	bne.n	800bf14 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	4b0b      	ldr	r3, [pc, #44]	@ (800bf1c <vPortFree+0xb0>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	43db      	mvns	r3, r3
 800bef2:	401a      	ands	r2, r3
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bef8:	f7fe fc9c 	bl	800a834 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	4b07      	ldr	r3, [pc, #28]	@ (800bf20 <vPortFree+0xb4>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4413      	add	r3, r2
 800bf06:	4a06      	ldr	r2, [pc, #24]	@ (800bf20 <vPortFree+0xb4>)
 800bf08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf0a:	6938      	ldr	r0, [r7, #16]
 800bf0c:	f000 f86c 	bl	800bfe8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bf10:	f7fe fc9e 	bl	800a850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf14:	bf00      	nop
 800bf16:	3718      	adds	r7, #24
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	20001f9c 	.word	0x20001f9c
 800bf20:	20001f94 	.word	0x20001f94

0800bf24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf2a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800bf2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf30:	4b27      	ldr	r3, [pc, #156]	@ (800bfd0 <prvHeapInit+0xac>)
 800bf32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f003 0307 	and.w	r3, r3, #7
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d00c      	beq.n	800bf58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	3307      	adds	r3, #7
 800bf42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f023 0307 	bic.w	r3, r3, #7
 800bf4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	4a1f      	ldr	r2, [pc, #124]	@ (800bfd0 <prvHeapInit+0xac>)
 800bf54:	4413      	add	r3, r2
 800bf56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf5c:	4a1d      	ldr	r2, [pc, #116]	@ (800bfd4 <prvHeapInit+0xb0>)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf62:	4b1c      	ldr	r3, [pc, #112]	@ (800bfd4 <prvHeapInit+0xb0>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf70:	2208      	movs	r2, #8
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	1a9b      	subs	r3, r3, r2
 800bf76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f023 0307 	bic.w	r3, r3, #7
 800bf7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	4a15      	ldr	r2, [pc, #84]	@ (800bfd8 <prvHeapInit+0xb4>)
 800bf84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf86:	4b14      	ldr	r3, [pc, #80]	@ (800bfd8 <prvHeapInit+0xb4>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf8e:	4b12      	ldr	r3, [pc, #72]	@ (800bfd8 <prvHeapInit+0xb4>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2200      	movs	r2, #0
 800bf94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	68fa      	ldr	r2, [r7, #12]
 800bf9e:	1ad2      	subs	r2, r2, r3
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bfa4:	4b0c      	ldr	r3, [pc, #48]	@ (800bfd8 <prvHeapInit+0xb4>)
 800bfa6:	681a      	ldr	r2, [r3, #0]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	4a0a      	ldr	r2, [pc, #40]	@ (800bfdc <prvHeapInit+0xb8>)
 800bfb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	4a09      	ldr	r2, [pc, #36]	@ (800bfe0 <prvHeapInit+0xbc>)
 800bfba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bfbc:	4b09      	ldr	r3, [pc, #36]	@ (800bfe4 <prvHeapInit+0xc0>)
 800bfbe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bfc2:	601a      	str	r2, [r3, #0]
}
 800bfc4:	bf00      	nop
 800bfc6:	3714      	adds	r7, #20
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfce:	4770      	bx	lr
 800bfd0:	20001388 	.word	0x20001388
 800bfd4:	20001f88 	.word	0x20001f88
 800bfd8:	20001f90 	.word	0x20001f90
 800bfdc:	20001f98 	.word	0x20001f98
 800bfe0:	20001f94 	.word	0x20001f94
 800bfe4:	20001f9c 	.word	0x20001f9c

0800bfe8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bff0:	4b28      	ldr	r3, [pc, #160]	@ (800c094 <prvInsertBlockIntoFreeList+0xac>)
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	e002      	b.n	800bffc <prvInsertBlockIntoFreeList+0x14>
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	60fb      	str	r3, [r7, #12]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	429a      	cmp	r2, r3
 800c004:	d8f7      	bhi.n	800bff6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	68ba      	ldr	r2, [r7, #8]
 800c010:	4413      	add	r3, r2
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	429a      	cmp	r2, r3
 800c016:	d108      	bne.n	800c02a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	685a      	ldr	r2, [r3, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	441a      	add	r2, r3
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	441a      	add	r2, r3
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	429a      	cmp	r2, r3
 800c03c:	d118      	bne.n	800c070 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681a      	ldr	r2, [r3, #0]
 800c042:	4b15      	ldr	r3, [pc, #84]	@ (800c098 <prvInsertBlockIntoFreeList+0xb0>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	429a      	cmp	r2, r3
 800c048:	d00d      	beq.n	800c066 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	685a      	ldr	r2, [r3, #4]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	441a      	add	r2, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	601a      	str	r2, [r3, #0]
 800c064:	e008      	b.n	800c078 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c066:	4b0c      	ldr	r3, [pc, #48]	@ (800c098 <prvInsertBlockIntoFreeList+0xb0>)
 800c068:	681a      	ldr	r2, [r3, #0]
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	601a      	str	r2, [r3, #0]
 800c06e:	e003      	b.n	800c078 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	429a      	cmp	r2, r3
 800c07e:	d002      	beq.n	800c086 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c086:	bf00      	nop
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	20001f88 	.word	0x20001f88
 800c098:	20001f90 	.word	0x20001f90

0800c09c <malloc>:
 800c09c:	4b02      	ldr	r3, [pc, #8]	@ (800c0a8 <malloc+0xc>)
 800c09e:	4601      	mov	r1, r0
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	f000 b825 	b.w	800c0f0 <_malloc_r>
 800c0a6:	bf00      	nop
 800c0a8:	20000028 	.word	0x20000028

0800c0ac <sbrk_aligned>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c0ec <sbrk_aligned+0x40>)
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	6831      	ldr	r1, [r6, #0]
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	b911      	cbnz	r1, 800c0be <sbrk_aligned+0x12>
 800c0b8:	f001 f8fa 	bl	800d2b0 <_sbrk_r>
 800c0bc:	6030      	str	r0, [r6, #0]
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f001 f8f5 	bl	800d2b0 <_sbrk_r>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	d103      	bne.n	800c0d2 <sbrk_aligned+0x26>
 800c0ca:	f04f 34ff 	mov.w	r4, #4294967295
 800c0ce:	4620      	mov	r0, r4
 800c0d0:	bd70      	pop	{r4, r5, r6, pc}
 800c0d2:	1cc4      	adds	r4, r0, #3
 800c0d4:	f024 0403 	bic.w	r4, r4, #3
 800c0d8:	42a0      	cmp	r0, r4
 800c0da:	d0f8      	beq.n	800c0ce <sbrk_aligned+0x22>
 800c0dc:	1a21      	subs	r1, r4, r0
 800c0de:	4628      	mov	r0, r5
 800c0e0:	f001 f8e6 	bl	800d2b0 <_sbrk_r>
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	d1f2      	bne.n	800c0ce <sbrk_aligned+0x22>
 800c0e8:	e7ef      	b.n	800c0ca <sbrk_aligned+0x1e>
 800c0ea:	bf00      	nop
 800c0ec:	20001fa0 	.word	0x20001fa0

0800c0f0 <_malloc_r>:
 800c0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f4:	1ccd      	adds	r5, r1, #3
 800c0f6:	f025 0503 	bic.w	r5, r5, #3
 800c0fa:	3508      	adds	r5, #8
 800c0fc:	2d0c      	cmp	r5, #12
 800c0fe:	bf38      	it	cc
 800c100:	250c      	movcc	r5, #12
 800c102:	2d00      	cmp	r5, #0
 800c104:	4606      	mov	r6, r0
 800c106:	db01      	blt.n	800c10c <_malloc_r+0x1c>
 800c108:	42a9      	cmp	r1, r5
 800c10a:	d904      	bls.n	800c116 <_malloc_r+0x26>
 800c10c:	230c      	movs	r3, #12
 800c10e:	6033      	str	r3, [r6, #0]
 800c110:	2000      	movs	r0, #0
 800c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c116:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c1ec <_malloc_r+0xfc>
 800c11a:	f000 f869 	bl	800c1f0 <__malloc_lock>
 800c11e:	f8d8 3000 	ldr.w	r3, [r8]
 800c122:	461c      	mov	r4, r3
 800c124:	bb44      	cbnz	r4, 800c178 <_malloc_r+0x88>
 800c126:	4629      	mov	r1, r5
 800c128:	4630      	mov	r0, r6
 800c12a:	f7ff ffbf 	bl	800c0ac <sbrk_aligned>
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	4604      	mov	r4, r0
 800c132:	d158      	bne.n	800c1e6 <_malloc_r+0xf6>
 800c134:	f8d8 4000 	ldr.w	r4, [r8]
 800c138:	4627      	mov	r7, r4
 800c13a:	2f00      	cmp	r7, #0
 800c13c:	d143      	bne.n	800c1c6 <_malloc_r+0xd6>
 800c13e:	2c00      	cmp	r4, #0
 800c140:	d04b      	beq.n	800c1da <_malloc_r+0xea>
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	4639      	mov	r1, r7
 800c146:	4630      	mov	r0, r6
 800c148:	eb04 0903 	add.w	r9, r4, r3
 800c14c:	f001 f8b0 	bl	800d2b0 <_sbrk_r>
 800c150:	4581      	cmp	r9, r0
 800c152:	d142      	bne.n	800c1da <_malloc_r+0xea>
 800c154:	6821      	ldr	r1, [r4, #0]
 800c156:	1a6d      	subs	r5, r5, r1
 800c158:	4629      	mov	r1, r5
 800c15a:	4630      	mov	r0, r6
 800c15c:	f7ff ffa6 	bl	800c0ac <sbrk_aligned>
 800c160:	3001      	adds	r0, #1
 800c162:	d03a      	beq.n	800c1da <_malloc_r+0xea>
 800c164:	6823      	ldr	r3, [r4, #0]
 800c166:	442b      	add	r3, r5
 800c168:	6023      	str	r3, [r4, #0]
 800c16a:	f8d8 3000 	ldr.w	r3, [r8]
 800c16e:	685a      	ldr	r2, [r3, #4]
 800c170:	bb62      	cbnz	r2, 800c1cc <_malloc_r+0xdc>
 800c172:	f8c8 7000 	str.w	r7, [r8]
 800c176:	e00f      	b.n	800c198 <_malloc_r+0xa8>
 800c178:	6822      	ldr	r2, [r4, #0]
 800c17a:	1b52      	subs	r2, r2, r5
 800c17c:	d420      	bmi.n	800c1c0 <_malloc_r+0xd0>
 800c17e:	2a0b      	cmp	r2, #11
 800c180:	d917      	bls.n	800c1b2 <_malloc_r+0xc2>
 800c182:	1961      	adds	r1, r4, r5
 800c184:	42a3      	cmp	r3, r4
 800c186:	6025      	str	r5, [r4, #0]
 800c188:	bf18      	it	ne
 800c18a:	6059      	strne	r1, [r3, #4]
 800c18c:	6863      	ldr	r3, [r4, #4]
 800c18e:	bf08      	it	eq
 800c190:	f8c8 1000 	streq.w	r1, [r8]
 800c194:	5162      	str	r2, [r4, r5]
 800c196:	604b      	str	r3, [r1, #4]
 800c198:	4630      	mov	r0, r6
 800c19a:	f000 f82f 	bl	800c1fc <__malloc_unlock>
 800c19e:	f104 000b 	add.w	r0, r4, #11
 800c1a2:	1d23      	adds	r3, r4, #4
 800c1a4:	f020 0007 	bic.w	r0, r0, #7
 800c1a8:	1ac2      	subs	r2, r0, r3
 800c1aa:	bf1c      	itt	ne
 800c1ac:	1a1b      	subne	r3, r3, r0
 800c1ae:	50a3      	strne	r3, [r4, r2]
 800c1b0:	e7af      	b.n	800c112 <_malloc_r+0x22>
 800c1b2:	6862      	ldr	r2, [r4, #4]
 800c1b4:	42a3      	cmp	r3, r4
 800c1b6:	bf0c      	ite	eq
 800c1b8:	f8c8 2000 	streq.w	r2, [r8]
 800c1bc:	605a      	strne	r2, [r3, #4]
 800c1be:	e7eb      	b.n	800c198 <_malloc_r+0xa8>
 800c1c0:	4623      	mov	r3, r4
 800c1c2:	6864      	ldr	r4, [r4, #4]
 800c1c4:	e7ae      	b.n	800c124 <_malloc_r+0x34>
 800c1c6:	463c      	mov	r4, r7
 800c1c8:	687f      	ldr	r7, [r7, #4]
 800c1ca:	e7b6      	b.n	800c13a <_malloc_r+0x4a>
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	d1fb      	bne.n	800c1cc <_malloc_r+0xdc>
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	6053      	str	r3, [r2, #4]
 800c1d8:	e7de      	b.n	800c198 <_malloc_r+0xa8>
 800c1da:	230c      	movs	r3, #12
 800c1dc:	6033      	str	r3, [r6, #0]
 800c1de:	4630      	mov	r0, r6
 800c1e0:	f000 f80c 	bl	800c1fc <__malloc_unlock>
 800c1e4:	e794      	b.n	800c110 <_malloc_r+0x20>
 800c1e6:	6005      	str	r5, [r0, #0]
 800c1e8:	e7d6      	b.n	800c198 <_malloc_r+0xa8>
 800c1ea:	bf00      	nop
 800c1ec:	20001fa4 	.word	0x20001fa4

0800c1f0 <__malloc_lock>:
 800c1f0:	4801      	ldr	r0, [pc, #4]	@ (800c1f8 <__malloc_lock+0x8>)
 800c1f2:	f001 b8aa 	b.w	800d34a <__retarget_lock_acquire_recursive>
 800c1f6:	bf00      	nop
 800c1f8:	200020e8 	.word	0x200020e8

0800c1fc <__malloc_unlock>:
 800c1fc:	4801      	ldr	r0, [pc, #4]	@ (800c204 <__malloc_unlock+0x8>)
 800c1fe:	f001 b8a5 	b.w	800d34c <__retarget_lock_release_recursive>
 800c202:	bf00      	nop
 800c204:	200020e8 	.word	0x200020e8

0800c208 <__cvt>:
 800c208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c20c:	ec57 6b10 	vmov	r6, r7, d0
 800c210:	2f00      	cmp	r7, #0
 800c212:	460c      	mov	r4, r1
 800c214:	4619      	mov	r1, r3
 800c216:	463b      	mov	r3, r7
 800c218:	bfbb      	ittet	lt
 800c21a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c21e:	461f      	movlt	r7, r3
 800c220:	2300      	movge	r3, #0
 800c222:	232d      	movlt	r3, #45	@ 0x2d
 800c224:	700b      	strb	r3, [r1, #0]
 800c226:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c228:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c22c:	4691      	mov	r9, r2
 800c22e:	f023 0820 	bic.w	r8, r3, #32
 800c232:	bfbc      	itt	lt
 800c234:	4632      	movlt	r2, r6
 800c236:	4616      	movlt	r6, r2
 800c238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c23c:	d005      	beq.n	800c24a <__cvt+0x42>
 800c23e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c242:	d100      	bne.n	800c246 <__cvt+0x3e>
 800c244:	3401      	adds	r4, #1
 800c246:	2102      	movs	r1, #2
 800c248:	e000      	b.n	800c24c <__cvt+0x44>
 800c24a:	2103      	movs	r1, #3
 800c24c:	ab03      	add	r3, sp, #12
 800c24e:	9301      	str	r3, [sp, #4]
 800c250:	ab02      	add	r3, sp, #8
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	ec47 6b10 	vmov	d0, r6, r7
 800c258:	4653      	mov	r3, sl
 800c25a:	4622      	mov	r2, r4
 800c25c:	f001 f914 	bl	800d488 <_dtoa_r>
 800c260:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c264:	4605      	mov	r5, r0
 800c266:	d119      	bne.n	800c29c <__cvt+0x94>
 800c268:	f019 0f01 	tst.w	r9, #1
 800c26c:	d00e      	beq.n	800c28c <__cvt+0x84>
 800c26e:	eb00 0904 	add.w	r9, r0, r4
 800c272:	2200      	movs	r2, #0
 800c274:	2300      	movs	r3, #0
 800c276:	4630      	mov	r0, r6
 800c278:	4639      	mov	r1, r7
 800c27a:	f7f4 fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800c27e:	b108      	cbz	r0, 800c284 <__cvt+0x7c>
 800c280:	f8cd 900c 	str.w	r9, [sp, #12]
 800c284:	2230      	movs	r2, #48	@ 0x30
 800c286:	9b03      	ldr	r3, [sp, #12]
 800c288:	454b      	cmp	r3, r9
 800c28a:	d31e      	bcc.n	800c2ca <__cvt+0xc2>
 800c28c:	9b03      	ldr	r3, [sp, #12]
 800c28e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c290:	1b5b      	subs	r3, r3, r5
 800c292:	4628      	mov	r0, r5
 800c294:	6013      	str	r3, [r2, #0]
 800c296:	b004      	add	sp, #16
 800c298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c29c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2a0:	eb00 0904 	add.w	r9, r0, r4
 800c2a4:	d1e5      	bne.n	800c272 <__cvt+0x6a>
 800c2a6:	7803      	ldrb	r3, [r0, #0]
 800c2a8:	2b30      	cmp	r3, #48	@ 0x30
 800c2aa:	d10a      	bne.n	800c2c2 <__cvt+0xba>
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	f7f4 fc10 	bl	8000ad8 <__aeabi_dcmpeq>
 800c2b8:	b918      	cbnz	r0, 800c2c2 <__cvt+0xba>
 800c2ba:	f1c4 0401 	rsb	r4, r4, #1
 800c2be:	f8ca 4000 	str.w	r4, [sl]
 800c2c2:	f8da 3000 	ldr.w	r3, [sl]
 800c2c6:	4499      	add	r9, r3
 800c2c8:	e7d3      	b.n	800c272 <__cvt+0x6a>
 800c2ca:	1c59      	adds	r1, r3, #1
 800c2cc:	9103      	str	r1, [sp, #12]
 800c2ce:	701a      	strb	r2, [r3, #0]
 800c2d0:	e7d9      	b.n	800c286 <__cvt+0x7e>

0800c2d2 <__exponent>:
 800c2d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2d4:	2900      	cmp	r1, #0
 800c2d6:	bfba      	itte	lt
 800c2d8:	4249      	neglt	r1, r1
 800c2da:	232d      	movlt	r3, #45	@ 0x2d
 800c2dc:	232b      	movge	r3, #43	@ 0x2b
 800c2de:	2909      	cmp	r1, #9
 800c2e0:	7002      	strb	r2, [r0, #0]
 800c2e2:	7043      	strb	r3, [r0, #1]
 800c2e4:	dd29      	ble.n	800c33a <__exponent+0x68>
 800c2e6:	f10d 0307 	add.w	r3, sp, #7
 800c2ea:	461d      	mov	r5, r3
 800c2ec:	270a      	movs	r7, #10
 800c2ee:	461a      	mov	r2, r3
 800c2f0:	fbb1 f6f7 	udiv	r6, r1, r7
 800c2f4:	fb07 1416 	mls	r4, r7, r6, r1
 800c2f8:	3430      	adds	r4, #48	@ 0x30
 800c2fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c2fe:	460c      	mov	r4, r1
 800c300:	2c63      	cmp	r4, #99	@ 0x63
 800c302:	f103 33ff 	add.w	r3, r3, #4294967295
 800c306:	4631      	mov	r1, r6
 800c308:	dcf1      	bgt.n	800c2ee <__exponent+0x1c>
 800c30a:	3130      	adds	r1, #48	@ 0x30
 800c30c:	1e94      	subs	r4, r2, #2
 800c30e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c312:	1c41      	adds	r1, r0, #1
 800c314:	4623      	mov	r3, r4
 800c316:	42ab      	cmp	r3, r5
 800c318:	d30a      	bcc.n	800c330 <__exponent+0x5e>
 800c31a:	f10d 0309 	add.w	r3, sp, #9
 800c31e:	1a9b      	subs	r3, r3, r2
 800c320:	42ac      	cmp	r4, r5
 800c322:	bf88      	it	hi
 800c324:	2300      	movhi	r3, #0
 800c326:	3302      	adds	r3, #2
 800c328:	4403      	add	r3, r0
 800c32a:	1a18      	subs	r0, r3, r0
 800c32c:	b003      	add	sp, #12
 800c32e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c330:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c334:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c338:	e7ed      	b.n	800c316 <__exponent+0x44>
 800c33a:	2330      	movs	r3, #48	@ 0x30
 800c33c:	3130      	adds	r1, #48	@ 0x30
 800c33e:	7083      	strb	r3, [r0, #2]
 800c340:	70c1      	strb	r1, [r0, #3]
 800c342:	1d03      	adds	r3, r0, #4
 800c344:	e7f1      	b.n	800c32a <__exponent+0x58>
	...

0800c348 <_printf_float>:
 800c348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c34c:	b08d      	sub	sp, #52	@ 0x34
 800c34e:	460c      	mov	r4, r1
 800c350:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c354:	4616      	mov	r6, r2
 800c356:	461f      	mov	r7, r3
 800c358:	4605      	mov	r5, r0
 800c35a:	f000 ff1b 	bl	800d194 <_localeconv_r>
 800c35e:	6803      	ldr	r3, [r0, #0]
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	4618      	mov	r0, r3
 800c364:	f7f3 ff8c 	bl	8000280 <strlen>
 800c368:	2300      	movs	r3, #0
 800c36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800c36c:	f8d8 3000 	ldr.w	r3, [r8]
 800c370:	9005      	str	r0, [sp, #20]
 800c372:	3307      	adds	r3, #7
 800c374:	f023 0307 	bic.w	r3, r3, #7
 800c378:	f103 0208 	add.w	r2, r3, #8
 800c37c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c380:	f8d4 b000 	ldr.w	fp, [r4]
 800c384:	f8c8 2000 	str.w	r2, [r8]
 800c388:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c38c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c390:	9307      	str	r3, [sp, #28]
 800c392:	f8cd 8018 	str.w	r8, [sp, #24]
 800c396:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c39a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c39e:	4b9c      	ldr	r3, [pc, #624]	@ (800c610 <_printf_float+0x2c8>)
 800c3a0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3a4:	f7f4 fbca 	bl	8000b3c <__aeabi_dcmpun>
 800c3a8:	bb70      	cbnz	r0, 800c408 <_printf_float+0xc0>
 800c3aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3ae:	4b98      	ldr	r3, [pc, #608]	@ (800c610 <_printf_float+0x2c8>)
 800c3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c3b4:	f7f4 fba4 	bl	8000b00 <__aeabi_dcmple>
 800c3b8:	bb30      	cbnz	r0, 800c408 <_printf_float+0xc0>
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	2300      	movs	r3, #0
 800c3be:	4640      	mov	r0, r8
 800c3c0:	4649      	mov	r1, r9
 800c3c2:	f7f4 fb93 	bl	8000aec <__aeabi_dcmplt>
 800c3c6:	b110      	cbz	r0, 800c3ce <_printf_float+0x86>
 800c3c8:	232d      	movs	r3, #45	@ 0x2d
 800c3ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3ce:	4a91      	ldr	r2, [pc, #580]	@ (800c614 <_printf_float+0x2cc>)
 800c3d0:	4b91      	ldr	r3, [pc, #580]	@ (800c618 <_printf_float+0x2d0>)
 800c3d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c3d6:	bf94      	ite	ls
 800c3d8:	4690      	movls	r8, r2
 800c3da:	4698      	movhi	r8, r3
 800c3dc:	2303      	movs	r3, #3
 800c3de:	6123      	str	r3, [r4, #16]
 800c3e0:	f02b 0304 	bic.w	r3, fp, #4
 800c3e4:	6023      	str	r3, [r4, #0]
 800c3e6:	f04f 0900 	mov.w	r9, #0
 800c3ea:	9700      	str	r7, [sp, #0]
 800c3ec:	4633      	mov	r3, r6
 800c3ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c3f0:	4621      	mov	r1, r4
 800c3f2:	4628      	mov	r0, r5
 800c3f4:	f000 f9d2 	bl	800c79c <_printf_common>
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	f040 808d 	bne.w	800c518 <_printf_float+0x1d0>
 800c3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c402:	b00d      	add	sp, #52	@ 0x34
 800c404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c408:	4642      	mov	r2, r8
 800c40a:	464b      	mov	r3, r9
 800c40c:	4640      	mov	r0, r8
 800c40e:	4649      	mov	r1, r9
 800c410:	f7f4 fb94 	bl	8000b3c <__aeabi_dcmpun>
 800c414:	b140      	cbz	r0, 800c428 <_printf_float+0xe0>
 800c416:	464b      	mov	r3, r9
 800c418:	2b00      	cmp	r3, #0
 800c41a:	bfbc      	itt	lt
 800c41c:	232d      	movlt	r3, #45	@ 0x2d
 800c41e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c422:	4a7e      	ldr	r2, [pc, #504]	@ (800c61c <_printf_float+0x2d4>)
 800c424:	4b7e      	ldr	r3, [pc, #504]	@ (800c620 <_printf_float+0x2d8>)
 800c426:	e7d4      	b.n	800c3d2 <_printf_float+0x8a>
 800c428:	6863      	ldr	r3, [r4, #4]
 800c42a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c42e:	9206      	str	r2, [sp, #24]
 800c430:	1c5a      	adds	r2, r3, #1
 800c432:	d13b      	bne.n	800c4ac <_printf_float+0x164>
 800c434:	2306      	movs	r3, #6
 800c436:	6063      	str	r3, [r4, #4]
 800c438:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c43c:	2300      	movs	r3, #0
 800c43e:	6022      	str	r2, [r4, #0]
 800c440:	9303      	str	r3, [sp, #12]
 800c442:	ab0a      	add	r3, sp, #40	@ 0x28
 800c444:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c448:	ab09      	add	r3, sp, #36	@ 0x24
 800c44a:	9300      	str	r3, [sp, #0]
 800c44c:	6861      	ldr	r1, [r4, #4]
 800c44e:	ec49 8b10 	vmov	d0, r8, r9
 800c452:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c456:	4628      	mov	r0, r5
 800c458:	f7ff fed6 	bl	800c208 <__cvt>
 800c45c:	9b06      	ldr	r3, [sp, #24]
 800c45e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c460:	2b47      	cmp	r3, #71	@ 0x47
 800c462:	4680      	mov	r8, r0
 800c464:	d129      	bne.n	800c4ba <_printf_float+0x172>
 800c466:	1cc8      	adds	r0, r1, #3
 800c468:	db02      	blt.n	800c470 <_printf_float+0x128>
 800c46a:	6863      	ldr	r3, [r4, #4]
 800c46c:	4299      	cmp	r1, r3
 800c46e:	dd41      	ble.n	800c4f4 <_printf_float+0x1ac>
 800c470:	f1aa 0a02 	sub.w	sl, sl, #2
 800c474:	fa5f fa8a 	uxtb.w	sl, sl
 800c478:	3901      	subs	r1, #1
 800c47a:	4652      	mov	r2, sl
 800c47c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c480:	9109      	str	r1, [sp, #36]	@ 0x24
 800c482:	f7ff ff26 	bl	800c2d2 <__exponent>
 800c486:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c488:	1813      	adds	r3, r2, r0
 800c48a:	2a01      	cmp	r2, #1
 800c48c:	4681      	mov	r9, r0
 800c48e:	6123      	str	r3, [r4, #16]
 800c490:	dc02      	bgt.n	800c498 <_printf_float+0x150>
 800c492:	6822      	ldr	r2, [r4, #0]
 800c494:	07d2      	lsls	r2, r2, #31
 800c496:	d501      	bpl.n	800c49c <_printf_float+0x154>
 800c498:	3301      	adds	r3, #1
 800c49a:	6123      	str	r3, [r4, #16]
 800c49c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d0a2      	beq.n	800c3ea <_printf_float+0xa2>
 800c4a4:	232d      	movs	r3, #45	@ 0x2d
 800c4a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4aa:	e79e      	b.n	800c3ea <_printf_float+0xa2>
 800c4ac:	9a06      	ldr	r2, [sp, #24]
 800c4ae:	2a47      	cmp	r2, #71	@ 0x47
 800c4b0:	d1c2      	bne.n	800c438 <_printf_float+0xf0>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d1c0      	bne.n	800c438 <_printf_float+0xf0>
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	e7bd      	b.n	800c436 <_printf_float+0xee>
 800c4ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c4be:	d9db      	bls.n	800c478 <_printf_float+0x130>
 800c4c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c4c4:	d118      	bne.n	800c4f8 <_printf_float+0x1b0>
 800c4c6:	2900      	cmp	r1, #0
 800c4c8:	6863      	ldr	r3, [r4, #4]
 800c4ca:	dd0b      	ble.n	800c4e4 <_printf_float+0x19c>
 800c4cc:	6121      	str	r1, [r4, #16]
 800c4ce:	b913      	cbnz	r3, 800c4d6 <_printf_float+0x18e>
 800c4d0:	6822      	ldr	r2, [r4, #0]
 800c4d2:	07d0      	lsls	r0, r2, #31
 800c4d4:	d502      	bpl.n	800c4dc <_printf_float+0x194>
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	440b      	add	r3, r1
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c4de:	f04f 0900 	mov.w	r9, #0
 800c4e2:	e7db      	b.n	800c49c <_printf_float+0x154>
 800c4e4:	b913      	cbnz	r3, 800c4ec <_printf_float+0x1a4>
 800c4e6:	6822      	ldr	r2, [r4, #0]
 800c4e8:	07d2      	lsls	r2, r2, #31
 800c4ea:	d501      	bpl.n	800c4f0 <_printf_float+0x1a8>
 800c4ec:	3302      	adds	r3, #2
 800c4ee:	e7f4      	b.n	800c4da <_printf_float+0x192>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	e7f2      	b.n	800c4da <_printf_float+0x192>
 800c4f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c4f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4fa:	4299      	cmp	r1, r3
 800c4fc:	db05      	blt.n	800c50a <_printf_float+0x1c2>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	6121      	str	r1, [r4, #16]
 800c502:	07d8      	lsls	r0, r3, #31
 800c504:	d5ea      	bpl.n	800c4dc <_printf_float+0x194>
 800c506:	1c4b      	adds	r3, r1, #1
 800c508:	e7e7      	b.n	800c4da <_printf_float+0x192>
 800c50a:	2900      	cmp	r1, #0
 800c50c:	bfd4      	ite	le
 800c50e:	f1c1 0202 	rsble	r2, r1, #2
 800c512:	2201      	movgt	r2, #1
 800c514:	4413      	add	r3, r2
 800c516:	e7e0      	b.n	800c4da <_printf_float+0x192>
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	055a      	lsls	r2, r3, #21
 800c51c:	d407      	bmi.n	800c52e <_printf_float+0x1e6>
 800c51e:	6923      	ldr	r3, [r4, #16]
 800c520:	4642      	mov	r2, r8
 800c522:	4631      	mov	r1, r6
 800c524:	4628      	mov	r0, r5
 800c526:	47b8      	blx	r7
 800c528:	3001      	adds	r0, #1
 800c52a:	d12b      	bne.n	800c584 <_printf_float+0x23c>
 800c52c:	e767      	b.n	800c3fe <_printf_float+0xb6>
 800c52e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c532:	f240 80dd 	bls.w	800c6f0 <_printf_float+0x3a8>
 800c536:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c53a:	2200      	movs	r2, #0
 800c53c:	2300      	movs	r3, #0
 800c53e:	f7f4 facb 	bl	8000ad8 <__aeabi_dcmpeq>
 800c542:	2800      	cmp	r0, #0
 800c544:	d033      	beq.n	800c5ae <_printf_float+0x266>
 800c546:	4a37      	ldr	r2, [pc, #220]	@ (800c624 <_printf_float+0x2dc>)
 800c548:	2301      	movs	r3, #1
 800c54a:	4631      	mov	r1, r6
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b8      	blx	r7
 800c550:	3001      	adds	r0, #1
 800c552:	f43f af54 	beq.w	800c3fe <_printf_float+0xb6>
 800c556:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c55a:	4543      	cmp	r3, r8
 800c55c:	db02      	blt.n	800c564 <_printf_float+0x21c>
 800c55e:	6823      	ldr	r3, [r4, #0]
 800c560:	07d8      	lsls	r0, r3, #31
 800c562:	d50f      	bpl.n	800c584 <_printf_float+0x23c>
 800c564:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	f43f af45 	beq.w	800c3fe <_printf_float+0xb6>
 800c574:	f04f 0900 	mov.w	r9, #0
 800c578:	f108 38ff 	add.w	r8, r8, #4294967295
 800c57c:	f104 0a1a 	add.w	sl, r4, #26
 800c580:	45c8      	cmp	r8, r9
 800c582:	dc09      	bgt.n	800c598 <_printf_float+0x250>
 800c584:	6823      	ldr	r3, [r4, #0]
 800c586:	079b      	lsls	r3, r3, #30
 800c588:	f100 8103 	bmi.w	800c792 <_printf_float+0x44a>
 800c58c:	68e0      	ldr	r0, [r4, #12]
 800c58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c590:	4298      	cmp	r0, r3
 800c592:	bfb8      	it	lt
 800c594:	4618      	movlt	r0, r3
 800c596:	e734      	b.n	800c402 <_printf_float+0xba>
 800c598:	2301      	movs	r3, #1
 800c59a:	4652      	mov	r2, sl
 800c59c:	4631      	mov	r1, r6
 800c59e:	4628      	mov	r0, r5
 800c5a0:	47b8      	blx	r7
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	f43f af2b 	beq.w	800c3fe <_printf_float+0xb6>
 800c5a8:	f109 0901 	add.w	r9, r9, #1
 800c5ac:	e7e8      	b.n	800c580 <_printf_float+0x238>
 800c5ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	dc39      	bgt.n	800c628 <_printf_float+0x2e0>
 800c5b4:	4a1b      	ldr	r2, [pc, #108]	@ (800c624 <_printf_float+0x2dc>)
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	4631      	mov	r1, r6
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	47b8      	blx	r7
 800c5be:	3001      	adds	r0, #1
 800c5c0:	f43f af1d 	beq.w	800c3fe <_printf_float+0xb6>
 800c5c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c5c8:	ea59 0303 	orrs.w	r3, r9, r3
 800c5cc:	d102      	bne.n	800c5d4 <_printf_float+0x28c>
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	07d9      	lsls	r1, r3, #31
 800c5d2:	d5d7      	bpl.n	800c584 <_printf_float+0x23c>
 800c5d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f43f af0d 	beq.w	800c3fe <_printf_float+0xb6>
 800c5e4:	f04f 0a00 	mov.w	sl, #0
 800c5e8:	f104 0b1a 	add.w	fp, r4, #26
 800c5ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5ee:	425b      	negs	r3, r3
 800c5f0:	4553      	cmp	r3, sl
 800c5f2:	dc01      	bgt.n	800c5f8 <_printf_float+0x2b0>
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	e793      	b.n	800c520 <_printf_float+0x1d8>
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	465a      	mov	r2, fp
 800c5fc:	4631      	mov	r1, r6
 800c5fe:	4628      	mov	r0, r5
 800c600:	47b8      	blx	r7
 800c602:	3001      	adds	r0, #1
 800c604:	f43f aefb 	beq.w	800c3fe <_printf_float+0xb6>
 800c608:	f10a 0a01 	add.w	sl, sl, #1
 800c60c:	e7ee      	b.n	800c5ec <_printf_float+0x2a4>
 800c60e:	bf00      	nop
 800c610:	7fefffff 	.word	0x7fefffff
 800c614:	0801124c 	.word	0x0801124c
 800c618:	08011250 	.word	0x08011250
 800c61c:	08011254 	.word	0x08011254
 800c620:	08011258 	.word	0x08011258
 800c624:	080115e8 	.word	0x080115e8
 800c628:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c62a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c62e:	4553      	cmp	r3, sl
 800c630:	bfa8      	it	ge
 800c632:	4653      	movge	r3, sl
 800c634:	2b00      	cmp	r3, #0
 800c636:	4699      	mov	r9, r3
 800c638:	dc36      	bgt.n	800c6a8 <_printf_float+0x360>
 800c63a:	f04f 0b00 	mov.w	fp, #0
 800c63e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c642:	f104 021a 	add.w	r2, r4, #26
 800c646:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c648:	9306      	str	r3, [sp, #24]
 800c64a:	eba3 0309 	sub.w	r3, r3, r9
 800c64e:	455b      	cmp	r3, fp
 800c650:	dc31      	bgt.n	800c6b6 <_printf_float+0x36e>
 800c652:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c654:	459a      	cmp	sl, r3
 800c656:	dc3a      	bgt.n	800c6ce <_printf_float+0x386>
 800c658:	6823      	ldr	r3, [r4, #0]
 800c65a:	07da      	lsls	r2, r3, #31
 800c65c:	d437      	bmi.n	800c6ce <_printf_float+0x386>
 800c65e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c660:	ebaa 0903 	sub.w	r9, sl, r3
 800c664:	9b06      	ldr	r3, [sp, #24]
 800c666:	ebaa 0303 	sub.w	r3, sl, r3
 800c66a:	4599      	cmp	r9, r3
 800c66c:	bfa8      	it	ge
 800c66e:	4699      	movge	r9, r3
 800c670:	f1b9 0f00 	cmp.w	r9, #0
 800c674:	dc33      	bgt.n	800c6de <_printf_float+0x396>
 800c676:	f04f 0800 	mov.w	r8, #0
 800c67a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c67e:	f104 0b1a 	add.w	fp, r4, #26
 800c682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c684:	ebaa 0303 	sub.w	r3, sl, r3
 800c688:	eba3 0309 	sub.w	r3, r3, r9
 800c68c:	4543      	cmp	r3, r8
 800c68e:	f77f af79 	ble.w	800c584 <_printf_float+0x23c>
 800c692:	2301      	movs	r3, #1
 800c694:	465a      	mov	r2, fp
 800c696:	4631      	mov	r1, r6
 800c698:	4628      	mov	r0, r5
 800c69a:	47b8      	blx	r7
 800c69c:	3001      	adds	r0, #1
 800c69e:	f43f aeae 	beq.w	800c3fe <_printf_float+0xb6>
 800c6a2:	f108 0801 	add.w	r8, r8, #1
 800c6a6:	e7ec      	b.n	800c682 <_printf_float+0x33a>
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d1c2      	bne.n	800c63a <_printf_float+0x2f2>
 800c6b4:	e6a3      	b.n	800c3fe <_printf_float+0xb6>
 800c6b6:	2301      	movs	r3, #1
 800c6b8:	4631      	mov	r1, r6
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	9206      	str	r2, [sp, #24]
 800c6be:	47b8      	blx	r7
 800c6c0:	3001      	adds	r0, #1
 800c6c2:	f43f ae9c 	beq.w	800c3fe <_printf_float+0xb6>
 800c6c6:	9a06      	ldr	r2, [sp, #24]
 800c6c8:	f10b 0b01 	add.w	fp, fp, #1
 800c6cc:	e7bb      	b.n	800c646 <_printf_float+0x2fe>
 800c6ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	d1c0      	bne.n	800c65e <_printf_float+0x316>
 800c6dc:	e68f      	b.n	800c3fe <_printf_float+0xb6>
 800c6de:	9a06      	ldr	r2, [sp, #24]
 800c6e0:	464b      	mov	r3, r9
 800c6e2:	4442      	add	r2, r8
 800c6e4:	4631      	mov	r1, r6
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	47b8      	blx	r7
 800c6ea:	3001      	adds	r0, #1
 800c6ec:	d1c3      	bne.n	800c676 <_printf_float+0x32e>
 800c6ee:	e686      	b.n	800c3fe <_printf_float+0xb6>
 800c6f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c6f4:	f1ba 0f01 	cmp.w	sl, #1
 800c6f8:	dc01      	bgt.n	800c6fe <_printf_float+0x3b6>
 800c6fa:	07db      	lsls	r3, r3, #31
 800c6fc:	d536      	bpl.n	800c76c <_printf_float+0x424>
 800c6fe:	2301      	movs	r3, #1
 800c700:	4642      	mov	r2, r8
 800c702:	4631      	mov	r1, r6
 800c704:	4628      	mov	r0, r5
 800c706:	47b8      	blx	r7
 800c708:	3001      	adds	r0, #1
 800c70a:	f43f ae78 	beq.w	800c3fe <_printf_float+0xb6>
 800c70e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c712:	4631      	mov	r1, r6
 800c714:	4628      	mov	r0, r5
 800c716:	47b8      	blx	r7
 800c718:	3001      	adds	r0, #1
 800c71a:	f43f ae70 	beq.w	800c3fe <_printf_float+0xb6>
 800c71e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c722:	2200      	movs	r2, #0
 800c724:	2300      	movs	r3, #0
 800c726:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c72a:	f7f4 f9d5 	bl	8000ad8 <__aeabi_dcmpeq>
 800c72e:	b9c0      	cbnz	r0, 800c762 <_printf_float+0x41a>
 800c730:	4653      	mov	r3, sl
 800c732:	f108 0201 	add.w	r2, r8, #1
 800c736:	4631      	mov	r1, r6
 800c738:	4628      	mov	r0, r5
 800c73a:	47b8      	blx	r7
 800c73c:	3001      	adds	r0, #1
 800c73e:	d10c      	bne.n	800c75a <_printf_float+0x412>
 800c740:	e65d      	b.n	800c3fe <_printf_float+0xb6>
 800c742:	2301      	movs	r3, #1
 800c744:	465a      	mov	r2, fp
 800c746:	4631      	mov	r1, r6
 800c748:	4628      	mov	r0, r5
 800c74a:	47b8      	blx	r7
 800c74c:	3001      	adds	r0, #1
 800c74e:	f43f ae56 	beq.w	800c3fe <_printf_float+0xb6>
 800c752:	f108 0801 	add.w	r8, r8, #1
 800c756:	45d0      	cmp	r8, sl
 800c758:	dbf3      	blt.n	800c742 <_printf_float+0x3fa>
 800c75a:	464b      	mov	r3, r9
 800c75c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c760:	e6df      	b.n	800c522 <_printf_float+0x1da>
 800c762:	f04f 0800 	mov.w	r8, #0
 800c766:	f104 0b1a 	add.w	fp, r4, #26
 800c76a:	e7f4      	b.n	800c756 <_printf_float+0x40e>
 800c76c:	2301      	movs	r3, #1
 800c76e:	4642      	mov	r2, r8
 800c770:	e7e1      	b.n	800c736 <_printf_float+0x3ee>
 800c772:	2301      	movs	r3, #1
 800c774:	464a      	mov	r2, r9
 800c776:	4631      	mov	r1, r6
 800c778:	4628      	mov	r0, r5
 800c77a:	47b8      	blx	r7
 800c77c:	3001      	adds	r0, #1
 800c77e:	f43f ae3e 	beq.w	800c3fe <_printf_float+0xb6>
 800c782:	f108 0801 	add.w	r8, r8, #1
 800c786:	68e3      	ldr	r3, [r4, #12]
 800c788:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c78a:	1a5b      	subs	r3, r3, r1
 800c78c:	4543      	cmp	r3, r8
 800c78e:	dcf0      	bgt.n	800c772 <_printf_float+0x42a>
 800c790:	e6fc      	b.n	800c58c <_printf_float+0x244>
 800c792:	f04f 0800 	mov.w	r8, #0
 800c796:	f104 0919 	add.w	r9, r4, #25
 800c79a:	e7f4      	b.n	800c786 <_printf_float+0x43e>

0800c79c <_printf_common>:
 800c79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a0:	4616      	mov	r6, r2
 800c7a2:	4698      	mov	r8, r3
 800c7a4:	688a      	ldr	r2, [r1, #8]
 800c7a6:	690b      	ldr	r3, [r1, #16]
 800c7a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	bfb8      	it	lt
 800c7b0:	4613      	movlt	r3, r2
 800c7b2:	6033      	str	r3, [r6, #0]
 800c7b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	b10a      	cbz	r2, 800c7c2 <_printf_common+0x26>
 800c7be:	3301      	adds	r3, #1
 800c7c0:	6033      	str	r3, [r6, #0]
 800c7c2:	6823      	ldr	r3, [r4, #0]
 800c7c4:	0699      	lsls	r1, r3, #26
 800c7c6:	bf42      	ittt	mi
 800c7c8:	6833      	ldrmi	r3, [r6, #0]
 800c7ca:	3302      	addmi	r3, #2
 800c7cc:	6033      	strmi	r3, [r6, #0]
 800c7ce:	6825      	ldr	r5, [r4, #0]
 800c7d0:	f015 0506 	ands.w	r5, r5, #6
 800c7d4:	d106      	bne.n	800c7e4 <_printf_common+0x48>
 800c7d6:	f104 0a19 	add.w	sl, r4, #25
 800c7da:	68e3      	ldr	r3, [r4, #12]
 800c7dc:	6832      	ldr	r2, [r6, #0]
 800c7de:	1a9b      	subs	r3, r3, r2
 800c7e0:	42ab      	cmp	r3, r5
 800c7e2:	dc26      	bgt.n	800c832 <_printf_common+0x96>
 800c7e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7e8:	6822      	ldr	r2, [r4, #0]
 800c7ea:	3b00      	subs	r3, #0
 800c7ec:	bf18      	it	ne
 800c7ee:	2301      	movne	r3, #1
 800c7f0:	0692      	lsls	r2, r2, #26
 800c7f2:	d42b      	bmi.n	800c84c <_printf_common+0xb0>
 800c7f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7f8:	4641      	mov	r1, r8
 800c7fa:	4638      	mov	r0, r7
 800c7fc:	47c8      	blx	r9
 800c7fe:	3001      	adds	r0, #1
 800c800:	d01e      	beq.n	800c840 <_printf_common+0xa4>
 800c802:	6823      	ldr	r3, [r4, #0]
 800c804:	6922      	ldr	r2, [r4, #16]
 800c806:	f003 0306 	and.w	r3, r3, #6
 800c80a:	2b04      	cmp	r3, #4
 800c80c:	bf02      	ittt	eq
 800c80e:	68e5      	ldreq	r5, [r4, #12]
 800c810:	6833      	ldreq	r3, [r6, #0]
 800c812:	1aed      	subeq	r5, r5, r3
 800c814:	68a3      	ldr	r3, [r4, #8]
 800c816:	bf0c      	ite	eq
 800c818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c81c:	2500      	movne	r5, #0
 800c81e:	4293      	cmp	r3, r2
 800c820:	bfc4      	itt	gt
 800c822:	1a9b      	subgt	r3, r3, r2
 800c824:	18ed      	addgt	r5, r5, r3
 800c826:	2600      	movs	r6, #0
 800c828:	341a      	adds	r4, #26
 800c82a:	42b5      	cmp	r5, r6
 800c82c:	d11a      	bne.n	800c864 <_printf_common+0xc8>
 800c82e:	2000      	movs	r0, #0
 800c830:	e008      	b.n	800c844 <_printf_common+0xa8>
 800c832:	2301      	movs	r3, #1
 800c834:	4652      	mov	r2, sl
 800c836:	4641      	mov	r1, r8
 800c838:	4638      	mov	r0, r7
 800c83a:	47c8      	blx	r9
 800c83c:	3001      	adds	r0, #1
 800c83e:	d103      	bne.n	800c848 <_printf_common+0xac>
 800c840:	f04f 30ff 	mov.w	r0, #4294967295
 800c844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c848:	3501      	adds	r5, #1
 800c84a:	e7c6      	b.n	800c7da <_printf_common+0x3e>
 800c84c:	18e1      	adds	r1, r4, r3
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	2030      	movs	r0, #48	@ 0x30
 800c852:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c856:	4422      	add	r2, r4
 800c858:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c85c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c860:	3302      	adds	r3, #2
 800c862:	e7c7      	b.n	800c7f4 <_printf_common+0x58>
 800c864:	2301      	movs	r3, #1
 800c866:	4622      	mov	r2, r4
 800c868:	4641      	mov	r1, r8
 800c86a:	4638      	mov	r0, r7
 800c86c:	47c8      	blx	r9
 800c86e:	3001      	adds	r0, #1
 800c870:	d0e6      	beq.n	800c840 <_printf_common+0xa4>
 800c872:	3601      	adds	r6, #1
 800c874:	e7d9      	b.n	800c82a <_printf_common+0x8e>
	...

0800c878 <_printf_i>:
 800c878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c87c:	7e0f      	ldrb	r7, [r1, #24]
 800c87e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c880:	2f78      	cmp	r7, #120	@ 0x78
 800c882:	4691      	mov	r9, r2
 800c884:	4680      	mov	r8, r0
 800c886:	460c      	mov	r4, r1
 800c888:	469a      	mov	sl, r3
 800c88a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c88e:	d807      	bhi.n	800c8a0 <_printf_i+0x28>
 800c890:	2f62      	cmp	r7, #98	@ 0x62
 800c892:	d80a      	bhi.n	800c8aa <_printf_i+0x32>
 800c894:	2f00      	cmp	r7, #0
 800c896:	f000 80d2 	beq.w	800ca3e <_printf_i+0x1c6>
 800c89a:	2f58      	cmp	r7, #88	@ 0x58
 800c89c:	f000 80b9 	beq.w	800ca12 <_printf_i+0x19a>
 800c8a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c8a8:	e03a      	b.n	800c920 <_printf_i+0xa8>
 800c8aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c8ae:	2b15      	cmp	r3, #21
 800c8b0:	d8f6      	bhi.n	800c8a0 <_printf_i+0x28>
 800c8b2:	a101      	add	r1, pc, #4	@ (adr r1, 800c8b8 <_printf_i+0x40>)
 800c8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8b8:	0800c911 	.word	0x0800c911
 800c8bc:	0800c925 	.word	0x0800c925
 800c8c0:	0800c8a1 	.word	0x0800c8a1
 800c8c4:	0800c8a1 	.word	0x0800c8a1
 800c8c8:	0800c8a1 	.word	0x0800c8a1
 800c8cc:	0800c8a1 	.word	0x0800c8a1
 800c8d0:	0800c925 	.word	0x0800c925
 800c8d4:	0800c8a1 	.word	0x0800c8a1
 800c8d8:	0800c8a1 	.word	0x0800c8a1
 800c8dc:	0800c8a1 	.word	0x0800c8a1
 800c8e0:	0800c8a1 	.word	0x0800c8a1
 800c8e4:	0800ca25 	.word	0x0800ca25
 800c8e8:	0800c94f 	.word	0x0800c94f
 800c8ec:	0800c9df 	.word	0x0800c9df
 800c8f0:	0800c8a1 	.word	0x0800c8a1
 800c8f4:	0800c8a1 	.word	0x0800c8a1
 800c8f8:	0800ca47 	.word	0x0800ca47
 800c8fc:	0800c8a1 	.word	0x0800c8a1
 800c900:	0800c94f 	.word	0x0800c94f
 800c904:	0800c8a1 	.word	0x0800c8a1
 800c908:	0800c8a1 	.word	0x0800c8a1
 800c90c:	0800c9e7 	.word	0x0800c9e7
 800c910:	6833      	ldr	r3, [r6, #0]
 800c912:	1d1a      	adds	r2, r3, #4
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6032      	str	r2, [r6, #0]
 800c918:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c91c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c920:	2301      	movs	r3, #1
 800c922:	e09d      	b.n	800ca60 <_printf_i+0x1e8>
 800c924:	6833      	ldr	r3, [r6, #0]
 800c926:	6820      	ldr	r0, [r4, #0]
 800c928:	1d19      	adds	r1, r3, #4
 800c92a:	6031      	str	r1, [r6, #0]
 800c92c:	0606      	lsls	r6, r0, #24
 800c92e:	d501      	bpl.n	800c934 <_printf_i+0xbc>
 800c930:	681d      	ldr	r5, [r3, #0]
 800c932:	e003      	b.n	800c93c <_printf_i+0xc4>
 800c934:	0645      	lsls	r5, r0, #25
 800c936:	d5fb      	bpl.n	800c930 <_printf_i+0xb8>
 800c938:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c93c:	2d00      	cmp	r5, #0
 800c93e:	da03      	bge.n	800c948 <_printf_i+0xd0>
 800c940:	232d      	movs	r3, #45	@ 0x2d
 800c942:	426d      	negs	r5, r5
 800c944:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c948:	4859      	ldr	r0, [pc, #356]	@ (800cab0 <_printf_i+0x238>)
 800c94a:	230a      	movs	r3, #10
 800c94c:	e011      	b.n	800c972 <_printf_i+0xfa>
 800c94e:	6821      	ldr	r1, [r4, #0]
 800c950:	6833      	ldr	r3, [r6, #0]
 800c952:	0608      	lsls	r0, r1, #24
 800c954:	f853 5b04 	ldr.w	r5, [r3], #4
 800c958:	d402      	bmi.n	800c960 <_printf_i+0xe8>
 800c95a:	0649      	lsls	r1, r1, #25
 800c95c:	bf48      	it	mi
 800c95e:	b2ad      	uxthmi	r5, r5
 800c960:	2f6f      	cmp	r7, #111	@ 0x6f
 800c962:	4853      	ldr	r0, [pc, #332]	@ (800cab0 <_printf_i+0x238>)
 800c964:	6033      	str	r3, [r6, #0]
 800c966:	bf14      	ite	ne
 800c968:	230a      	movne	r3, #10
 800c96a:	2308      	moveq	r3, #8
 800c96c:	2100      	movs	r1, #0
 800c96e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c972:	6866      	ldr	r6, [r4, #4]
 800c974:	60a6      	str	r6, [r4, #8]
 800c976:	2e00      	cmp	r6, #0
 800c978:	bfa2      	ittt	ge
 800c97a:	6821      	ldrge	r1, [r4, #0]
 800c97c:	f021 0104 	bicge.w	r1, r1, #4
 800c980:	6021      	strge	r1, [r4, #0]
 800c982:	b90d      	cbnz	r5, 800c988 <_printf_i+0x110>
 800c984:	2e00      	cmp	r6, #0
 800c986:	d04b      	beq.n	800ca20 <_printf_i+0x1a8>
 800c988:	4616      	mov	r6, r2
 800c98a:	fbb5 f1f3 	udiv	r1, r5, r3
 800c98e:	fb03 5711 	mls	r7, r3, r1, r5
 800c992:	5dc7      	ldrb	r7, [r0, r7]
 800c994:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c998:	462f      	mov	r7, r5
 800c99a:	42bb      	cmp	r3, r7
 800c99c:	460d      	mov	r5, r1
 800c99e:	d9f4      	bls.n	800c98a <_printf_i+0x112>
 800c9a0:	2b08      	cmp	r3, #8
 800c9a2:	d10b      	bne.n	800c9bc <_printf_i+0x144>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	07df      	lsls	r7, r3, #31
 800c9a8:	d508      	bpl.n	800c9bc <_printf_i+0x144>
 800c9aa:	6923      	ldr	r3, [r4, #16]
 800c9ac:	6861      	ldr	r1, [r4, #4]
 800c9ae:	4299      	cmp	r1, r3
 800c9b0:	bfde      	ittt	le
 800c9b2:	2330      	movle	r3, #48	@ 0x30
 800c9b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c9b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c9bc:	1b92      	subs	r2, r2, r6
 800c9be:	6122      	str	r2, [r4, #16]
 800c9c0:	f8cd a000 	str.w	sl, [sp]
 800c9c4:	464b      	mov	r3, r9
 800c9c6:	aa03      	add	r2, sp, #12
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4640      	mov	r0, r8
 800c9cc:	f7ff fee6 	bl	800c79c <_printf_common>
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d14a      	bne.n	800ca6a <_printf_i+0x1f2>
 800c9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d8:	b004      	add	sp, #16
 800c9da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	f043 0320 	orr.w	r3, r3, #32
 800c9e4:	6023      	str	r3, [r4, #0]
 800c9e6:	4833      	ldr	r0, [pc, #204]	@ (800cab4 <_printf_i+0x23c>)
 800c9e8:	2778      	movs	r7, #120	@ 0x78
 800c9ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9ee:	6823      	ldr	r3, [r4, #0]
 800c9f0:	6831      	ldr	r1, [r6, #0]
 800c9f2:	061f      	lsls	r7, r3, #24
 800c9f4:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9f8:	d402      	bmi.n	800ca00 <_printf_i+0x188>
 800c9fa:	065f      	lsls	r7, r3, #25
 800c9fc:	bf48      	it	mi
 800c9fe:	b2ad      	uxthmi	r5, r5
 800ca00:	6031      	str	r1, [r6, #0]
 800ca02:	07d9      	lsls	r1, r3, #31
 800ca04:	bf44      	itt	mi
 800ca06:	f043 0320 	orrmi.w	r3, r3, #32
 800ca0a:	6023      	strmi	r3, [r4, #0]
 800ca0c:	b11d      	cbz	r5, 800ca16 <_printf_i+0x19e>
 800ca0e:	2310      	movs	r3, #16
 800ca10:	e7ac      	b.n	800c96c <_printf_i+0xf4>
 800ca12:	4827      	ldr	r0, [pc, #156]	@ (800cab0 <_printf_i+0x238>)
 800ca14:	e7e9      	b.n	800c9ea <_printf_i+0x172>
 800ca16:	6823      	ldr	r3, [r4, #0]
 800ca18:	f023 0320 	bic.w	r3, r3, #32
 800ca1c:	6023      	str	r3, [r4, #0]
 800ca1e:	e7f6      	b.n	800ca0e <_printf_i+0x196>
 800ca20:	4616      	mov	r6, r2
 800ca22:	e7bd      	b.n	800c9a0 <_printf_i+0x128>
 800ca24:	6833      	ldr	r3, [r6, #0]
 800ca26:	6825      	ldr	r5, [r4, #0]
 800ca28:	6961      	ldr	r1, [r4, #20]
 800ca2a:	1d18      	adds	r0, r3, #4
 800ca2c:	6030      	str	r0, [r6, #0]
 800ca2e:	062e      	lsls	r6, r5, #24
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	d501      	bpl.n	800ca38 <_printf_i+0x1c0>
 800ca34:	6019      	str	r1, [r3, #0]
 800ca36:	e002      	b.n	800ca3e <_printf_i+0x1c6>
 800ca38:	0668      	lsls	r0, r5, #25
 800ca3a:	d5fb      	bpl.n	800ca34 <_printf_i+0x1bc>
 800ca3c:	8019      	strh	r1, [r3, #0]
 800ca3e:	2300      	movs	r3, #0
 800ca40:	6123      	str	r3, [r4, #16]
 800ca42:	4616      	mov	r6, r2
 800ca44:	e7bc      	b.n	800c9c0 <_printf_i+0x148>
 800ca46:	6833      	ldr	r3, [r6, #0]
 800ca48:	1d1a      	adds	r2, r3, #4
 800ca4a:	6032      	str	r2, [r6, #0]
 800ca4c:	681e      	ldr	r6, [r3, #0]
 800ca4e:	6862      	ldr	r2, [r4, #4]
 800ca50:	2100      	movs	r1, #0
 800ca52:	4630      	mov	r0, r6
 800ca54:	f7f3 fbc4 	bl	80001e0 <memchr>
 800ca58:	b108      	cbz	r0, 800ca5e <_printf_i+0x1e6>
 800ca5a:	1b80      	subs	r0, r0, r6
 800ca5c:	6060      	str	r0, [r4, #4]
 800ca5e:	6863      	ldr	r3, [r4, #4]
 800ca60:	6123      	str	r3, [r4, #16]
 800ca62:	2300      	movs	r3, #0
 800ca64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca68:	e7aa      	b.n	800c9c0 <_printf_i+0x148>
 800ca6a:	6923      	ldr	r3, [r4, #16]
 800ca6c:	4632      	mov	r2, r6
 800ca6e:	4649      	mov	r1, r9
 800ca70:	4640      	mov	r0, r8
 800ca72:	47d0      	blx	sl
 800ca74:	3001      	adds	r0, #1
 800ca76:	d0ad      	beq.n	800c9d4 <_printf_i+0x15c>
 800ca78:	6823      	ldr	r3, [r4, #0]
 800ca7a:	079b      	lsls	r3, r3, #30
 800ca7c:	d413      	bmi.n	800caa6 <_printf_i+0x22e>
 800ca7e:	68e0      	ldr	r0, [r4, #12]
 800ca80:	9b03      	ldr	r3, [sp, #12]
 800ca82:	4298      	cmp	r0, r3
 800ca84:	bfb8      	it	lt
 800ca86:	4618      	movlt	r0, r3
 800ca88:	e7a6      	b.n	800c9d8 <_printf_i+0x160>
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	4632      	mov	r2, r6
 800ca8e:	4649      	mov	r1, r9
 800ca90:	4640      	mov	r0, r8
 800ca92:	47d0      	blx	sl
 800ca94:	3001      	adds	r0, #1
 800ca96:	d09d      	beq.n	800c9d4 <_printf_i+0x15c>
 800ca98:	3501      	adds	r5, #1
 800ca9a:	68e3      	ldr	r3, [r4, #12]
 800ca9c:	9903      	ldr	r1, [sp, #12]
 800ca9e:	1a5b      	subs	r3, r3, r1
 800caa0:	42ab      	cmp	r3, r5
 800caa2:	dcf2      	bgt.n	800ca8a <_printf_i+0x212>
 800caa4:	e7eb      	b.n	800ca7e <_printf_i+0x206>
 800caa6:	2500      	movs	r5, #0
 800caa8:	f104 0619 	add.w	r6, r4, #25
 800caac:	e7f5      	b.n	800ca9a <_printf_i+0x222>
 800caae:	bf00      	nop
 800cab0:	0801125c 	.word	0x0801125c
 800cab4:	0801126d 	.word	0x0801126d

0800cab8 <_scanf_float>:
 800cab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabc:	b087      	sub	sp, #28
 800cabe:	4617      	mov	r7, r2
 800cac0:	9303      	str	r3, [sp, #12]
 800cac2:	688b      	ldr	r3, [r1, #8]
 800cac4:	1e5a      	subs	r2, r3, #1
 800cac6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800caca:	bf81      	itttt	hi
 800cacc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cad0:	eb03 0b05 	addhi.w	fp, r3, r5
 800cad4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cad8:	608b      	strhi	r3, [r1, #8]
 800cada:	680b      	ldr	r3, [r1, #0]
 800cadc:	460a      	mov	r2, r1
 800cade:	f04f 0500 	mov.w	r5, #0
 800cae2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800cae6:	f842 3b1c 	str.w	r3, [r2], #28
 800caea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800caee:	4680      	mov	r8, r0
 800caf0:	460c      	mov	r4, r1
 800caf2:	bf98      	it	ls
 800caf4:	f04f 0b00 	movls.w	fp, #0
 800caf8:	9201      	str	r2, [sp, #4]
 800cafa:	4616      	mov	r6, r2
 800cafc:	46aa      	mov	sl, r5
 800cafe:	46a9      	mov	r9, r5
 800cb00:	9502      	str	r5, [sp, #8]
 800cb02:	68a2      	ldr	r2, [r4, #8]
 800cb04:	b152      	cbz	r2, 800cb1c <_scanf_float+0x64>
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	2b4e      	cmp	r3, #78	@ 0x4e
 800cb0c:	d864      	bhi.n	800cbd8 <_scanf_float+0x120>
 800cb0e:	2b40      	cmp	r3, #64	@ 0x40
 800cb10:	d83c      	bhi.n	800cb8c <_scanf_float+0xd4>
 800cb12:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800cb16:	b2c8      	uxtb	r0, r1
 800cb18:	280e      	cmp	r0, #14
 800cb1a:	d93a      	bls.n	800cb92 <_scanf_float+0xda>
 800cb1c:	f1b9 0f00 	cmp.w	r9, #0
 800cb20:	d003      	beq.n	800cb2a <_scanf_float+0x72>
 800cb22:	6823      	ldr	r3, [r4, #0]
 800cb24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb2e:	f1ba 0f01 	cmp.w	sl, #1
 800cb32:	f200 8117 	bhi.w	800cd64 <_scanf_float+0x2ac>
 800cb36:	9b01      	ldr	r3, [sp, #4]
 800cb38:	429e      	cmp	r6, r3
 800cb3a:	f200 8108 	bhi.w	800cd4e <_scanf_float+0x296>
 800cb3e:	2001      	movs	r0, #1
 800cb40:	b007      	add	sp, #28
 800cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb46:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cb4a:	2a0d      	cmp	r2, #13
 800cb4c:	d8e6      	bhi.n	800cb1c <_scanf_float+0x64>
 800cb4e:	a101      	add	r1, pc, #4	@ (adr r1, 800cb54 <_scanf_float+0x9c>)
 800cb50:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cb54:	0800cc9b 	.word	0x0800cc9b
 800cb58:	0800cb1d 	.word	0x0800cb1d
 800cb5c:	0800cb1d 	.word	0x0800cb1d
 800cb60:	0800cb1d 	.word	0x0800cb1d
 800cb64:	0800ccfb 	.word	0x0800ccfb
 800cb68:	0800ccd3 	.word	0x0800ccd3
 800cb6c:	0800cb1d 	.word	0x0800cb1d
 800cb70:	0800cb1d 	.word	0x0800cb1d
 800cb74:	0800cca9 	.word	0x0800cca9
 800cb78:	0800cb1d 	.word	0x0800cb1d
 800cb7c:	0800cb1d 	.word	0x0800cb1d
 800cb80:	0800cb1d 	.word	0x0800cb1d
 800cb84:	0800cb1d 	.word	0x0800cb1d
 800cb88:	0800cc61 	.word	0x0800cc61
 800cb8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cb90:	e7db      	b.n	800cb4a <_scanf_float+0x92>
 800cb92:	290e      	cmp	r1, #14
 800cb94:	d8c2      	bhi.n	800cb1c <_scanf_float+0x64>
 800cb96:	a001      	add	r0, pc, #4	@ (adr r0, 800cb9c <_scanf_float+0xe4>)
 800cb98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cb9c:	0800cc51 	.word	0x0800cc51
 800cba0:	0800cb1d 	.word	0x0800cb1d
 800cba4:	0800cc51 	.word	0x0800cc51
 800cba8:	0800cce7 	.word	0x0800cce7
 800cbac:	0800cb1d 	.word	0x0800cb1d
 800cbb0:	0800cbf9 	.word	0x0800cbf9
 800cbb4:	0800cc37 	.word	0x0800cc37
 800cbb8:	0800cc37 	.word	0x0800cc37
 800cbbc:	0800cc37 	.word	0x0800cc37
 800cbc0:	0800cc37 	.word	0x0800cc37
 800cbc4:	0800cc37 	.word	0x0800cc37
 800cbc8:	0800cc37 	.word	0x0800cc37
 800cbcc:	0800cc37 	.word	0x0800cc37
 800cbd0:	0800cc37 	.word	0x0800cc37
 800cbd4:	0800cc37 	.word	0x0800cc37
 800cbd8:	2b6e      	cmp	r3, #110	@ 0x6e
 800cbda:	d809      	bhi.n	800cbf0 <_scanf_float+0x138>
 800cbdc:	2b60      	cmp	r3, #96	@ 0x60
 800cbde:	d8b2      	bhi.n	800cb46 <_scanf_float+0x8e>
 800cbe0:	2b54      	cmp	r3, #84	@ 0x54
 800cbe2:	d07b      	beq.n	800ccdc <_scanf_float+0x224>
 800cbe4:	2b59      	cmp	r3, #89	@ 0x59
 800cbe6:	d199      	bne.n	800cb1c <_scanf_float+0x64>
 800cbe8:	2d07      	cmp	r5, #7
 800cbea:	d197      	bne.n	800cb1c <_scanf_float+0x64>
 800cbec:	2508      	movs	r5, #8
 800cbee:	e02c      	b.n	800cc4a <_scanf_float+0x192>
 800cbf0:	2b74      	cmp	r3, #116	@ 0x74
 800cbf2:	d073      	beq.n	800ccdc <_scanf_float+0x224>
 800cbf4:	2b79      	cmp	r3, #121	@ 0x79
 800cbf6:	e7f6      	b.n	800cbe6 <_scanf_float+0x12e>
 800cbf8:	6821      	ldr	r1, [r4, #0]
 800cbfa:	05c8      	lsls	r0, r1, #23
 800cbfc:	d51b      	bpl.n	800cc36 <_scanf_float+0x17e>
 800cbfe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cc02:	6021      	str	r1, [r4, #0]
 800cc04:	f109 0901 	add.w	r9, r9, #1
 800cc08:	f1bb 0f00 	cmp.w	fp, #0
 800cc0c:	d003      	beq.n	800cc16 <_scanf_float+0x15e>
 800cc0e:	3201      	adds	r2, #1
 800cc10:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cc14:	60a2      	str	r2, [r4, #8]
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	60a3      	str	r3, [r4, #8]
 800cc1c:	6923      	ldr	r3, [r4, #16]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	6123      	str	r3, [r4, #16]
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	3b01      	subs	r3, #1
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	607b      	str	r3, [r7, #4]
 800cc2a:	f340 8087 	ble.w	800cd3c <_scanf_float+0x284>
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	3301      	adds	r3, #1
 800cc32:	603b      	str	r3, [r7, #0]
 800cc34:	e765      	b.n	800cb02 <_scanf_float+0x4a>
 800cc36:	eb1a 0105 	adds.w	r1, sl, r5
 800cc3a:	f47f af6f 	bne.w	800cb1c <_scanf_float+0x64>
 800cc3e:	6822      	ldr	r2, [r4, #0]
 800cc40:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800cc44:	6022      	str	r2, [r4, #0]
 800cc46:	460d      	mov	r5, r1
 800cc48:	468a      	mov	sl, r1
 800cc4a:	f806 3b01 	strb.w	r3, [r6], #1
 800cc4e:	e7e2      	b.n	800cc16 <_scanf_float+0x15e>
 800cc50:	6822      	ldr	r2, [r4, #0]
 800cc52:	0610      	lsls	r0, r2, #24
 800cc54:	f57f af62 	bpl.w	800cb1c <_scanf_float+0x64>
 800cc58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc5c:	6022      	str	r2, [r4, #0]
 800cc5e:	e7f4      	b.n	800cc4a <_scanf_float+0x192>
 800cc60:	f1ba 0f00 	cmp.w	sl, #0
 800cc64:	d10e      	bne.n	800cc84 <_scanf_float+0x1cc>
 800cc66:	f1b9 0f00 	cmp.w	r9, #0
 800cc6a:	d10e      	bne.n	800cc8a <_scanf_float+0x1d2>
 800cc6c:	6822      	ldr	r2, [r4, #0]
 800cc6e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800cc72:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800cc76:	d108      	bne.n	800cc8a <_scanf_float+0x1d2>
 800cc78:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cc7c:	6022      	str	r2, [r4, #0]
 800cc7e:	f04f 0a01 	mov.w	sl, #1
 800cc82:	e7e2      	b.n	800cc4a <_scanf_float+0x192>
 800cc84:	f1ba 0f02 	cmp.w	sl, #2
 800cc88:	d055      	beq.n	800cd36 <_scanf_float+0x27e>
 800cc8a:	2d01      	cmp	r5, #1
 800cc8c:	d002      	beq.n	800cc94 <_scanf_float+0x1dc>
 800cc8e:	2d04      	cmp	r5, #4
 800cc90:	f47f af44 	bne.w	800cb1c <_scanf_float+0x64>
 800cc94:	3501      	adds	r5, #1
 800cc96:	b2ed      	uxtb	r5, r5
 800cc98:	e7d7      	b.n	800cc4a <_scanf_float+0x192>
 800cc9a:	f1ba 0f01 	cmp.w	sl, #1
 800cc9e:	f47f af3d 	bne.w	800cb1c <_scanf_float+0x64>
 800cca2:	f04f 0a02 	mov.w	sl, #2
 800cca6:	e7d0      	b.n	800cc4a <_scanf_float+0x192>
 800cca8:	b97d      	cbnz	r5, 800ccca <_scanf_float+0x212>
 800ccaa:	f1b9 0f00 	cmp.w	r9, #0
 800ccae:	f47f af38 	bne.w	800cb22 <_scanf_float+0x6a>
 800ccb2:	6822      	ldr	r2, [r4, #0]
 800ccb4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ccb8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ccbc:	f040 8108 	bne.w	800ced0 <_scanf_float+0x418>
 800ccc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ccc4:	6022      	str	r2, [r4, #0]
 800ccc6:	2501      	movs	r5, #1
 800ccc8:	e7bf      	b.n	800cc4a <_scanf_float+0x192>
 800ccca:	2d03      	cmp	r5, #3
 800cccc:	d0e2      	beq.n	800cc94 <_scanf_float+0x1dc>
 800ccce:	2d05      	cmp	r5, #5
 800ccd0:	e7de      	b.n	800cc90 <_scanf_float+0x1d8>
 800ccd2:	2d02      	cmp	r5, #2
 800ccd4:	f47f af22 	bne.w	800cb1c <_scanf_float+0x64>
 800ccd8:	2503      	movs	r5, #3
 800ccda:	e7b6      	b.n	800cc4a <_scanf_float+0x192>
 800ccdc:	2d06      	cmp	r5, #6
 800ccde:	f47f af1d 	bne.w	800cb1c <_scanf_float+0x64>
 800cce2:	2507      	movs	r5, #7
 800cce4:	e7b1      	b.n	800cc4a <_scanf_float+0x192>
 800cce6:	6822      	ldr	r2, [r4, #0]
 800cce8:	0591      	lsls	r1, r2, #22
 800ccea:	f57f af17 	bpl.w	800cb1c <_scanf_float+0x64>
 800ccee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ccf2:	6022      	str	r2, [r4, #0]
 800ccf4:	f8cd 9008 	str.w	r9, [sp, #8]
 800ccf8:	e7a7      	b.n	800cc4a <_scanf_float+0x192>
 800ccfa:	6822      	ldr	r2, [r4, #0]
 800ccfc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cd00:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cd04:	d006      	beq.n	800cd14 <_scanf_float+0x25c>
 800cd06:	0550      	lsls	r0, r2, #21
 800cd08:	f57f af08 	bpl.w	800cb1c <_scanf_float+0x64>
 800cd0c:	f1b9 0f00 	cmp.w	r9, #0
 800cd10:	f000 80de 	beq.w	800ced0 <_scanf_float+0x418>
 800cd14:	0591      	lsls	r1, r2, #22
 800cd16:	bf58      	it	pl
 800cd18:	9902      	ldrpl	r1, [sp, #8]
 800cd1a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cd1e:	bf58      	it	pl
 800cd20:	eba9 0101 	subpl.w	r1, r9, r1
 800cd24:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800cd28:	bf58      	it	pl
 800cd2a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cd2e:	6022      	str	r2, [r4, #0]
 800cd30:	f04f 0900 	mov.w	r9, #0
 800cd34:	e789      	b.n	800cc4a <_scanf_float+0x192>
 800cd36:	f04f 0a03 	mov.w	sl, #3
 800cd3a:	e786      	b.n	800cc4a <_scanf_float+0x192>
 800cd3c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cd40:	4639      	mov	r1, r7
 800cd42:	4640      	mov	r0, r8
 800cd44:	4798      	blx	r3
 800cd46:	2800      	cmp	r0, #0
 800cd48:	f43f aedb 	beq.w	800cb02 <_scanf_float+0x4a>
 800cd4c:	e6e6      	b.n	800cb1c <_scanf_float+0x64>
 800cd4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd56:	463a      	mov	r2, r7
 800cd58:	4640      	mov	r0, r8
 800cd5a:	4798      	blx	r3
 800cd5c:	6923      	ldr	r3, [r4, #16]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	6123      	str	r3, [r4, #16]
 800cd62:	e6e8      	b.n	800cb36 <_scanf_float+0x7e>
 800cd64:	1e6b      	subs	r3, r5, #1
 800cd66:	2b06      	cmp	r3, #6
 800cd68:	d824      	bhi.n	800cdb4 <_scanf_float+0x2fc>
 800cd6a:	2d02      	cmp	r5, #2
 800cd6c:	d836      	bhi.n	800cddc <_scanf_float+0x324>
 800cd6e:	9b01      	ldr	r3, [sp, #4]
 800cd70:	429e      	cmp	r6, r3
 800cd72:	f67f aee4 	bls.w	800cb3e <_scanf_float+0x86>
 800cd76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cd7e:	463a      	mov	r2, r7
 800cd80:	4640      	mov	r0, r8
 800cd82:	4798      	blx	r3
 800cd84:	6923      	ldr	r3, [r4, #16]
 800cd86:	3b01      	subs	r3, #1
 800cd88:	6123      	str	r3, [r4, #16]
 800cd8a:	e7f0      	b.n	800cd6e <_scanf_float+0x2b6>
 800cd8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cd90:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cd94:	463a      	mov	r2, r7
 800cd96:	4640      	mov	r0, r8
 800cd98:	4798      	blx	r3
 800cd9a:	6923      	ldr	r3, [r4, #16]
 800cd9c:	3b01      	subs	r3, #1
 800cd9e:	6123      	str	r3, [r4, #16]
 800cda0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cda4:	fa5f fa8a 	uxtb.w	sl, sl
 800cda8:	f1ba 0f02 	cmp.w	sl, #2
 800cdac:	d1ee      	bne.n	800cd8c <_scanf_float+0x2d4>
 800cdae:	3d03      	subs	r5, #3
 800cdb0:	b2ed      	uxtb	r5, r5
 800cdb2:	1b76      	subs	r6, r6, r5
 800cdb4:	6823      	ldr	r3, [r4, #0]
 800cdb6:	05da      	lsls	r2, r3, #23
 800cdb8:	d530      	bpl.n	800ce1c <_scanf_float+0x364>
 800cdba:	055b      	lsls	r3, r3, #21
 800cdbc:	d511      	bpl.n	800cde2 <_scanf_float+0x32a>
 800cdbe:	9b01      	ldr	r3, [sp, #4]
 800cdc0:	429e      	cmp	r6, r3
 800cdc2:	f67f aebc 	bls.w	800cb3e <_scanf_float+0x86>
 800cdc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cdce:	463a      	mov	r2, r7
 800cdd0:	4640      	mov	r0, r8
 800cdd2:	4798      	blx	r3
 800cdd4:	6923      	ldr	r3, [r4, #16]
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	6123      	str	r3, [r4, #16]
 800cdda:	e7f0      	b.n	800cdbe <_scanf_float+0x306>
 800cddc:	46aa      	mov	sl, r5
 800cdde:	46b3      	mov	fp, r6
 800cde0:	e7de      	b.n	800cda0 <_scanf_float+0x2e8>
 800cde2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cde6:	6923      	ldr	r3, [r4, #16]
 800cde8:	2965      	cmp	r1, #101	@ 0x65
 800cdea:	f103 33ff 	add.w	r3, r3, #4294967295
 800cdee:	f106 35ff 	add.w	r5, r6, #4294967295
 800cdf2:	6123      	str	r3, [r4, #16]
 800cdf4:	d00c      	beq.n	800ce10 <_scanf_float+0x358>
 800cdf6:	2945      	cmp	r1, #69	@ 0x45
 800cdf8:	d00a      	beq.n	800ce10 <_scanf_float+0x358>
 800cdfa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cdfe:	463a      	mov	r2, r7
 800ce00:	4640      	mov	r0, r8
 800ce02:	4798      	blx	r3
 800ce04:	6923      	ldr	r3, [r4, #16]
 800ce06:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ce0a:	3b01      	subs	r3, #1
 800ce0c:	1eb5      	subs	r5, r6, #2
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ce14:	463a      	mov	r2, r7
 800ce16:	4640      	mov	r0, r8
 800ce18:	4798      	blx	r3
 800ce1a:	462e      	mov	r6, r5
 800ce1c:	6822      	ldr	r2, [r4, #0]
 800ce1e:	f012 0210 	ands.w	r2, r2, #16
 800ce22:	d001      	beq.n	800ce28 <_scanf_float+0x370>
 800ce24:	2000      	movs	r0, #0
 800ce26:	e68b      	b.n	800cb40 <_scanf_float+0x88>
 800ce28:	7032      	strb	r2, [r6, #0]
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ce30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ce34:	d11c      	bne.n	800ce70 <_scanf_float+0x3b8>
 800ce36:	9b02      	ldr	r3, [sp, #8]
 800ce38:	454b      	cmp	r3, r9
 800ce3a:	eba3 0209 	sub.w	r2, r3, r9
 800ce3e:	d123      	bne.n	800ce88 <_scanf_float+0x3d0>
 800ce40:	9901      	ldr	r1, [sp, #4]
 800ce42:	2200      	movs	r2, #0
 800ce44:	4640      	mov	r0, r8
 800ce46:	f002 fbe3 	bl	800f610 <_strtod_r>
 800ce4a:	9b03      	ldr	r3, [sp, #12]
 800ce4c:	6821      	ldr	r1, [r4, #0]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f011 0f02 	tst.w	r1, #2
 800ce54:	ec57 6b10 	vmov	r6, r7, d0
 800ce58:	f103 0204 	add.w	r2, r3, #4
 800ce5c:	d01f      	beq.n	800ce9e <_scanf_float+0x3e6>
 800ce5e:	9903      	ldr	r1, [sp, #12]
 800ce60:	600a      	str	r2, [r1, #0]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	e9c3 6700 	strd	r6, r7, [r3]
 800ce68:	68e3      	ldr	r3, [r4, #12]
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	60e3      	str	r3, [r4, #12]
 800ce6e:	e7d9      	b.n	800ce24 <_scanf_float+0x36c>
 800ce70:	9b04      	ldr	r3, [sp, #16]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d0e4      	beq.n	800ce40 <_scanf_float+0x388>
 800ce76:	9905      	ldr	r1, [sp, #20]
 800ce78:	230a      	movs	r3, #10
 800ce7a:	3101      	adds	r1, #1
 800ce7c:	4640      	mov	r0, r8
 800ce7e:	f002 fc47 	bl	800f710 <_strtol_r>
 800ce82:	9b04      	ldr	r3, [sp, #16]
 800ce84:	9e05      	ldr	r6, [sp, #20]
 800ce86:	1ac2      	subs	r2, r0, r3
 800ce88:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ce8c:	429e      	cmp	r6, r3
 800ce8e:	bf28      	it	cs
 800ce90:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ce94:	4910      	ldr	r1, [pc, #64]	@ (800ced8 <_scanf_float+0x420>)
 800ce96:	4630      	mov	r0, r6
 800ce98:	f000 f8e4 	bl	800d064 <siprintf>
 800ce9c:	e7d0      	b.n	800ce40 <_scanf_float+0x388>
 800ce9e:	f011 0f04 	tst.w	r1, #4
 800cea2:	9903      	ldr	r1, [sp, #12]
 800cea4:	600a      	str	r2, [r1, #0]
 800cea6:	d1dc      	bne.n	800ce62 <_scanf_float+0x3aa>
 800cea8:	681d      	ldr	r5, [r3, #0]
 800ceaa:	4632      	mov	r2, r6
 800ceac:	463b      	mov	r3, r7
 800ceae:	4630      	mov	r0, r6
 800ceb0:	4639      	mov	r1, r7
 800ceb2:	f7f3 fe43 	bl	8000b3c <__aeabi_dcmpun>
 800ceb6:	b128      	cbz	r0, 800cec4 <_scanf_float+0x40c>
 800ceb8:	4808      	ldr	r0, [pc, #32]	@ (800cedc <_scanf_float+0x424>)
 800ceba:	f000 fa57 	bl	800d36c <nanf>
 800cebe:	ed85 0a00 	vstr	s0, [r5]
 800cec2:	e7d1      	b.n	800ce68 <_scanf_float+0x3b0>
 800cec4:	4630      	mov	r0, r6
 800cec6:	4639      	mov	r1, r7
 800cec8:	f7f3 fe96 	bl	8000bf8 <__aeabi_d2f>
 800cecc:	6028      	str	r0, [r5, #0]
 800cece:	e7cb      	b.n	800ce68 <_scanf_float+0x3b0>
 800ced0:	f04f 0900 	mov.w	r9, #0
 800ced4:	e629      	b.n	800cb2a <_scanf_float+0x72>
 800ced6:	bf00      	nop
 800ced8:	0801127e 	.word	0x0801127e
 800cedc:	08011630 	.word	0x08011630

0800cee0 <std>:
 800cee0:	2300      	movs	r3, #0
 800cee2:	b510      	push	{r4, lr}
 800cee4:	4604      	mov	r4, r0
 800cee6:	e9c0 3300 	strd	r3, r3, [r0]
 800ceea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ceee:	6083      	str	r3, [r0, #8]
 800cef0:	8181      	strh	r1, [r0, #12]
 800cef2:	6643      	str	r3, [r0, #100]	@ 0x64
 800cef4:	81c2      	strh	r2, [r0, #14]
 800cef6:	6183      	str	r3, [r0, #24]
 800cef8:	4619      	mov	r1, r3
 800cefa:	2208      	movs	r2, #8
 800cefc:	305c      	adds	r0, #92	@ 0x5c
 800cefe:	f000 f940 	bl	800d182 <memset>
 800cf02:	4b0d      	ldr	r3, [pc, #52]	@ (800cf38 <std+0x58>)
 800cf04:	6263      	str	r3, [r4, #36]	@ 0x24
 800cf06:	4b0d      	ldr	r3, [pc, #52]	@ (800cf3c <std+0x5c>)
 800cf08:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cf0a:	4b0d      	ldr	r3, [pc, #52]	@ (800cf40 <std+0x60>)
 800cf0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cf0e:	4b0d      	ldr	r3, [pc, #52]	@ (800cf44 <std+0x64>)
 800cf10:	6323      	str	r3, [r4, #48]	@ 0x30
 800cf12:	4b0d      	ldr	r3, [pc, #52]	@ (800cf48 <std+0x68>)
 800cf14:	6224      	str	r4, [r4, #32]
 800cf16:	429c      	cmp	r4, r3
 800cf18:	d006      	beq.n	800cf28 <std+0x48>
 800cf1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cf1e:	4294      	cmp	r4, r2
 800cf20:	d002      	beq.n	800cf28 <std+0x48>
 800cf22:	33d0      	adds	r3, #208	@ 0xd0
 800cf24:	429c      	cmp	r4, r3
 800cf26:	d105      	bne.n	800cf34 <std+0x54>
 800cf28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cf2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf30:	f000 ba0a 	b.w	800d348 <__retarget_lock_init_recursive>
 800cf34:	bd10      	pop	{r4, pc}
 800cf36:	bf00      	nop
 800cf38:	0800d0f9 	.word	0x0800d0f9
 800cf3c:	0800d11f 	.word	0x0800d11f
 800cf40:	0800d157 	.word	0x0800d157
 800cf44:	0800d17b 	.word	0x0800d17b
 800cf48:	20001fa8 	.word	0x20001fa8

0800cf4c <stdio_exit_handler>:
 800cf4c:	4a02      	ldr	r2, [pc, #8]	@ (800cf58 <stdio_exit_handler+0xc>)
 800cf4e:	4903      	ldr	r1, [pc, #12]	@ (800cf5c <stdio_exit_handler+0x10>)
 800cf50:	4803      	ldr	r0, [pc, #12]	@ (800cf60 <stdio_exit_handler+0x14>)
 800cf52:	f000 b869 	b.w	800d028 <_fwalk_sglue>
 800cf56:	bf00      	nop
 800cf58:	2000001c 	.word	0x2000001c
 800cf5c:	08010101 	.word	0x08010101
 800cf60:	2000002c 	.word	0x2000002c

0800cf64 <cleanup_stdio>:
 800cf64:	6841      	ldr	r1, [r0, #4]
 800cf66:	4b0c      	ldr	r3, [pc, #48]	@ (800cf98 <cleanup_stdio+0x34>)
 800cf68:	4299      	cmp	r1, r3
 800cf6a:	b510      	push	{r4, lr}
 800cf6c:	4604      	mov	r4, r0
 800cf6e:	d001      	beq.n	800cf74 <cleanup_stdio+0x10>
 800cf70:	f003 f8c6 	bl	8010100 <_fflush_r>
 800cf74:	68a1      	ldr	r1, [r4, #8]
 800cf76:	4b09      	ldr	r3, [pc, #36]	@ (800cf9c <cleanup_stdio+0x38>)
 800cf78:	4299      	cmp	r1, r3
 800cf7a:	d002      	beq.n	800cf82 <cleanup_stdio+0x1e>
 800cf7c:	4620      	mov	r0, r4
 800cf7e:	f003 f8bf 	bl	8010100 <_fflush_r>
 800cf82:	68e1      	ldr	r1, [r4, #12]
 800cf84:	4b06      	ldr	r3, [pc, #24]	@ (800cfa0 <cleanup_stdio+0x3c>)
 800cf86:	4299      	cmp	r1, r3
 800cf88:	d004      	beq.n	800cf94 <cleanup_stdio+0x30>
 800cf8a:	4620      	mov	r0, r4
 800cf8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf90:	f003 b8b6 	b.w	8010100 <_fflush_r>
 800cf94:	bd10      	pop	{r4, pc}
 800cf96:	bf00      	nop
 800cf98:	20001fa8 	.word	0x20001fa8
 800cf9c:	20002010 	.word	0x20002010
 800cfa0:	20002078 	.word	0x20002078

0800cfa4 <global_stdio_init.part.0>:
 800cfa4:	b510      	push	{r4, lr}
 800cfa6:	4b0b      	ldr	r3, [pc, #44]	@ (800cfd4 <global_stdio_init.part.0+0x30>)
 800cfa8:	4c0b      	ldr	r4, [pc, #44]	@ (800cfd8 <global_stdio_init.part.0+0x34>)
 800cfaa:	4a0c      	ldr	r2, [pc, #48]	@ (800cfdc <global_stdio_init.part.0+0x38>)
 800cfac:	601a      	str	r2, [r3, #0]
 800cfae:	4620      	mov	r0, r4
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	2104      	movs	r1, #4
 800cfb4:	f7ff ff94 	bl	800cee0 <std>
 800cfb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cfbc:	2201      	movs	r2, #1
 800cfbe:	2109      	movs	r1, #9
 800cfc0:	f7ff ff8e 	bl	800cee0 <std>
 800cfc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cfc8:	2202      	movs	r2, #2
 800cfca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cfce:	2112      	movs	r1, #18
 800cfd0:	f7ff bf86 	b.w	800cee0 <std>
 800cfd4:	200020e0 	.word	0x200020e0
 800cfd8:	20001fa8 	.word	0x20001fa8
 800cfdc:	0800cf4d 	.word	0x0800cf4d

0800cfe0 <__sfp_lock_acquire>:
 800cfe0:	4801      	ldr	r0, [pc, #4]	@ (800cfe8 <__sfp_lock_acquire+0x8>)
 800cfe2:	f000 b9b2 	b.w	800d34a <__retarget_lock_acquire_recursive>
 800cfe6:	bf00      	nop
 800cfe8:	200020e9 	.word	0x200020e9

0800cfec <__sfp_lock_release>:
 800cfec:	4801      	ldr	r0, [pc, #4]	@ (800cff4 <__sfp_lock_release+0x8>)
 800cfee:	f000 b9ad 	b.w	800d34c <__retarget_lock_release_recursive>
 800cff2:	bf00      	nop
 800cff4:	200020e9 	.word	0x200020e9

0800cff8 <__sinit>:
 800cff8:	b510      	push	{r4, lr}
 800cffa:	4604      	mov	r4, r0
 800cffc:	f7ff fff0 	bl	800cfe0 <__sfp_lock_acquire>
 800d000:	6a23      	ldr	r3, [r4, #32]
 800d002:	b11b      	cbz	r3, 800d00c <__sinit+0x14>
 800d004:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d008:	f7ff bff0 	b.w	800cfec <__sfp_lock_release>
 800d00c:	4b04      	ldr	r3, [pc, #16]	@ (800d020 <__sinit+0x28>)
 800d00e:	6223      	str	r3, [r4, #32]
 800d010:	4b04      	ldr	r3, [pc, #16]	@ (800d024 <__sinit+0x2c>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d1f5      	bne.n	800d004 <__sinit+0xc>
 800d018:	f7ff ffc4 	bl	800cfa4 <global_stdio_init.part.0>
 800d01c:	e7f2      	b.n	800d004 <__sinit+0xc>
 800d01e:	bf00      	nop
 800d020:	0800cf65 	.word	0x0800cf65
 800d024:	200020e0 	.word	0x200020e0

0800d028 <_fwalk_sglue>:
 800d028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d02c:	4607      	mov	r7, r0
 800d02e:	4688      	mov	r8, r1
 800d030:	4614      	mov	r4, r2
 800d032:	2600      	movs	r6, #0
 800d034:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d038:	f1b9 0901 	subs.w	r9, r9, #1
 800d03c:	d505      	bpl.n	800d04a <_fwalk_sglue+0x22>
 800d03e:	6824      	ldr	r4, [r4, #0]
 800d040:	2c00      	cmp	r4, #0
 800d042:	d1f7      	bne.n	800d034 <_fwalk_sglue+0xc>
 800d044:	4630      	mov	r0, r6
 800d046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d04a:	89ab      	ldrh	r3, [r5, #12]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d907      	bls.n	800d060 <_fwalk_sglue+0x38>
 800d050:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d054:	3301      	adds	r3, #1
 800d056:	d003      	beq.n	800d060 <_fwalk_sglue+0x38>
 800d058:	4629      	mov	r1, r5
 800d05a:	4638      	mov	r0, r7
 800d05c:	47c0      	blx	r8
 800d05e:	4306      	orrs	r6, r0
 800d060:	3568      	adds	r5, #104	@ 0x68
 800d062:	e7e9      	b.n	800d038 <_fwalk_sglue+0x10>

0800d064 <siprintf>:
 800d064:	b40e      	push	{r1, r2, r3}
 800d066:	b500      	push	{lr}
 800d068:	b09c      	sub	sp, #112	@ 0x70
 800d06a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d06c:	9002      	str	r0, [sp, #8]
 800d06e:	9006      	str	r0, [sp, #24]
 800d070:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d074:	4809      	ldr	r0, [pc, #36]	@ (800d09c <siprintf+0x38>)
 800d076:	9107      	str	r1, [sp, #28]
 800d078:	9104      	str	r1, [sp, #16]
 800d07a:	4909      	ldr	r1, [pc, #36]	@ (800d0a0 <siprintf+0x3c>)
 800d07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d080:	9105      	str	r1, [sp, #20]
 800d082:	6800      	ldr	r0, [r0, #0]
 800d084:	9301      	str	r3, [sp, #4]
 800d086:	a902      	add	r1, sp, #8
 800d088:	f002 fba0 	bl	800f7cc <_svfiprintf_r>
 800d08c:	9b02      	ldr	r3, [sp, #8]
 800d08e:	2200      	movs	r2, #0
 800d090:	701a      	strb	r2, [r3, #0]
 800d092:	b01c      	add	sp, #112	@ 0x70
 800d094:	f85d eb04 	ldr.w	lr, [sp], #4
 800d098:	b003      	add	sp, #12
 800d09a:	4770      	bx	lr
 800d09c:	20000028 	.word	0x20000028
 800d0a0:	ffff0208 	.word	0xffff0208

0800d0a4 <siscanf>:
 800d0a4:	b40e      	push	{r1, r2, r3}
 800d0a6:	b530      	push	{r4, r5, lr}
 800d0a8:	b09c      	sub	sp, #112	@ 0x70
 800d0aa:	ac1f      	add	r4, sp, #124	@ 0x7c
 800d0ac:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800d0b0:	f854 5b04 	ldr.w	r5, [r4], #4
 800d0b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800d0b8:	9002      	str	r0, [sp, #8]
 800d0ba:	9006      	str	r0, [sp, #24]
 800d0bc:	f7f3 f8e0 	bl	8000280 <strlen>
 800d0c0:	4b0b      	ldr	r3, [pc, #44]	@ (800d0f0 <siscanf+0x4c>)
 800d0c2:	9003      	str	r0, [sp, #12]
 800d0c4:	9007      	str	r0, [sp, #28]
 800d0c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0c8:	480a      	ldr	r0, [pc, #40]	@ (800d0f4 <siscanf+0x50>)
 800d0ca:	9401      	str	r4, [sp, #4]
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d0d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800d0d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d0d6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d0da:	462a      	mov	r2, r5
 800d0dc:	4623      	mov	r3, r4
 800d0de:	a902      	add	r1, sp, #8
 800d0e0:	6800      	ldr	r0, [r0, #0]
 800d0e2:	f002 fcc7 	bl	800fa74 <__ssvfiscanf_r>
 800d0e6:	b01c      	add	sp, #112	@ 0x70
 800d0e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0ec:	b003      	add	sp, #12
 800d0ee:	4770      	bx	lr
 800d0f0:	0800d11b 	.word	0x0800d11b
 800d0f4:	20000028 	.word	0x20000028

0800d0f8 <__sread>:
 800d0f8:	b510      	push	{r4, lr}
 800d0fa:	460c      	mov	r4, r1
 800d0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d100:	f000 f8c4 	bl	800d28c <_read_r>
 800d104:	2800      	cmp	r0, #0
 800d106:	bfab      	itete	ge
 800d108:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d10a:	89a3      	ldrhlt	r3, [r4, #12]
 800d10c:	181b      	addge	r3, r3, r0
 800d10e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d112:	bfac      	ite	ge
 800d114:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d116:	81a3      	strhlt	r3, [r4, #12]
 800d118:	bd10      	pop	{r4, pc}

0800d11a <__seofread>:
 800d11a:	2000      	movs	r0, #0
 800d11c:	4770      	bx	lr

0800d11e <__swrite>:
 800d11e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d122:	461f      	mov	r7, r3
 800d124:	898b      	ldrh	r3, [r1, #12]
 800d126:	05db      	lsls	r3, r3, #23
 800d128:	4605      	mov	r5, r0
 800d12a:	460c      	mov	r4, r1
 800d12c:	4616      	mov	r6, r2
 800d12e:	d505      	bpl.n	800d13c <__swrite+0x1e>
 800d130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d134:	2302      	movs	r3, #2
 800d136:	2200      	movs	r2, #0
 800d138:	f000 f896 	bl	800d268 <_lseek_r>
 800d13c:	89a3      	ldrh	r3, [r4, #12]
 800d13e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d142:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d146:	81a3      	strh	r3, [r4, #12]
 800d148:	4632      	mov	r2, r6
 800d14a:	463b      	mov	r3, r7
 800d14c:	4628      	mov	r0, r5
 800d14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	f000 b8bd 	b.w	800d2d0 <_write_r>

0800d156 <__sseek>:
 800d156:	b510      	push	{r4, lr}
 800d158:	460c      	mov	r4, r1
 800d15a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15e:	f000 f883 	bl	800d268 <_lseek_r>
 800d162:	1c43      	adds	r3, r0, #1
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	bf15      	itete	ne
 800d168:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d16a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d16e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d172:	81a3      	strheq	r3, [r4, #12]
 800d174:	bf18      	it	ne
 800d176:	81a3      	strhne	r3, [r4, #12]
 800d178:	bd10      	pop	{r4, pc}

0800d17a <__sclose>:
 800d17a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d17e:	f000 b80d 	b.w	800d19c <_close_r>

0800d182 <memset>:
 800d182:	4402      	add	r2, r0
 800d184:	4603      	mov	r3, r0
 800d186:	4293      	cmp	r3, r2
 800d188:	d100      	bne.n	800d18c <memset+0xa>
 800d18a:	4770      	bx	lr
 800d18c:	f803 1b01 	strb.w	r1, [r3], #1
 800d190:	e7f9      	b.n	800d186 <memset+0x4>
	...

0800d194 <_localeconv_r>:
 800d194:	4800      	ldr	r0, [pc, #0]	@ (800d198 <_localeconv_r+0x4>)
 800d196:	4770      	bx	lr
 800d198:	20000168 	.word	0x20000168

0800d19c <_close_r>:
 800d19c:	b538      	push	{r3, r4, r5, lr}
 800d19e:	4d06      	ldr	r5, [pc, #24]	@ (800d1b8 <_close_r+0x1c>)
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	4604      	mov	r4, r0
 800d1a4:	4608      	mov	r0, r1
 800d1a6:	602b      	str	r3, [r5, #0]
 800d1a8:	f7f5 fb98 	bl	80028dc <_close>
 800d1ac:	1c43      	adds	r3, r0, #1
 800d1ae:	d102      	bne.n	800d1b6 <_close_r+0x1a>
 800d1b0:	682b      	ldr	r3, [r5, #0]
 800d1b2:	b103      	cbz	r3, 800d1b6 <_close_r+0x1a>
 800d1b4:	6023      	str	r3, [r4, #0]
 800d1b6:	bd38      	pop	{r3, r4, r5, pc}
 800d1b8:	200020e4 	.word	0x200020e4

0800d1bc <_reclaim_reent>:
 800d1bc:	4b29      	ldr	r3, [pc, #164]	@ (800d264 <_reclaim_reent+0xa8>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4283      	cmp	r3, r0
 800d1c2:	b570      	push	{r4, r5, r6, lr}
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	d04b      	beq.n	800d260 <_reclaim_reent+0xa4>
 800d1c8:	69c3      	ldr	r3, [r0, #28]
 800d1ca:	b1ab      	cbz	r3, 800d1f8 <_reclaim_reent+0x3c>
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	b16b      	cbz	r3, 800d1ec <_reclaim_reent+0x30>
 800d1d0:	2500      	movs	r5, #0
 800d1d2:	69e3      	ldr	r3, [r4, #28]
 800d1d4:	68db      	ldr	r3, [r3, #12]
 800d1d6:	5959      	ldr	r1, [r3, r5]
 800d1d8:	2900      	cmp	r1, #0
 800d1da:	d13b      	bne.n	800d254 <_reclaim_reent+0x98>
 800d1dc:	3504      	adds	r5, #4
 800d1de:	2d80      	cmp	r5, #128	@ 0x80
 800d1e0:	d1f7      	bne.n	800d1d2 <_reclaim_reent+0x16>
 800d1e2:	69e3      	ldr	r3, [r4, #28]
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	68d9      	ldr	r1, [r3, #12]
 800d1e8:	f000 ff12 	bl	800e010 <_free_r>
 800d1ec:	69e3      	ldr	r3, [r4, #28]
 800d1ee:	6819      	ldr	r1, [r3, #0]
 800d1f0:	b111      	cbz	r1, 800d1f8 <_reclaim_reent+0x3c>
 800d1f2:	4620      	mov	r0, r4
 800d1f4:	f000 ff0c 	bl	800e010 <_free_r>
 800d1f8:	6961      	ldr	r1, [r4, #20]
 800d1fa:	b111      	cbz	r1, 800d202 <_reclaim_reent+0x46>
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 ff07 	bl	800e010 <_free_r>
 800d202:	69e1      	ldr	r1, [r4, #28]
 800d204:	b111      	cbz	r1, 800d20c <_reclaim_reent+0x50>
 800d206:	4620      	mov	r0, r4
 800d208:	f000 ff02 	bl	800e010 <_free_r>
 800d20c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d20e:	b111      	cbz	r1, 800d216 <_reclaim_reent+0x5a>
 800d210:	4620      	mov	r0, r4
 800d212:	f000 fefd 	bl	800e010 <_free_r>
 800d216:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d218:	b111      	cbz	r1, 800d220 <_reclaim_reent+0x64>
 800d21a:	4620      	mov	r0, r4
 800d21c:	f000 fef8 	bl	800e010 <_free_r>
 800d220:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d222:	b111      	cbz	r1, 800d22a <_reclaim_reent+0x6e>
 800d224:	4620      	mov	r0, r4
 800d226:	f000 fef3 	bl	800e010 <_free_r>
 800d22a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d22c:	b111      	cbz	r1, 800d234 <_reclaim_reent+0x78>
 800d22e:	4620      	mov	r0, r4
 800d230:	f000 feee 	bl	800e010 <_free_r>
 800d234:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d236:	b111      	cbz	r1, 800d23e <_reclaim_reent+0x82>
 800d238:	4620      	mov	r0, r4
 800d23a:	f000 fee9 	bl	800e010 <_free_r>
 800d23e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d240:	b111      	cbz	r1, 800d248 <_reclaim_reent+0x8c>
 800d242:	4620      	mov	r0, r4
 800d244:	f000 fee4 	bl	800e010 <_free_r>
 800d248:	6a23      	ldr	r3, [r4, #32]
 800d24a:	b14b      	cbz	r3, 800d260 <_reclaim_reent+0xa4>
 800d24c:	4620      	mov	r0, r4
 800d24e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d252:	4718      	bx	r3
 800d254:	680e      	ldr	r6, [r1, #0]
 800d256:	4620      	mov	r0, r4
 800d258:	f000 feda 	bl	800e010 <_free_r>
 800d25c:	4631      	mov	r1, r6
 800d25e:	e7bb      	b.n	800d1d8 <_reclaim_reent+0x1c>
 800d260:	bd70      	pop	{r4, r5, r6, pc}
 800d262:	bf00      	nop
 800d264:	20000028 	.word	0x20000028

0800d268 <_lseek_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d07      	ldr	r5, [pc, #28]	@ (800d288 <_lseek_r+0x20>)
 800d26c:	4604      	mov	r4, r0
 800d26e:	4608      	mov	r0, r1
 800d270:	4611      	mov	r1, r2
 800d272:	2200      	movs	r2, #0
 800d274:	602a      	str	r2, [r5, #0]
 800d276:	461a      	mov	r2, r3
 800d278:	f7f5 fb57 	bl	800292a <_lseek>
 800d27c:	1c43      	adds	r3, r0, #1
 800d27e:	d102      	bne.n	800d286 <_lseek_r+0x1e>
 800d280:	682b      	ldr	r3, [r5, #0]
 800d282:	b103      	cbz	r3, 800d286 <_lseek_r+0x1e>
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	bd38      	pop	{r3, r4, r5, pc}
 800d288:	200020e4 	.word	0x200020e4

0800d28c <_read_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d07      	ldr	r5, [pc, #28]	@ (800d2ac <_read_r+0x20>)
 800d290:	4604      	mov	r4, r0
 800d292:	4608      	mov	r0, r1
 800d294:	4611      	mov	r1, r2
 800d296:	2200      	movs	r2, #0
 800d298:	602a      	str	r2, [r5, #0]
 800d29a:	461a      	mov	r2, r3
 800d29c:	f7f5 fae5 	bl	800286a <_read>
 800d2a0:	1c43      	adds	r3, r0, #1
 800d2a2:	d102      	bne.n	800d2aa <_read_r+0x1e>
 800d2a4:	682b      	ldr	r3, [r5, #0]
 800d2a6:	b103      	cbz	r3, 800d2aa <_read_r+0x1e>
 800d2a8:	6023      	str	r3, [r4, #0]
 800d2aa:	bd38      	pop	{r3, r4, r5, pc}
 800d2ac:	200020e4 	.word	0x200020e4

0800d2b0 <_sbrk_r>:
 800d2b0:	b538      	push	{r3, r4, r5, lr}
 800d2b2:	4d06      	ldr	r5, [pc, #24]	@ (800d2cc <_sbrk_r+0x1c>)
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	4608      	mov	r0, r1
 800d2ba:	602b      	str	r3, [r5, #0]
 800d2bc:	f7f5 fb42 	bl	8002944 <_sbrk>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	d102      	bne.n	800d2ca <_sbrk_r+0x1a>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	b103      	cbz	r3, 800d2ca <_sbrk_r+0x1a>
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	bd38      	pop	{r3, r4, r5, pc}
 800d2cc:	200020e4 	.word	0x200020e4

0800d2d0 <_write_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	4d07      	ldr	r5, [pc, #28]	@ (800d2f0 <_write_r+0x20>)
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	4608      	mov	r0, r1
 800d2d8:	4611      	mov	r1, r2
 800d2da:	2200      	movs	r2, #0
 800d2dc:	602a      	str	r2, [r5, #0]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	f7f5 fae0 	bl	80028a4 <_write>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_write_r+0x1e>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_write_r+0x1e>
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	200020e4 	.word	0x200020e4

0800d2f4 <__errno>:
 800d2f4:	4b01      	ldr	r3, [pc, #4]	@ (800d2fc <__errno+0x8>)
 800d2f6:	6818      	ldr	r0, [r3, #0]
 800d2f8:	4770      	bx	lr
 800d2fa:	bf00      	nop
 800d2fc:	20000028 	.word	0x20000028

0800d300 <__libc_init_array>:
 800d300:	b570      	push	{r4, r5, r6, lr}
 800d302:	4d0d      	ldr	r5, [pc, #52]	@ (800d338 <__libc_init_array+0x38>)
 800d304:	4c0d      	ldr	r4, [pc, #52]	@ (800d33c <__libc_init_array+0x3c>)
 800d306:	1b64      	subs	r4, r4, r5
 800d308:	10a4      	asrs	r4, r4, #2
 800d30a:	2600      	movs	r6, #0
 800d30c:	42a6      	cmp	r6, r4
 800d30e:	d109      	bne.n	800d324 <__libc_init_array+0x24>
 800d310:	4d0b      	ldr	r5, [pc, #44]	@ (800d340 <__libc_init_array+0x40>)
 800d312:	4c0c      	ldr	r4, [pc, #48]	@ (800d344 <__libc_init_array+0x44>)
 800d314:	f003 feac 	bl	8011070 <_init>
 800d318:	1b64      	subs	r4, r4, r5
 800d31a:	10a4      	asrs	r4, r4, #2
 800d31c:	2600      	movs	r6, #0
 800d31e:	42a6      	cmp	r6, r4
 800d320:	d105      	bne.n	800d32e <__libc_init_array+0x2e>
 800d322:	bd70      	pop	{r4, r5, r6, pc}
 800d324:	f855 3b04 	ldr.w	r3, [r5], #4
 800d328:	4798      	blx	r3
 800d32a:	3601      	adds	r6, #1
 800d32c:	e7ee      	b.n	800d30c <__libc_init_array+0xc>
 800d32e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d332:	4798      	blx	r3
 800d334:	3601      	adds	r6, #1
 800d336:	e7f2      	b.n	800d31e <__libc_init_array+0x1e>
 800d338:	0801169c 	.word	0x0801169c
 800d33c:	0801169c 	.word	0x0801169c
 800d340:	0801169c 	.word	0x0801169c
 800d344:	080116a0 	.word	0x080116a0

0800d348 <__retarget_lock_init_recursive>:
 800d348:	4770      	bx	lr

0800d34a <__retarget_lock_acquire_recursive>:
 800d34a:	4770      	bx	lr

0800d34c <__retarget_lock_release_recursive>:
 800d34c:	4770      	bx	lr

0800d34e <memcpy>:
 800d34e:	440a      	add	r2, r1
 800d350:	4291      	cmp	r1, r2
 800d352:	f100 33ff 	add.w	r3, r0, #4294967295
 800d356:	d100      	bne.n	800d35a <memcpy+0xc>
 800d358:	4770      	bx	lr
 800d35a:	b510      	push	{r4, lr}
 800d35c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d360:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d364:	4291      	cmp	r1, r2
 800d366:	d1f9      	bne.n	800d35c <memcpy+0xe>
 800d368:	bd10      	pop	{r4, pc}
	...

0800d36c <nanf>:
 800d36c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800d374 <nanf+0x8>
 800d370:	4770      	bx	lr
 800d372:	bf00      	nop
 800d374:	7fc00000 	.word	0x7fc00000

0800d378 <quorem>:
 800d378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d37c:	6903      	ldr	r3, [r0, #16]
 800d37e:	690c      	ldr	r4, [r1, #16]
 800d380:	42a3      	cmp	r3, r4
 800d382:	4607      	mov	r7, r0
 800d384:	db7e      	blt.n	800d484 <quorem+0x10c>
 800d386:	3c01      	subs	r4, #1
 800d388:	f101 0814 	add.w	r8, r1, #20
 800d38c:	00a3      	lsls	r3, r4, #2
 800d38e:	f100 0514 	add.w	r5, r0, #20
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d398:	9301      	str	r3, [sp, #4]
 800d39a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d39e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d3aa:	fbb2 f6f3 	udiv	r6, r2, r3
 800d3ae:	d32e      	bcc.n	800d40e <quorem+0x96>
 800d3b0:	f04f 0a00 	mov.w	sl, #0
 800d3b4:	46c4      	mov	ip, r8
 800d3b6:	46ae      	mov	lr, r5
 800d3b8:	46d3      	mov	fp, sl
 800d3ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d3be:	b298      	uxth	r0, r3
 800d3c0:	fb06 a000 	mla	r0, r6, r0, sl
 800d3c4:	0c02      	lsrs	r2, r0, #16
 800d3c6:	0c1b      	lsrs	r3, r3, #16
 800d3c8:	fb06 2303 	mla	r3, r6, r3, r2
 800d3cc:	f8de 2000 	ldr.w	r2, [lr]
 800d3d0:	b280      	uxth	r0, r0
 800d3d2:	b292      	uxth	r2, r2
 800d3d4:	1a12      	subs	r2, r2, r0
 800d3d6:	445a      	add	r2, fp
 800d3d8:	f8de 0000 	ldr.w	r0, [lr]
 800d3dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d3e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d3ea:	b292      	uxth	r2, r2
 800d3ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d3f0:	45e1      	cmp	r9, ip
 800d3f2:	f84e 2b04 	str.w	r2, [lr], #4
 800d3f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d3fa:	d2de      	bcs.n	800d3ba <quorem+0x42>
 800d3fc:	9b00      	ldr	r3, [sp, #0]
 800d3fe:	58eb      	ldr	r3, [r5, r3]
 800d400:	b92b      	cbnz	r3, 800d40e <quorem+0x96>
 800d402:	9b01      	ldr	r3, [sp, #4]
 800d404:	3b04      	subs	r3, #4
 800d406:	429d      	cmp	r5, r3
 800d408:	461a      	mov	r2, r3
 800d40a:	d32f      	bcc.n	800d46c <quorem+0xf4>
 800d40c:	613c      	str	r4, [r7, #16]
 800d40e:	4638      	mov	r0, r7
 800d410:	f001 f90c 	bl	800e62c <__mcmp>
 800d414:	2800      	cmp	r0, #0
 800d416:	db25      	blt.n	800d464 <quorem+0xec>
 800d418:	4629      	mov	r1, r5
 800d41a:	2000      	movs	r0, #0
 800d41c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d420:	f8d1 c000 	ldr.w	ip, [r1]
 800d424:	fa1f fe82 	uxth.w	lr, r2
 800d428:	fa1f f38c 	uxth.w	r3, ip
 800d42c:	eba3 030e 	sub.w	r3, r3, lr
 800d430:	4403      	add	r3, r0
 800d432:	0c12      	lsrs	r2, r2, #16
 800d434:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d438:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d442:	45c1      	cmp	r9, r8
 800d444:	f841 3b04 	str.w	r3, [r1], #4
 800d448:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d44c:	d2e6      	bcs.n	800d41c <quorem+0xa4>
 800d44e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d452:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d456:	b922      	cbnz	r2, 800d462 <quorem+0xea>
 800d458:	3b04      	subs	r3, #4
 800d45a:	429d      	cmp	r5, r3
 800d45c:	461a      	mov	r2, r3
 800d45e:	d30b      	bcc.n	800d478 <quorem+0x100>
 800d460:	613c      	str	r4, [r7, #16]
 800d462:	3601      	adds	r6, #1
 800d464:	4630      	mov	r0, r6
 800d466:	b003      	add	sp, #12
 800d468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d46c:	6812      	ldr	r2, [r2, #0]
 800d46e:	3b04      	subs	r3, #4
 800d470:	2a00      	cmp	r2, #0
 800d472:	d1cb      	bne.n	800d40c <quorem+0x94>
 800d474:	3c01      	subs	r4, #1
 800d476:	e7c6      	b.n	800d406 <quorem+0x8e>
 800d478:	6812      	ldr	r2, [r2, #0]
 800d47a:	3b04      	subs	r3, #4
 800d47c:	2a00      	cmp	r2, #0
 800d47e:	d1ef      	bne.n	800d460 <quorem+0xe8>
 800d480:	3c01      	subs	r4, #1
 800d482:	e7ea      	b.n	800d45a <quorem+0xe2>
 800d484:	2000      	movs	r0, #0
 800d486:	e7ee      	b.n	800d466 <quorem+0xee>

0800d488 <_dtoa_r>:
 800d488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d48c:	69c7      	ldr	r7, [r0, #28]
 800d48e:	b099      	sub	sp, #100	@ 0x64
 800d490:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d494:	ec55 4b10 	vmov	r4, r5, d0
 800d498:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800d49a:	9109      	str	r1, [sp, #36]	@ 0x24
 800d49c:	4683      	mov	fp, r0
 800d49e:	920e      	str	r2, [sp, #56]	@ 0x38
 800d4a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d4a2:	b97f      	cbnz	r7, 800d4c4 <_dtoa_r+0x3c>
 800d4a4:	2010      	movs	r0, #16
 800d4a6:	f7fe fdf9 	bl	800c09c <malloc>
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	f8cb 001c 	str.w	r0, [fp, #28]
 800d4b0:	b920      	cbnz	r0, 800d4bc <_dtoa_r+0x34>
 800d4b2:	4ba7      	ldr	r3, [pc, #668]	@ (800d750 <_dtoa_r+0x2c8>)
 800d4b4:	21ef      	movs	r1, #239	@ 0xef
 800d4b6:	48a7      	ldr	r0, [pc, #668]	@ (800d754 <_dtoa_r+0x2cc>)
 800d4b8:	f002 fef2 	bl	80102a0 <__assert_func>
 800d4bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d4c0:	6007      	str	r7, [r0, #0]
 800d4c2:	60c7      	str	r7, [r0, #12]
 800d4c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4c8:	6819      	ldr	r1, [r3, #0]
 800d4ca:	b159      	cbz	r1, 800d4e4 <_dtoa_r+0x5c>
 800d4cc:	685a      	ldr	r2, [r3, #4]
 800d4ce:	604a      	str	r2, [r1, #4]
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	4093      	lsls	r3, r2
 800d4d4:	608b      	str	r3, [r1, #8]
 800d4d6:	4658      	mov	r0, fp
 800d4d8:	f000 fe24 	bl	800e124 <_Bfree>
 800d4dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	601a      	str	r2, [r3, #0]
 800d4e4:	1e2b      	subs	r3, r5, #0
 800d4e6:	bfb9      	ittee	lt
 800d4e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d4ec:	9303      	strlt	r3, [sp, #12]
 800d4ee:	2300      	movge	r3, #0
 800d4f0:	6033      	strge	r3, [r6, #0]
 800d4f2:	9f03      	ldr	r7, [sp, #12]
 800d4f4:	4b98      	ldr	r3, [pc, #608]	@ (800d758 <_dtoa_r+0x2d0>)
 800d4f6:	bfbc      	itt	lt
 800d4f8:	2201      	movlt	r2, #1
 800d4fa:	6032      	strlt	r2, [r6, #0]
 800d4fc:	43bb      	bics	r3, r7
 800d4fe:	d112      	bne.n	800d526 <_dtoa_r+0x9e>
 800d500:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d502:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d506:	6013      	str	r3, [r2, #0]
 800d508:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d50c:	4323      	orrs	r3, r4
 800d50e:	f000 854d 	beq.w	800dfac <_dtoa_r+0xb24>
 800d512:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d514:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800d76c <_dtoa_r+0x2e4>
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f000 854f 	beq.w	800dfbc <_dtoa_r+0xb34>
 800d51e:	f10a 0303 	add.w	r3, sl, #3
 800d522:	f000 bd49 	b.w	800dfb8 <_dtoa_r+0xb30>
 800d526:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d52a:	2200      	movs	r2, #0
 800d52c:	ec51 0b17 	vmov	r0, r1, d7
 800d530:	2300      	movs	r3, #0
 800d532:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800d536:	f7f3 facf 	bl	8000ad8 <__aeabi_dcmpeq>
 800d53a:	4680      	mov	r8, r0
 800d53c:	b158      	cbz	r0, 800d556 <_dtoa_r+0xce>
 800d53e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800d540:	2301      	movs	r3, #1
 800d542:	6013      	str	r3, [r2, #0]
 800d544:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d546:	b113      	cbz	r3, 800d54e <_dtoa_r+0xc6>
 800d548:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d54a:	4b84      	ldr	r3, [pc, #528]	@ (800d75c <_dtoa_r+0x2d4>)
 800d54c:	6013      	str	r3, [r2, #0]
 800d54e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800d770 <_dtoa_r+0x2e8>
 800d552:	f000 bd33 	b.w	800dfbc <_dtoa_r+0xb34>
 800d556:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d55a:	aa16      	add	r2, sp, #88	@ 0x58
 800d55c:	a917      	add	r1, sp, #92	@ 0x5c
 800d55e:	4658      	mov	r0, fp
 800d560:	f001 f984 	bl	800e86c <__d2b>
 800d564:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d568:	4681      	mov	r9, r0
 800d56a:	2e00      	cmp	r6, #0
 800d56c:	d077      	beq.n	800d65e <_dtoa_r+0x1d6>
 800d56e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d570:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800d574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d578:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d57c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d580:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d584:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d588:	4619      	mov	r1, r3
 800d58a:	2200      	movs	r2, #0
 800d58c:	4b74      	ldr	r3, [pc, #464]	@ (800d760 <_dtoa_r+0x2d8>)
 800d58e:	f7f2 fe83 	bl	8000298 <__aeabi_dsub>
 800d592:	a369      	add	r3, pc, #420	@ (adr r3, 800d738 <_dtoa_r+0x2b0>)
 800d594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d598:	f7f3 f836 	bl	8000608 <__aeabi_dmul>
 800d59c:	a368      	add	r3, pc, #416	@ (adr r3, 800d740 <_dtoa_r+0x2b8>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	f7f2 fe7b 	bl	800029c <__adddf3>
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	4630      	mov	r0, r6
 800d5aa:	460d      	mov	r5, r1
 800d5ac:	f7f2 ffc2 	bl	8000534 <__aeabi_i2d>
 800d5b0:	a365      	add	r3, pc, #404	@ (adr r3, 800d748 <_dtoa_r+0x2c0>)
 800d5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b6:	f7f3 f827 	bl	8000608 <__aeabi_dmul>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	4620      	mov	r0, r4
 800d5c0:	4629      	mov	r1, r5
 800d5c2:	f7f2 fe6b 	bl	800029c <__adddf3>
 800d5c6:	4604      	mov	r4, r0
 800d5c8:	460d      	mov	r5, r1
 800d5ca:	f7f3 facd 	bl	8000b68 <__aeabi_d2iz>
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	4607      	mov	r7, r0
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	f7f3 fa88 	bl	8000aec <__aeabi_dcmplt>
 800d5dc:	b140      	cbz	r0, 800d5f0 <_dtoa_r+0x168>
 800d5de:	4638      	mov	r0, r7
 800d5e0:	f7f2 ffa8 	bl	8000534 <__aeabi_i2d>
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	462b      	mov	r3, r5
 800d5e8:	f7f3 fa76 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5ec:	b900      	cbnz	r0, 800d5f0 <_dtoa_r+0x168>
 800d5ee:	3f01      	subs	r7, #1
 800d5f0:	2f16      	cmp	r7, #22
 800d5f2:	d851      	bhi.n	800d698 <_dtoa_r+0x210>
 800d5f4:	4b5b      	ldr	r3, [pc, #364]	@ (800d764 <_dtoa_r+0x2dc>)
 800d5f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d602:	f7f3 fa73 	bl	8000aec <__aeabi_dcmplt>
 800d606:	2800      	cmp	r0, #0
 800d608:	d048      	beq.n	800d69c <_dtoa_r+0x214>
 800d60a:	3f01      	subs	r7, #1
 800d60c:	2300      	movs	r3, #0
 800d60e:	9312      	str	r3, [sp, #72]	@ 0x48
 800d610:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d612:	1b9b      	subs	r3, r3, r6
 800d614:	1e5a      	subs	r2, r3, #1
 800d616:	bf44      	itt	mi
 800d618:	f1c3 0801 	rsbmi	r8, r3, #1
 800d61c:	2300      	movmi	r3, #0
 800d61e:	9208      	str	r2, [sp, #32]
 800d620:	bf54      	ite	pl
 800d622:	f04f 0800 	movpl.w	r8, #0
 800d626:	9308      	strmi	r3, [sp, #32]
 800d628:	2f00      	cmp	r7, #0
 800d62a:	db39      	blt.n	800d6a0 <_dtoa_r+0x218>
 800d62c:	9b08      	ldr	r3, [sp, #32]
 800d62e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800d630:	443b      	add	r3, r7
 800d632:	9308      	str	r3, [sp, #32]
 800d634:	2300      	movs	r3, #0
 800d636:	930a      	str	r3, [sp, #40]	@ 0x28
 800d638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d63a:	2b09      	cmp	r3, #9
 800d63c:	d864      	bhi.n	800d708 <_dtoa_r+0x280>
 800d63e:	2b05      	cmp	r3, #5
 800d640:	bfc4      	itt	gt
 800d642:	3b04      	subgt	r3, #4
 800d644:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800d646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d648:	f1a3 0302 	sub.w	r3, r3, #2
 800d64c:	bfcc      	ite	gt
 800d64e:	2400      	movgt	r4, #0
 800d650:	2401      	movle	r4, #1
 800d652:	2b03      	cmp	r3, #3
 800d654:	d863      	bhi.n	800d71e <_dtoa_r+0x296>
 800d656:	e8df f003 	tbb	[pc, r3]
 800d65a:	372a      	.short	0x372a
 800d65c:	5535      	.short	0x5535
 800d65e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800d662:	441e      	add	r6, r3
 800d664:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d668:	2b20      	cmp	r3, #32
 800d66a:	bfc1      	itttt	gt
 800d66c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d670:	409f      	lslgt	r7, r3
 800d672:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d676:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d67a:	bfd6      	itet	le
 800d67c:	f1c3 0320 	rsble	r3, r3, #32
 800d680:	ea47 0003 	orrgt.w	r0, r7, r3
 800d684:	fa04 f003 	lslle.w	r0, r4, r3
 800d688:	f7f2 ff44 	bl	8000514 <__aeabi_ui2d>
 800d68c:	2201      	movs	r2, #1
 800d68e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d692:	3e01      	subs	r6, #1
 800d694:	9214      	str	r2, [sp, #80]	@ 0x50
 800d696:	e777      	b.n	800d588 <_dtoa_r+0x100>
 800d698:	2301      	movs	r3, #1
 800d69a:	e7b8      	b.n	800d60e <_dtoa_r+0x186>
 800d69c:	9012      	str	r0, [sp, #72]	@ 0x48
 800d69e:	e7b7      	b.n	800d610 <_dtoa_r+0x188>
 800d6a0:	427b      	negs	r3, r7
 800d6a2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	eba8 0807 	sub.w	r8, r8, r7
 800d6aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d6ac:	e7c4      	b.n	800d638 <_dtoa_r+0x1b0>
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	dc35      	bgt.n	800d724 <_dtoa_r+0x29c>
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	9300      	str	r3, [sp, #0]
 800d6bc:	9307      	str	r3, [sp, #28]
 800d6be:	461a      	mov	r2, r3
 800d6c0:	920e      	str	r2, [sp, #56]	@ 0x38
 800d6c2:	e00b      	b.n	800d6dc <_dtoa_r+0x254>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e7f3      	b.n	800d6b0 <_dtoa_r+0x228>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d6cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d6ce:	18fb      	adds	r3, r7, r3
 800d6d0:	9300      	str	r3, [sp, #0]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	9307      	str	r3, [sp, #28]
 800d6d8:	bfb8      	it	lt
 800d6da:	2301      	movlt	r3, #1
 800d6dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800d6e0:	2100      	movs	r1, #0
 800d6e2:	2204      	movs	r2, #4
 800d6e4:	f102 0514 	add.w	r5, r2, #20
 800d6e8:	429d      	cmp	r5, r3
 800d6ea:	d91f      	bls.n	800d72c <_dtoa_r+0x2a4>
 800d6ec:	6041      	str	r1, [r0, #4]
 800d6ee:	4658      	mov	r0, fp
 800d6f0:	f000 fcd8 	bl	800e0a4 <_Balloc>
 800d6f4:	4682      	mov	sl, r0
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d13c      	bne.n	800d774 <_dtoa_r+0x2ec>
 800d6fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d768 <_dtoa_r+0x2e0>)
 800d6fc:	4602      	mov	r2, r0
 800d6fe:	f240 11af 	movw	r1, #431	@ 0x1af
 800d702:	e6d8      	b.n	800d4b6 <_dtoa_r+0x2e>
 800d704:	2301      	movs	r3, #1
 800d706:	e7e0      	b.n	800d6ca <_dtoa_r+0x242>
 800d708:	2401      	movs	r4, #1
 800d70a:	2300      	movs	r3, #0
 800d70c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d70e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d710:	f04f 33ff 	mov.w	r3, #4294967295
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	9307      	str	r3, [sp, #28]
 800d718:	2200      	movs	r2, #0
 800d71a:	2312      	movs	r3, #18
 800d71c:	e7d0      	b.n	800d6c0 <_dtoa_r+0x238>
 800d71e:	2301      	movs	r3, #1
 800d720:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d722:	e7f5      	b.n	800d710 <_dtoa_r+0x288>
 800d724:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	9307      	str	r3, [sp, #28]
 800d72a:	e7d7      	b.n	800d6dc <_dtoa_r+0x254>
 800d72c:	3101      	adds	r1, #1
 800d72e:	0052      	lsls	r2, r2, #1
 800d730:	e7d8      	b.n	800d6e4 <_dtoa_r+0x25c>
 800d732:	bf00      	nop
 800d734:	f3af 8000 	nop.w
 800d738:	636f4361 	.word	0x636f4361
 800d73c:	3fd287a7 	.word	0x3fd287a7
 800d740:	8b60c8b3 	.word	0x8b60c8b3
 800d744:	3fc68a28 	.word	0x3fc68a28
 800d748:	509f79fb 	.word	0x509f79fb
 800d74c:	3fd34413 	.word	0x3fd34413
 800d750:	08011290 	.word	0x08011290
 800d754:	080112a7 	.word	0x080112a7
 800d758:	7ff00000 	.word	0x7ff00000
 800d75c:	080115e9 	.word	0x080115e9
 800d760:	3ff80000 	.word	0x3ff80000
 800d764:	080113a0 	.word	0x080113a0
 800d768:	080112ff 	.word	0x080112ff
 800d76c:	0801128c 	.word	0x0801128c
 800d770:	080115e8 	.word	0x080115e8
 800d774:	f8db 301c 	ldr.w	r3, [fp, #28]
 800d778:	6018      	str	r0, [r3, #0]
 800d77a:	9b07      	ldr	r3, [sp, #28]
 800d77c:	2b0e      	cmp	r3, #14
 800d77e:	f200 80a4 	bhi.w	800d8ca <_dtoa_r+0x442>
 800d782:	2c00      	cmp	r4, #0
 800d784:	f000 80a1 	beq.w	800d8ca <_dtoa_r+0x442>
 800d788:	2f00      	cmp	r7, #0
 800d78a:	dd33      	ble.n	800d7f4 <_dtoa_r+0x36c>
 800d78c:	4bad      	ldr	r3, [pc, #692]	@ (800da44 <_dtoa_r+0x5bc>)
 800d78e:	f007 020f 	and.w	r2, r7, #15
 800d792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d796:	ed93 7b00 	vldr	d7, [r3]
 800d79a:	05f8      	lsls	r0, r7, #23
 800d79c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d7a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d7a4:	d516      	bpl.n	800d7d4 <_dtoa_r+0x34c>
 800d7a6:	4ba8      	ldr	r3, [pc, #672]	@ (800da48 <_dtoa_r+0x5c0>)
 800d7a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d7ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d7b0:	f7f3 f854 	bl	800085c <__aeabi_ddiv>
 800d7b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7b8:	f004 040f 	and.w	r4, r4, #15
 800d7bc:	2603      	movs	r6, #3
 800d7be:	4da2      	ldr	r5, [pc, #648]	@ (800da48 <_dtoa_r+0x5c0>)
 800d7c0:	b954      	cbnz	r4, 800d7d8 <_dtoa_r+0x350>
 800d7c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d7c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d7ca:	f7f3 f847 	bl	800085c <__aeabi_ddiv>
 800d7ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d7d2:	e028      	b.n	800d826 <_dtoa_r+0x39e>
 800d7d4:	2602      	movs	r6, #2
 800d7d6:	e7f2      	b.n	800d7be <_dtoa_r+0x336>
 800d7d8:	07e1      	lsls	r1, r4, #31
 800d7da:	d508      	bpl.n	800d7ee <_dtoa_r+0x366>
 800d7dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d7e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d7e4:	f7f2 ff10 	bl	8000608 <__aeabi_dmul>
 800d7e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d7ec:	3601      	adds	r6, #1
 800d7ee:	1064      	asrs	r4, r4, #1
 800d7f0:	3508      	adds	r5, #8
 800d7f2:	e7e5      	b.n	800d7c0 <_dtoa_r+0x338>
 800d7f4:	f000 80d2 	beq.w	800d99c <_dtoa_r+0x514>
 800d7f8:	427c      	negs	r4, r7
 800d7fa:	4b92      	ldr	r3, [pc, #584]	@ (800da44 <_dtoa_r+0x5bc>)
 800d7fc:	4d92      	ldr	r5, [pc, #584]	@ (800da48 <_dtoa_r+0x5c0>)
 800d7fe:	f004 020f 	and.w	r2, r4, #15
 800d802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d80e:	f7f2 fefb 	bl	8000608 <__aeabi_dmul>
 800d812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d816:	1124      	asrs	r4, r4, #4
 800d818:	2300      	movs	r3, #0
 800d81a:	2602      	movs	r6, #2
 800d81c:	2c00      	cmp	r4, #0
 800d81e:	f040 80b2 	bne.w	800d986 <_dtoa_r+0x4fe>
 800d822:	2b00      	cmp	r3, #0
 800d824:	d1d3      	bne.n	800d7ce <_dtoa_r+0x346>
 800d826:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d828:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f000 80b7 	beq.w	800d9a0 <_dtoa_r+0x518>
 800d832:	4b86      	ldr	r3, [pc, #536]	@ (800da4c <_dtoa_r+0x5c4>)
 800d834:	2200      	movs	r2, #0
 800d836:	4620      	mov	r0, r4
 800d838:	4629      	mov	r1, r5
 800d83a:	f7f3 f957 	bl	8000aec <__aeabi_dcmplt>
 800d83e:	2800      	cmp	r0, #0
 800d840:	f000 80ae 	beq.w	800d9a0 <_dtoa_r+0x518>
 800d844:	9b07      	ldr	r3, [sp, #28]
 800d846:	2b00      	cmp	r3, #0
 800d848:	f000 80aa 	beq.w	800d9a0 <_dtoa_r+0x518>
 800d84c:	9b00      	ldr	r3, [sp, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	dd37      	ble.n	800d8c2 <_dtoa_r+0x43a>
 800d852:	1e7b      	subs	r3, r7, #1
 800d854:	9304      	str	r3, [sp, #16]
 800d856:	4620      	mov	r0, r4
 800d858:	4b7d      	ldr	r3, [pc, #500]	@ (800da50 <_dtoa_r+0x5c8>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	4629      	mov	r1, r5
 800d85e:	f7f2 fed3 	bl	8000608 <__aeabi_dmul>
 800d862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d866:	9c00      	ldr	r4, [sp, #0]
 800d868:	3601      	adds	r6, #1
 800d86a:	4630      	mov	r0, r6
 800d86c:	f7f2 fe62 	bl	8000534 <__aeabi_i2d>
 800d870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d874:	f7f2 fec8 	bl	8000608 <__aeabi_dmul>
 800d878:	4b76      	ldr	r3, [pc, #472]	@ (800da54 <_dtoa_r+0x5cc>)
 800d87a:	2200      	movs	r2, #0
 800d87c:	f7f2 fd0e 	bl	800029c <__adddf3>
 800d880:	4605      	mov	r5, r0
 800d882:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d886:	2c00      	cmp	r4, #0
 800d888:	f040 808d 	bne.w	800d9a6 <_dtoa_r+0x51e>
 800d88c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d890:	4b71      	ldr	r3, [pc, #452]	@ (800da58 <_dtoa_r+0x5d0>)
 800d892:	2200      	movs	r2, #0
 800d894:	f7f2 fd00 	bl	8000298 <__aeabi_dsub>
 800d898:	4602      	mov	r2, r0
 800d89a:	460b      	mov	r3, r1
 800d89c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d8a0:	462a      	mov	r2, r5
 800d8a2:	4633      	mov	r3, r6
 800d8a4:	f7f3 f940 	bl	8000b28 <__aeabi_dcmpgt>
 800d8a8:	2800      	cmp	r0, #0
 800d8aa:	f040 828b 	bne.w	800ddc4 <_dtoa_r+0x93c>
 800d8ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d8b2:	462a      	mov	r2, r5
 800d8b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d8b8:	f7f3 f918 	bl	8000aec <__aeabi_dcmplt>
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	f040 8128 	bne.w	800db12 <_dtoa_r+0x68a>
 800d8c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800d8c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800d8ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f2c0 815a 	blt.w	800db86 <_dtoa_r+0x6fe>
 800d8d2:	2f0e      	cmp	r7, #14
 800d8d4:	f300 8157 	bgt.w	800db86 <_dtoa_r+0x6fe>
 800d8d8:	4b5a      	ldr	r3, [pc, #360]	@ (800da44 <_dtoa_r+0x5bc>)
 800d8da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d8de:	ed93 7b00 	vldr	d7, [r3]
 800d8e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	ed8d 7b00 	vstr	d7, [sp]
 800d8ea:	da03      	bge.n	800d8f4 <_dtoa_r+0x46c>
 800d8ec:	9b07      	ldr	r3, [sp, #28]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f340 8101 	ble.w	800daf6 <_dtoa_r+0x66e>
 800d8f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d8f8:	4656      	mov	r6, sl
 800d8fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d8fe:	4620      	mov	r0, r4
 800d900:	4629      	mov	r1, r5
 800d902:	f7f2 ffab 	bl	800085c <__aeabi_ddiv>
 800d906:	f7f3 f92f 	bl	8000b68 <__aeabi_d2iz>
 800d90a:	4680      	mov	r8, r0
 800d90c:	f7f2 fe12 	bl	8000534 <__aeabi_i2d>
 800d910:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d914:	f7f2 fe78 	bl	8000608 <__aeabi_dmul>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	4620      	mov	r0, r4
 800d91e:	4629      	mov	r1, r5
 800d920:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d924:	f7f2 fcb8 	bl	8000298 <__aeabi_dsub>
 800d928:	f806 4b01 	strb.w	r4, [r6], #1
 800d92c:	9d07      	ldr	r5, [sp, #28]
 800d92e:	eba6 040a 	sub.w	r4, r6, sl
 800d932:	42a5      	cmp	r5, r4
 800d934:	4602      	mov	r2, r0
 800d936:	460b      	mov	r3, r1
 800d938:	f040 8117 	bne.w	800db6a <_dtoa_r+0x6e2>
 800d93c:	f7f2 fcae 	bl	800029c <__adddf3>
 800d940:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d944:	4604      	mov	r4, r0
 800d946:	460d      	mov	r5, r1
 800d948:	f7f3 f8ee 	bl	8000b28 <__aeabi_dcmpgt>
 800d94c:	2800      	cmp	r0, #0
 800d94e:	f040 80f9 	bne.w	800db44 <_dtoa_r+0x6bc>
 800d952:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d956:	4620      	mov	r0, r4
 800d958:	4629      	mov	r1, r5
 800d95a:	f7f3 f8bd 	bl	8000ad8 <__aeabi_dcmpeq>
 800d95e:	b118      	cbz	r0, 800d968 <_dtoa_r+0x4e0>
 800d960:	f018 0f01 	tst.w	r8, #1
 800d964:	f040 80ee 	bne.w	800db44 <_dtoa_r+0x6bc>
 800d968:	4649      	mov	r1, r9
 800d96a:	4658      	mov	r0, fp
 800d96c:	f000 fbda 	bl	800e124 <_Bfree>
 800d970:	2300      	movs	r3, #0
 800d972:	7033      	strb	r3, [r6, #0]
 800d974:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d976:	3701      	adds	r7, #1
 800d978:	601f      	str	r7, [r3, #0]
 800d97a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	f000 831d 	beq.w	800dfbc <_dtoa_r+0xb34>
 800d982:	601e      	str	r6, [r3, #0]
 800d984:	e31a      	b.n	800dfbc <_dtoa_r+0xb34>
 800d986:	07e2      	lsls	r2, r4, #31
 800d988:	d505      	bpl.n	800d996 <_dtoa_r+0x50e>
 800d98a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d98e:	f7f2 fe3b 	bl	8000608 <__aeabi_dmul>
 800d992:	3601      	adds	r6, #1
 800d994:	2301      	movs	r3, #1
 800d996:	1064      	asrs	r4, r4, #1
 800d998:	3508      	adds	r5, #8
 800d99a:	e73f      	b.n	800d81c <_dtoa_r+0x394>
 800d99c:	2602      	movs	r6, #2
 800d99e:	e742      	b.n	800d826 <_dtoa_r+0x39e>
 800d9a0:	9c07      	ldr	r4, [sp, #28]
 800d9a2:	9704      	str	r7, [sp, #16]
 800d9a4:	e761      	b.n	800d86a <_dtoa_r+0x3e2>
 800d9a6:	4b27      	ldr	r3, [pc, #156]	@ (800da44 <_dtoa_r+0x5bc>)
 800d9a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d9aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9b2:	4454      	add	r4, sl
 800d9b4:	2900      	cmp	r1, #0
 800d9b6:	d053      	beq.n	800da60 <_dtoa_r+0x5d8>
 800d9b8:	4928      	ldr	r1, [pc, #160]	@ (800da5c <_dtoa_r+0x5d4>)
 800d9ba:	2000      	movs	r0, #0
 800d9bc:	f7f2 ff4e 	bl	800085c <__aeabi_ddiv>
 800d9c0:	4633      	mov	r3, r6
 800d9c2:	462a      	mov	r2, r5
 800d9c4:	f7f2 fc68 	bl	8000298 <__aeabi_dsub>
 800d9c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d9cc:	4656      	mov	r6, sl
 800d9ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9d2:	f7f3 f8c9 	bl	8000b68 <__aeabi_d2iz>
 800d9d6:	4605      	mov	r5, r0
 800d9d8:	f7f2 fdac 	bl	8000534 <__aeabi_i2d>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	460b      	mov	r3, r1
 800d9e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d9e4:	f7f2 fc58 	bl	8000298 <__aeabi_dsub>
 800d9e8:	3530      	adds	r5, #48	@ 0x30
 800d9ea:	4602      	mov	r2, r0
 800d9ec:	460b      	mov	r3, r1
 800d9ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d9f2:	f806 5b01 	strb.w	r5, [r6], #1
 800d9f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d9fa:	f7f3 f877 	bl	8000aec <__aeabi_dcmplt>
 800d9fe:	2800      	cmp	r0, #0
 800da00:	d171      	bne.n	800dae6 <_dtoa_r+0x65e>
 800da02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da06:	4911      	ldr	r1, [pc, #68]	@ (800da4c <_dtoa_r+0x5c4>)
 800da08:	2000      	movs	r0, #0
 800da0a:	f7f2 fc45 	bl	8000298 <__aeabi_dsub>
 800da0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800da12:	f7f3 f86b 	bl	8000aec <__aeabi_dcmplt>
 800da16:	2800      	cmp	r0, #0
 800da18:	f040 8095 	bne.w	800db46 <_dtoa_r+0x6be>
 800da1c:	42a6      	cmp	r6, r4
 800da1e:	f43f af50 	beq.w	800d8c2 <_dtoa_r+0x43a>
 800da22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800da26:	4b0a      	ldr	r3, [pc, #40]	@ (800da50 <_dtoa_r+0x5c8>)
 800da28:	2200      	movs	r2, #0
 800da2a:	f7f2 fded 	bl	8000608 <__aeabi_dmul>
 800da2e:	4b08      	ldr	r3, [pc, #32]	@ (800da50 <_dtoa_r+0x5c8>)
 800da30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da34:	2200      	movs	r2, #0
 800da36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da3a:	f7f2 fde5 	bl	8000608 <__aeabi_dmul>
 800da3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da42:	e7c4      	b.n	800d9ce <_dtoa_r+0x546>
 800da44:	080113a0 	.word	0x080113a0
 800da48:	08011378 	.word	0x08011378
 800da4c:	3ff00000 	.word	0x3ff00000
 800da50:	40240000 	.word	0x40240000
 800da54:	401c0000 	.word	0x401c0000
 800da58:	40140000 	.word	0x40140000
 800da5c:	3fe00000 	.word	0x3fe00000
 800da60:	4631      	mov	r1, r6
 800da62:	4628      	mov	r0, r5
 800da64:	f7f2 fdd0 	bl	8000608 <__aeabi_dmul>
 800da68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800da6c:	9415      	str	r4, [sp, #84]	@ 0x54
 800da6e:	4656      	mov	r6, sl
 800da70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da74:	f7f3 f878 	bl	8000b68 <__aeabi_d2iz>
 800da78:	4605      	mov	r5, r0
 800da7a:	f7f2 fd5b 	bl	8000534 <__aeabi_i2d>
 800da7e:	4602      	mov	r2, r0
 800da80:	460b      	mov	r3, r1
 800da82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da86:	f7f2 fc07 	bl	8000298 <__aeabi_dsub>
 800da8a:	3530      	adds	r5, #48	@ 0x30
 800da8c:	f806 5b01 	strb.w	r5, [r6], #1
 800da90:	4602      	mov	r2, r0
 800da92:	460b      	mov	r3, r1
 800da94:	42a6      	cmp	r6, r4
 800da96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da9a:	f04f 0200 	mov.w	r2, #0
 800da9e:	d124      	bne.n	800daea <_dtoa_r+0x662>
 800daa0:	4bac      	ldr	r3, [pc, #688]	@ (800dd54 <_dtoa_r+0x8cc>)
 800daa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800daa6:	f7f2 fbf9 	bl	800029c <__adddf3>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dab2:	f7f3 f839 	bl	8000b28 <__aeabi_dcmpgt>
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d145      	bne.n	800db46 <_dtoa_r+0x6be>
 800daba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800dabe:	49a5      	ldr	r1, [pc, #660]	@ (800dd54 <_dtoa_r+0x8cc>)
 800dac0:	2000      	movs	r0, #0
 800dac2:	f7f2 fbe9 	bl	8000298 <__aeabi_dsub>
 800dac6:	4602      	mov	r2, r0
 800dac8:	460b      	mov	r3, r1
 800daca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dace:	f7f3 f80d 	bl	8000aec <__aeabi_dcmplt>
 800dad2:	2800      	cmp	r0, #0
 800dad4:	f43f aef5 	beq.w	800d8c2 <_dtoa_r+0x43a>
 800dad8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800dada:	1e73      	subs	r3, r6, #1
 800dadc:	9315      	str	r3, [sp, #84]	@ 0x54
 800dade:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800dae2:	2b30      	cmp	r3, #48	@ 0x30
 800dae4:	d0f8      	beq.n	800dad8 <_dtoa_r+0x650>
 800dae6:	9f04      	ldr	r7, [sp, #16]
 800dae8:	e73e      	b.n	800d968 <_dtoa_r+0x4e0>
 800daea:	4b9b      	ldr	r3, [pc, #620]	@ (800dd58 <_dtoa_r+0x8d0>)
 800daec:	f7f2 fd8c 	bl	8000608 <__aeabi_dmul>
 800daf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800daf4:	e7bc      	b.n	800da70 <_dtoa_r+0x5e8>
 800daf6:	d10c      	bne.n	800db12 <_dtoa_r+0x68a>
 800daf8:	4b98      	ldr	r3, [pc, #608]	@ (800dd5c <_dtoa_r+0x8d4>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db00:	f7f2 fd82 	bl	8000608 <__aeabi_dmul>
 800db04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800db08:	f7f3 f804 	bl	8000b14 <__aeabi_dcmpge>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f000 8157 	beq.w	800ddc0 <_dtoa_r+0x938>
 800db12:	2400      	movs	r4, #0
 800db14:	4625      	mov	r5, r4
 800db16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db18:	43db      	mvns	r3, r3
 800db1a:	9304      	str	r3, [sp, #16]
 800db1c:	4656      	mov	r6, sl
 800db1e:	2700      	movs	r7, #0
 800db20:	4621      	mov	r1, r4
 800db22:	4658      	mov	r0, fp
 800db24:	f000 fafe 	bl	800e124 <_Bfree>
 800db28:	2d00      	cmp	r5, #0
 800db2a:	d0dc      	beq.n	800dae6 <_dtoa_r+0x65e>
 800db2c:	b12f      	cbz	r7, 800db3a <_dtoa_r+0x6b2>
 800db2e:	42af      	cmp	r7, r5
 800db30:	d003      	beq.n	800db3a <_dtoa_r+0x6b2>
 800db32:	4639      	mov	r1, r7
 800db34:	4658      	mov	r0, fp
 800db36:	f000 faf5 	bl	800e124 <_Bfree>
 800db3a:	4629      	mov	r1, r5
 800db3c:	4658      	mov	r0, fp
 800db3e:	f000 faf1 	bl	800e124 <_Bfree>
 800db42:	e7d0      	b.n	800dae6 <_dtoa_r+0x65e>
 800db44:	9704      	str	r7, [sp, #16]
 800db46:	4633      	mov	r3, r6
 800db48:	461e      	mov	r6, r3
 800db4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db4e:	2a39      	cmp	r2, #57	@ 0x39
 800db50:	d107      	bne.n	800db62 <_dtoa_r+0x6da>
 800db52:	459a      	cmp	sl, r3
 800db54:	d1f8      	bne.n	800db48 <_dtoa_r+0x6c0>
 800db56:	9a04      	ldr	r2, [sp, #16]
 800db58:	3201      	adds	r2, #1
 800db5a:	9204      	str	r2, [sp, #16]
 800db5c:	2230      	movs	r2, #48	@ 0x30
 800db5e:	f88a 2000 	strb.w	r2, [sl]
 800db62:	781a      	ldrb	r2, [r3, #0]
 800db64:	3201      	adds	r2, #1
 800db66:	701a      	strb	r2, [r3, #0]
 800db68:	e7bd      	b.n	800dae6 <_dtoa_r+0x65e>
 800db6a:	4b7b      	ldr	r3, [pc, #492]	@ (800dd58 <_dtoa_r+0x8d0>)
 800db6c:	2200      	movs	r2, #0
 800db6e:	f7f2 fd4b 	bl	8000608 <__aeabi_dmul>
 800db72:	2200      	movs	r2, #0
 800db74:	2300      	movs	r3, #0
 800db76:	4604      	mov	r4, r0
 800db78:	460d      	mov	r5, r1
 800db7a:	f7f2 ffad 	bl	8000ad8 <__aeabi_dcmpeq>
 800db7e:	2800      	cmp	r0, #0
 800db80:	f43f aebb 	beq.w	800d8fa <_dtoa_r+0x472>
 800db84:	e6f0      	b.n	800d968 <_dtoa_r+0x4e0>
 800db86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800db88:	2a00      	cmp	r2, #0
 800db8a:	f000 80db 	beq.w	800dd44 <_dtoa_r+0x8bc>
 800db8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db90:	2a01      	cmp	r2, #1
 800db92:	f300 80bf 	bgt.w	800dd14 <_dtoa_r+0x88c>
 800db96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800db98:	2a00      	cmp	r2, #0
 800db9a:	f000 80b7 	beq.w	800dd0c <_dtoa_r+0x884>
 800db9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dba2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dba4:	4646      	mov	r6, r8
 800dba6:	9a08      	ldr	r2, [sp, #32]
 800dba8:	2101      	movs	r1, #1
 800dbaa:	441a      	add	r2, r3
 800dbac:	4658      	mov	r0, fp
 800dbae:	4498      	add	r8, r3
 800dbb0:	9208      	str	r2, [sp, #32]
 800dbb2:	f000 fbb5 	bl	800e320 <__i2b>
 800dbb6:	4605      	mov	r5, r0
 800dbb8:	b15e      	cbz	r6, 800dbd2 <_dtoa_r+0x74a>
 800dbba:	9b08      	ldr	r3, [sp, #32]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	dd08      	ble.n	800dbd2 <_dtoa_r+0x74a>
 800dbc0:	42b3      	cmp	r3, r6
 800dbc2:	9a08      	ldr	r2, [sp, #32]
 800dbc4:	bfa8      	it	ge
 800dbc6:	4633      	movge	r3, r6
 800dbc8:	eba8 0803 	sub.w	r8, r8, r3
 800dbcc:	1af6      	subs	r6, r6, r3
 800dbce:	1ad3      	subs	r3, r2, r3
 800dbd0:	9308      	str	r3, [sp, #32]
 800dbd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dbd4:	b1f3      	cbz	r3, 800dc14 <_dtoa_r+0x78c>
 800dbd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	f000 80b7 	beq.w	800dd4c <_dtoa_r+0x8c4>
 800dbde:	b18c      	cbz	r4, 800dc04 <_dtoa_r+0x77c>
 800dbe0:	4629      	mov	r1, r5
 800dbe2:	4622      	mov	r2, r4
 800dbe4:	4658      	mov	r0, fp
 800dbe6:	f000 fc5b 	bl	800e4a0 <__pow5mult>
 800dbea:	464a      	mov	r2, r9
 800dbec:	4601      	mov	r1, r0
 800dbee:	4605      	mov	r5, r0
 800dbf0:	4658      	mov	r0, fp
 800dbf2:	f000 fbab 	bl	800e34c <__multiply>
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	9004      	str	r0, [sp, #16]
 800dbfa:	4658      	mov	r0, fp
 800dbfc:	f000 fa92 	bl	800e124 <_Bfree>
 800dc00:	9b04      	ldr	r3, [sp, #16]
 800dc02:	4699      	mov	r9, r3
 800dc04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dc06:	1b1a      	subs	r2, r3, r4
 800dc08:	d004      	beq.n	800dc14 <_dtoa_r+0x78c>
 800dc0a:	4649      	mov	r1, r9
 800dc0c:	4658      	mov	r0, fp
 800dc0e:	f000 fc47 	bl	800e4a0 <__pow5mult>
 800dc12:	4681      	mov	r9, r0
 800dc14:	2101      	movs	r1, #1
 800dc16:	4658      	mov	r0, fp
 800dc18:	f000 fb82 	bl	800e320 <__i2b>
 800dc1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc1e:	4604      	mov	r4, r0
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	f000 81cf 	beq.w	800dfc4 <_dtoa_r+0xb3c>
 800dc26:	461a      	mov	r2, r3
 800dc28:	4601      	mov	r1, r0
 800dc2a:	4658      	mov	r0, fp
 800dc2c:	f000 fc38 	bl	800e4a0 <__pow5mult>
 800dc30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc32:	2b01      	cmp	r3, #1
 800dc34:	4604      	mov	r4, r0
 800dc36:	f300 8095 	bgt.w	800dd64 <_dtoa_r+0x8dc>
 800dc3a:	9b02      	ldr	r3, [sp, #8]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	f040 8087 	bne.w	800dd50 <_dtoa_r+0x8c8>
 800dc42:	9b03      	ldr	r3, [sp, #12]
 800dc44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	f040 8089 	bne.w	800dd60 <_dtoa_r+0x8d8>
 800dc4e:	9b03      	ldr	r3, [sp, #12]
 800dc50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dc54:	0d1b      	lsrs	r3, r3, #20
 800dc56:	051b      	lsls	r3, r3, #20
 800dc58:	b12b      	cbz	r3, 800dc66 <_dtoa_r+0x7de>
 800dc5a:	9b08      	ldr	r3, [sp, #32]
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	9308      	str	r3, [sp, #32]
 800dc60:	f108 0801 	add.w	r8, r8, #1
 800dc64:	2301      	movs	r3, #1
 800dc66:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	f000 81b0 	beq.w	800dfd0 <_dtoa_r+0xb48>
 800dc70:	6923      	ldr	r3, [r4, #16]
 800dc72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dc76:	6918      	ldr	r0, [r3, #16]
 800dc78:	f000 fb06 	bl	800e288 <__hi0bits>
 800dc7c:	f1c0 0020 	rsb	r0, r0, #32
 800dc80:	9b08      	ldr	r3, [sp, #32]
 800dc82:	4418      	add	r0, r3
 800dc84:	f010 001f 	ands.w	r0, r0, #31
 800dc88:	d077      	beq.n	800dd7a <_dtoa_r+0x8f2>
 800dc8a:	f1c0 0320 	rsb	r3, r0, #32
 800dc8e:	2b04      	cmp	r3, #4
 800dc90:	dd6b      	ble.n	800dd6a <_dtoa_r+0x8e2>
 800dc92:	9b08      	ldr	r3, [sp, #32]
 800dc94:	f1c0 001c 	rsb	r0, r0, #28
 800dc98:	4403      	add	r3, r0
 800dc9a:	4480      	add	r8, r0
 800dc9c:	4406      	add	r6, r0
 800dc9e:	9308      	str	r3, [sp, #32]
 800dca0:	f1b8 0f00 	cmp.w	r8, #0
 800dca4:	dd05      	ble.n	800dcb2 <_dtoa_r+0x82a>
 800dca6:	4649      	mov	r1, r9
 800dca8:	4642      	mov	r2, r8
 800dcaa:	4658      	mov	r0, fp
 800dcac:	f000 fc52 	bl	800e554 <__lshift>
 800dcb0:	4681      	mov	r9, r0
 800dcb2:	9b08      	ldr	r3, [sp, #32]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	dd05      	ble.n	800dcc4 <_dtoa_r+0x83c>
 800dcb8:	4621      	mov	r1, r4
 800dcba:	461a      	mov	r2, r3
 800dcbc:	4658      	mov	r0, fp
 800dcbe:	f000 fc49 	bl	800e554 <__lshift>
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d059      	beq.n	800dd7e <_dtoa_r+0x8f6>
 800dcca:	4621      	mov	r1, r4
 800dccc:	4648      	mov	r0, r9
 800dcce:	f000 fcad 	bl	800e62c <__mcmp>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	da53      	bge.n	800dd7e <_dtoa_r+0x8f6>
 800dcd6:	1e7b      	subs	r3, r7, #1
 800dcd8:	9304      	str	r3, [sp, #16]
 800dcda:	4649      	mov	r1, r9
 800dcdc:	2300      	movs	r3, #0
 800dcde:	220a      	movs	r2, #10
 800dce0:	4658      	mov	r0, fp
 800dce2:	f000 fa41 	bl	800e168 <__multadd>
 800dce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dce8:	4681      	mov	r9, r0
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	f000 8172 	beq.w	800dfd4 <_dtoa_r+0xb4c>
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	220a      	movs	r2, #10
 800dcf6:	4658      	mov	r0, fp
 800dcf8:	f000 fa36 	bl	800e168 <__multadd>
 800dcfc:	9b00      	ldr	r3, [sp, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	4605      	mov	r5, r0
 800dd02:	dc67      	bgt.n	800ddd4 <_dtoa_r+0x94c>
 800dd04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd06:	2b02      	cmp	r3, #2
 800dd08:	dc41      	bgt.n	800dd8e <_dtoa_r+0x906>
 800dd0a:	e063      	b.n	800ddd4 <_dtoa_r+0x94c>
 800dd0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800dd0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd12:	e746      	b.n	800dba2 <_dtoa_r+0x71a>
 800dd14:	9b07      	ldr	r3, [sp, #28]
 800dd16:	1e5c      	subs	r4, r3, #1
 800dd18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dd1a:	42a3      	cmp	r3, r4
 800dd1c:	bfbf      	itttt	lt
 800dd1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800dd20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800dd22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800dd24:	1ae3      	sublt	r3, r4, r3
 800dd26:	bfb4      	ite	lt
 800dd28:	18d2      	addlt	r2, r2, r3
 800dd2a:	1b1c      	subge	r4, r3, r4
 800dd2c:	9b07      	ldr	r3, [sp, #28]
 800dd2e:	bfbc      	itt	lt
 800dd30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800dd32:	2400      	movlt	r4, #0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	bfb5      	itete	lt
 800dd38:	eba8 0603 	sublt.w	r6, r8, r3
 800dd3c:	9b07      	ldrge	r3, [sp, #28]
 800dd3e:	2300      	movlt	r3, #0
 800dd40:	4646      	movge	r6, r8
 800dd42:	e730      	b.n	800dba6 <_dtoa_r+0x71e>
 800dd44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800dd46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800dd48:	4646      	mov	r6, r8
 800dd4a:	e735      	b.n	800dbb8 <_dtoa_r+0x730>
 800dd4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800dd4e:	e75c      	b.n	800dc0a <_dtoa_r+0x782>
 800dd50:	2300      	movs	r3, #0
 800dd52:	e788      	b.n	800dc66 <_dtoa_r+0x7de>
 800dd54:	3fe00000 	.word	0x3fe00000
 800dd58:	40240000 	.word	0x40240000
 800dd5c:	40140000 	.word	0x40140000
 800dd60:	9b02      	ldr	r3, [sp, #8]
 800dd62:	e780      	b.n	800dc66 <_dtoa_r+0x7de>
 800dd64:	2300      	movs	r3, #0
 800dd66:	930a      	str	r3, [sp, #40]	@ 0x28
 800dd68:	e782      	b.n	800dc70 <_dtoa_r+0x7e8>
 800dd6a:	d099      	beq.n	800dca0 <_dtoa_r+0x818>
 800dd6c:	9a08      	ldr	r2, [sp, #32]
 800dd6e:	331c      	adds	r3, #28
 800dd70:	441a      	add	r2, r3
 800dd72:	4498      	add	r8, r3
 800dd74:	441e      	add	r6, r3
 800dd76:	9208      	str	r2, [sp, #32]
 800dd78:	e792      	b.n	800dca0 <_dtoa_r+0x818>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	e7f6      	b.n	800dd6c <_dtoa_r+0x8e4>
 800dd7e:	9b07      	ldr	r3, [sp, #28]
 800dd80:	9704      	str	r7, [sp, #16]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	dc20      	bgt.n	800ddc8 <_dtoa_r+0x940>
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd8a:	2b02      	cmp	r3, #2
 800dd8c:	dd1e      	ble.n	800ddcc <_dtoa_r+0x944>
 800dd8e:	9b00      	ldr	r3, [sp, #0]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f47f aec0 	bne.w	800db16 <_dtoa_r+0x68e>
 800dd96:	4621      	mov	r1, r4
 800dd98:	2205      	movs	r2, #5
 800dd9a:	4658      	mov	r0, fp
 800dd9c:	f000 f9e4 	bl	800e168 <__multadd>
 800dda0:	4601      	mov	r1, r0
 800dda2:	4604      	mov	r4, r0
 800dda4:	4648      	mov	r0, r9
 800dda6:	f000 fc41 	bl	800e62c <__mcmp>
 800ddaa:	2800      	cmp	r0, #0
 800ddac:	f77f aeb3 	ble.w	800db16 <_dtoa_r+0x68e>
 800ddb0:	4656      	mov	r6, sl
 800ddb2:	2331      	movs	r3, #49	@ 0x31
 800ddb4:	f806 3b01 	strb.w	r3, [r6], #1
 800ddb8:	9b04      	ldr	r3, [sp, #16]
 800ddba:	3301      	adds	r3, #1
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	e6ae      	b.n	800db1e <_dtoa_r+0x696>
 800ddc0:	9c07      	ldr	r4, [sp, #28]
 800ddc2:	9704      	str	r7, [sp, #16]
 800ddc4:	4625      	mov	r5, r4
 800ddc6:	e7f3      	b.n	800ddb0 <_dtoa_r+0x928>
 800ddc8:	9b07      	ldr	r3, [sp, #28]
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	f000 8104 	beq.w	800dfdc <_dtoa_r+0xb54>
 800ddd4:	2e00      	cmp	r6, #0
 800ddd6:	dd05      	ble.n	800dde4 <_dtoa_r+0x95c>
 800ddd8:	4629      	mov	r1, r5
 800ddda:	4632      	mov	r2, r6
 800dddc:	4658      	mov	r0, fp
 800ddde:	f000 fbb9 	bl	800e554 <__lshift>
 800dde2:	4605      	mov	r5, r0
 800dde4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d05a      	beq.n	800dea0 <_dtoa_r+0xa18>
 800ddea:	6869      	ldr	r1, [r5, #4]
 800ddec:	4658      	mov	r0, fp
 800ddee:	f000 f959 	bl	800e0a4 <_Balloc>
 800ddf2:	4606      	mov	r6, r0
 800ddf4:	b928      	cbnz	r0, 800de02 <_dtoa_r+0x97a>
 800ddf6:	4b84      	ldr	r3, [pc, #528]	@ (800e008 <_dtoa_r+0xb80>)
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ddfe:	f7ff bb5a 	b.w	800d4b6 <_dtoa_r+0x2e>
 800de02:	692a      	ldr	r2, [r5, #16]
 800de04:	3202      	adds	r2, #2
 800de06:	0092      	lsls	r2, r2, #2
 800de08:	f105 010c 	add.w	r1, r5, #12
 800de0c:	300c      	adds	r0, #12
 800de0e:	f7ff fa9e 	bl	800d34e <memcpy>
 800de12:	2201      	movs	r2, #1
 800de14:	4631      	mov	r1, r6
 800de16:	4658      	mov	r0, fp
 800de18:	f000 fb9c 	bl	800e554 <__lshift>
 800de1c:	f10a 0301 	add.w	r3, sl, #1
 800de20:	9307      	str	r3, [sp, #28]
 800de22:	9b00      	ldr	r3, [sp, #0]
 800de24:	4453      	add	r3, sl
 800de26:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de28:	9b02      	ldr	r3, [sp, #8]
 800de2a:	f003 0301 	and.w	r3, r3, #1
 800de2e:	462f      	mov	r7, r5
 800de30:	930a      	str	r3, [sp, #40]	@ 0x28
 800de32:	4605      	mov	r5, r0
 800de34:	9b07      	ldr	r3, [sp, #28]
 800de36:	4621      	mov	r1, r4
 800de38:	3b01      	subs	r3, #1
 800de3a:	4648      	mov	r0, r9
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	f7ff fa9b 	bl	800d378 <quorem>
 800de42:	4639      	mov	r1, r7
 800de44:	9002      	str	r0, [sp, #8]
 800de46:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800de4a:	4648      	mov	r0, r9
 800de4c:	f000 fbee 	bl	800e62c <__mcmp>
 800de50:	462a      	mov	r2, r5
 800de52:	9008      	str	r0, [sp, #32]
 800de54:	4621      	mov	r1, r4
 800de56:	4658      	mov	r0, fp
 800de58:	f000 fc04 	bl	800e664 <__mdiff>
 800de5c:	68c2      	ldr	r2, [r0, #12]
 800de5e:	4606      	mov	r6, r0
 800de60:	bb02      	cbnz	r2, 800dea4 <_dtoa_r+0xa1c>
 800de62:	4601      	mov	r1, r0
 800de64:	4648      	mov	r0, r9
 800de66:	f000 fbe1 	bl	800e62c <__mcmp>
 800de6a:	4602      	mov	r2, r0
 800de6c:	4631      	mov	r1, r6
 800de6e:	4658      	mov	r0, fp
 800de70:	920e      	str	r2, [sp, #56]	@ 0x38
 800de72:	f000 f957 	bl	800e124 <_Bfree>
 800de76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800de7a:	9e07      	ldr	r6, [sp, #28]
 800de7c:	ea43 0102 	orr.w	r1, r3, r2
 800de80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de82:	4319      	orrs	r1, r3
 800de84:	d110      	bne.n	800dea8 <_dtoa_r+0xa20>
 800de86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800de8a:	d029      	beq.n	800dee0 <_dtoa_r+0xa58>
 800de8c:	9b08      	ldr	r3, [sp, #32]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	dd02      	ble.n	800de98 <_dtoa_r+0xa10>
 800de92:	9b02      	ldr	r3, [sp, #8]
 800de94:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800de98:	9b00      	ldr	r3, [sp, #0]
 800de9a:	f883 8000 	strb.w	r8, [r3]
 800de9e:	e63f      	b.n	800db20 <_dtoa_r+0x698>
 800dea0:	4628      	mov	r0, r5
 800dea2:	e7bb      	b.n	800de1c <_dtoa_r+0x994>
 800dea4:	2201      	movs	r2, #1
 800dea6:	e7e1      	b.n	800de6c <_dtoa_r+0x9e4>
 800dea8:	9b08      	ldr	r3, [sp, #32]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	db04      	blt.n	800deb8 <_dtoa_r+0xa30>
 800deae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800deb0:	430b      	orrs	r3, r1
 800deb2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800deb4:	430b      	orrs	r3, r1
 800deb6:	d120      	bne.n	800defa <_dtoa_r+0xa72>
 800deb8:	2a00      	cmp	r2, #0
 800deba:	dded      	ble.n	800de98 <_dtoa_r+0xa10>
 800debc:	4649      	mov	r1, r9
 800debe:	2201      	movs	r2, #1
 800dec0:	4658      	mov	r0, fp
 800dec2:	f000 fb47 	bl	800e554 <__lshift>
 800dec6:	4621      	mov	r1, r4
 800dec8:	4681      	mov	r9, r0
 800deca:	f000 fbaf 	bl	800e62c <__mcmp>
 800dece:	2800      	cmp	r0, #0
 800ded0:	dc03      	bgt.n	800deda <_dtoa_r+0xa52>
 800ded2:	d1e1      	bne.n	800de98 <_dtoa_r+0xa10>
 800ded4:	f018 0f01 	tst.w	r8, #1
 800ded8:	d0de      	beq.n	800de98 <_dtoa_r+0xa10>
 800deda:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800dede:	d1d8      	bne.n	800de92 <_dtoa_r+0xa0a>
 800dee0:	9a00      	ldr	r2, [sp, #0]
 800dee2:	2339      	movs	r3, #57	@ 0x39
 800dee4:	7013      	strb	r3, [r2, #0]
 800dee6:	4633      	mov	r3, r6
 800dee8:	461e      	mov	r6, r3
 800deea:	3b01      	subs	r3, #1
 800deec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800def0:	2a39      	cmp	r2, #57	@ 0x39
 800def2:	d052      	beq.n	800df9a <_dtoa_r+0xb12>
 800def4:	3201      	adds	r2, #1
 800def6:	701a      	strb	r2, [r3, #0]
 800def8:	e612      	b.n	800db20 <_dtoa_r+0x698>
 800defa:	2a00      	cmp	r2, #0
 800defc:	dd07      	ble.n	800df0e <_dtoa_r+0xa86>
 800defe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800df02:	d0ed      	beq.n	800dee0 <_dtoa_r+0xa58>
 800df04:	9a00      	ldr	r2, [sp, #0]
 800df06:	f108 0301 	add.w	r3, r8, #1
 800df0a:	7013      	strb	r3, [r2, #0]
 800df0c:	e608      	b.n	800db20 <_dtoa_r+0x698>
 800df0e:	9b07      	ldr	r3, [sp, #28]
 800df10:	9a07      	ldr	r2, [sp, #28]
 800df12:	f803 8c01 	strb.w	r8, [r3, #-1]
 800df16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800df18:	4293      	cmp	r3, r2
 800df1a:	d028      	beq.n	800df6e <_dtoa_r+0xae6>
 800df1c:	4649      	mov	r1, r9
 800df1e:	2300      	movs	r3, #0
 800df20:	220a      	movs	r2, #10
 800df22:	4658      	mov	r0, fp
 800df24:	f000 f920 	bl	800e168 <__multadd>
 800df28:	42af      	cmp	r7, r5
 800df2a:	4681      	mov	r9, r0
 800df2c:	f04f 0300 	mov.w	r3, #0
 800df30:	f04f 020a 	mov.w	r2, #10
 800df34:	4639      	mov	r1, r7
 800df36:	4658      	mov	r0, fp
 800df38:	d107      	bne.n	800df4a <_dtoa_r+0xac2>
 800df3a:	f000 f915 	bl	800e168 <__multadd>
 800df3e:	4607      	mov	r7, r0
 800df40:	4605      	mov	r5, r0
 800df42:	9b07      	ldr	r3, [sp, #28]
 800df44:	3301      	adds	r3, #1
 800df46:	9307      	str	r3, [sp, #28]
 800df48:	e774      	b.n	800de34 <_dtoa_r+0x9ac>
 800df4a:	f000 f90d 	bl	800e168 <__multadd>
 800df4e:	4629      	mov	r1, r5
 800df50:	4607      	mov	r7, r0
 800df52:	2300      	movs	r3, #0
 800df54:	220a      	movs	r2, #10
 800df56:	4658      	mov	r0, fp
 800df58:	f000 f906 	bl	800e168 <__multadd>
 800df5c:	4605      	mov	r5, r0
 800df5e:	e7f0      	b.n	800df42 <_dtoa_r+0xaba>
 800df60:	9b00      	ldr	r3, [sp, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	bfcc      	ite	gt
 800df66:	461e      	movgt	r6, r3
 800df68:	2601      	movle	r6, #1
 800df6a:	4456      	add	r6, sl
 800df6c:	2700      	movs	r7, #0
 800df6e:	4649      	mov	r1, r9
 800df70:	2201      	movs	r2, #1
 800df72:	4658      	mov	r0, fp
 800df74:	f000 faee 	bl	800e554 <__lshift>
 800df78:	4621      	mov	r1, r4
 800df7a:	4681      	mov	r9, r0
 800df7c:	f000 fb56 	bl	800e62c <__mcmp>
 800df80:	2800      	cmp	r0, #0
 800df82:	dcb0      	bgt.n	800dee6 <_dtoa_r+0xa5e>
 800df84:	d102      	bne.n	800df8c <_dtoa_r+0xb04>
 800df86:	f018 0f01 	tst.w	r8, #1
 800df8a:	d1ac      	bne.n	800dee6 <_dtoa_r+0xa5e>
 800df8c:	4633      	mov	r3, r6
 800df8e:	461e      	mov	r6, r3
 800df90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df94:	2a30      	cmp	r2, #48	@ 0x30
 800df96:	d0fa      	beq.n	800df8e <_dtoa_r+0xb06>
 800df98:	e5c2      	b.n	800db20 <_dtoa_r+0x698>
 800df9a:	459a      	cmp	sl, r3
 800df9c:	d1a4      	bne.n	800dee8 <_dtoa_r+0xa60>
 800df9e:	9b04      	ldr	r3, [sp, #16]
 800dfa0:	3301      	adds	r3, #1
 800dfa2:	9304      	str	r3, [sp, #16]
 800dfa4:	2331      	movs	r3, #49	@ 0x31
 800dfa6:	f88a 3000 	strb.w	r3, [sl]
 800dfaa:	e5b9      	b.n	800db20 <_dtoa_r+0x698>
 800dfac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dfae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e00c <_dtoa_r+0xb84>
 800dfb2:	b11b      	cbz	r3, 800dfbc <_dtoa_r+0xb34>
 800dfb4:	f10a 0308 	add.w	r3, sl, #8
 800dfb8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dfba:	6013      	str	r3, [r2, #0]
 800dfbc:	4650      	mov	r0, sl
 800dfbe:	b019      	add	sp, #100	@ 0x64
 800dfc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dfc6:	2b01      	cmp	r3, #1
 800dfc8:	f77f ae37 	ble.w	800dc3a <_dtoa_r+0x7b2>
 800dfcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dfce:	930a      	str	r3, [sp, #40]	@ 0x28
 800dfd0:	2001      	movs	r0, #1
 800dfd2:	e655      	b.n	800dc80 <_dtoa_r+0x7f8>
 800dfd4:	9b00      	ldr	r3, [sp, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	f77f aed6 	ble.w	800dd88 <_dtoa_r+0x900>
 800dfdc:	4656      	mov	r6, sl
 800dfde:	4621      	mov	r1, r4
 800dfe0:	4648      	mov	r0, r9
 800dfe2:	f7ff f9c9 	bl	800d378 <quorem>
 800dfe6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800dfea:	f806 8b01 	strb.w	r8, [r6], #1
 800dfee:	9b00      	ldr	r3, [sp, #0]
 800dff0:	eba6 020a 	sub.w	r2, r6, sl
 800dff4:	4293      	cmp	r3, r2
 800dff6:	ddb3      	ble.n	800df60 <_dtoa_r+0xad8>
 800dff8:	4649      	mov	r1, r9
 800dffa:	2300      	movs	r3, #0
 800dffc:	220a      	movs	r2, #10
 800dffe:	4658      	mov	r0, fp
 800e000:	f000 f8b2 	bl	800e168 <__multadd>
 800e004:	4681      	mov	r9, r0
 800e006:	e7ea      	b.n	800dfde <_dtoa_r+0xb56>
 800e008:	080112ff 	.word	0x080112ff
 800e00c:	08011283 	.word	0x08011283

0800e010 <_free_r>:
 800e010:	b538      	push	{r3, r4, r5, lr}
 800e012:	4605      	mov	r5, r0
 800e014:	2900      	cmp	r1, #0
 800e016:	d041      	beq.n	800e09c <_free_r+0x8c>
 800e018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e01c:	1f0c      	subs	r4, r1, #4
 800e01e:	2b00      	cmp	r3, #0
 800e020:	bfb8      	it	lt
 800e022:	18e4      	addlt	r4, r4, r3
 800e024:	f7fe f8e4 	bl	800c1f0 <__malloc_lock>
 800e028:	4a1d      	ldr	r2, [pc, #116]	@ (800e0a0 <_free_r+0x90>)
 800e02a:	6813      	ldr	r3, [r2, #0]
 800e02c:	b933      	cbnz	r3, 800e03c <_free_r+0x2c>
 800e02e:	6063      	str	r3, [r4, #4]
 800e030:	6014      	str	r4, [r2, #0]
 800e032:	4628      	mov	r0, r5
 800e034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e038:	f7fe b8e0 	b.w	800c1fc <__malloc_unlock>
 800e03c:	42a3      	cmp	r3, r4
 800e03e:	d908      	bls.n	800e052 <_free_r+0x42>
 800e040:	6820      	ldr	r0, [r4, #0]
 800e042:	1821      	adds	r1, r4, r0
 800e044:	428b      	cmp	r3, r1
 800e046:	bf01      	itttt	eq
 800e048:	6819      	ldreq	r1, [r3, #0]
 800e04a:	685b      	ldreq	r3, [r3, #4]
 800e04c:	1809      	addeq	r1, r1, r0
 800e04e:	6021      	streq	r1, [r4, #0]
 800e050:	e7ed      	b.n	800e02e <_free_r+0x1e>
 800e052:	461a      	mov	r2, r3
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	b10b      	cbz	r3, 800e05c <_free_r+0x4c>
 800e058:	42a3      	cmp	r3, r4
 800e05a:	d9fa      	bls.n	800e052 <_free_r+0x42>
 800e05c:	6811      	ldr	r1, [r2, #0]
 800e05e:	1850      	adds	r0, r2, r1
 800e060:	42a0      	cmp	r0, r4
 800e062:	d10b      	bne.n	800e07c <_free_r+0x6c>
 800e064:	6820      	ldr	r0, [r4, #0]
 800e066:	4401      	add	r1, r0
 800e068:	1850      	adds	r0, r2, r1
 800e06a:	4283      	cmp	r3, r0
 800e06c:	6011      	str	r1, [r2, #0]
 800e06e:	d1e0      	bne.n	800e032 <_free_r+0x22>
 800e070:	6818      	ldr	r0, [r3, #0]
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	6053      	str	r3, [r2, #4]
 800e076:	4408      	add	r0, r1
 800e078:	6010      	str	r0, [r2, #0]
 800e07a:	e7da      	b.n	800e032 <_free_r+0x22>
 800e07c:	d902      	bls.n	800e084 <_free_r+0x74>
 800e07e:	230c      	movs	r3, #12
 800e080:	602b      	str	r3, [r5, #0]
 800e082:	e7d6      	b.n	800e032 <_free_r+0x22>
 800e084:	6820      	ldr	r0, [r4, #0]
 800e086:	1821      	adds	r1, r4, r0
 800e088:	428b      	cmp	r3, r1
 800e08a:	bf04      	itt	eq
 800e08c:	6819      	ldreq	r1, [r3, #0]
 800e08e:	685b      	ldreq	r3, [r3, #4]
 800e090:	6063      	str	r3, [r4, #4]
 800e092:	bf04      	itt	eq
 800e094:	1809      	addeq	r1, r1, r0
 800e096:	6021      	streq	r1, [r4, #0]
 800e098:	6054      	str	r4, [r2, #4]
 800e09a:	e7ca      	b.n	800e032 <_free_r+0x22>
 800e09c:	bd38      	pop	{r3, r4, r5, pc}
 800e09e:	bf00      	nop
 800e0a0:	20001fa4 	.word	0x20001fa4

0800e0a4 <_Balloc>:
 800e0a4:	b570      	push	{r4, r5, r6, lr}
 800e0a6:	69c6      	ldr	r6, [r0, #28]
 800e0a8:	4604      	mov	r4, r0
 800e0aa:	460d      	mov	r5, r1
 800e0ac:	b976      	cbnz	r6, 800e0cc <_Balloc+0x28>
 800e0ae:	2010      	movs	r0, #16
 800e0b0:	f7fd fff4 	bl	800c09c <malloc>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	61e0      	str	r0, [r4, #28]
 800e0b8:	b920      	cbnz	r0, 800e0c4 <_Balloc+0x20>
 800e0ba:	4b18      	ldr	r3, [pc, #96]	@ (800e11c <_Balloc+0x78>)
 800e0bc:	4818      	ldr	r0, [pc, #96]	@ (800e120 <_Balloc+0x7c>)
 800e0be:	216b      	movs	r1, #107	@ 0x6b
 800e0c0:	f002 f8ee 	bl	80102a0 <__assert_func>
 800e0c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0c8:	6006      	str	r6, [r0, #0]
 800e0ca:	60c6      	str	r6, [r0, #12]
 800e0cc:	69e6      	ldr	r6, [r4, #28]
 800e0ce:	68f3      	ldr	r3, [r6, #12]
 800e0d0:	b183      	cbz	r3, 800e0f4 <_Balloc+0x50>
 800e0d2:	69e3      	ldr	r3, [r4, #28]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0da:	b9b8      	cbnz	r0, 800e10c <_Balloc+0x68>
 800e0dc:	2101      	movs	r1, #1
 800e0de:	fa01 f605 	lsl.w	r6, r1, r5
 800e0e2:	1d72      	adds	r2, r6, #5
 800e0e4:	0092      	lsls	r2, r2, #2
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f002 f8f8 	bl	80102dc <_calloc_r>
 800e0ec:	b160      	cbz	r0, 800e108 <_Balloc+0x64>
 800e0ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0f2:	e00e      	b.n	800e112 <_Balloc+0x6e>
 800e0f4:	2221      	movs	r2, #33	@ 0x21
 800e0f6:	2104      	movs	r1, #4
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f002 f8ef 	bl	80102dc <_calloc_r>
 800e0fe:	69e3      	ldr	r3, [r4, #28]
 800e100:	60f0      	str	r0, [r6, #12]
 800e102:	68db      	ldr	r3, [r3, #12]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d1e4      	bne.n	800e0d2 <_Balloc+0x2e>
 800e108:	2000      	movs	r0, #0
 800e10a:	bd70      	pop	{r4, r5, r6, pc}
 800e10c:	6802      	ldr	r2, [r0, #0]
 800e10e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e112:	2300      	movs	r3, #0
 800e114:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e118:	e7f7      	b.n	800e10a <_Balloc+0x66>
 800e11a:	bf00      	nop
 800e11c:	08011290 	.word	0x08011290
 800e120:	08011310 	.word	0x08011310

0800e124 <_Bfree>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	69c6      	ldr	r6, [r0, #28]
 800e128:	4605      	mov	r5, r0
 800e12a:	460c      	mov	r4, r1
 800e12c:	b976      	cbnz	r6, 800e14c <_Bfree+0x28>
 800e12e:	2010      	movs	r0, #16
 800e130:	f7fd ffb4 	bl	800c09c <malloc>
 800e134:	4602      	mov	r2, r0
 800e136:	61e8      	str	r0, [r5, #28]
 800e138:	b920      	cbnz	r0, 800e144 <_Bfree+0x20>
 800e13a:	4b09      	ldr	r3, [pc, #36]	@ (800e160 <_Bfree+0x3c>)
 800e13c:	4809      	ldr	r0, [pc, #36]	@ (800e164 <_Bfree+0x40>)
 800e13e:	218f      	movs	r1, #143	@ 0x8f
 800e140:	f002 f8ae 	bl	80102a0 <__assert_func>
 800e144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e148:	6006      	str	r6, [r0, #0]
 800e14a:	60c6      	str	r6, [r0, #12]
 800e14c:	b13c      	cbz	r4, 800e15e <_Bfree+0x3a>
 800e14e:	69eb      	ldr	r3, [r5, #28]
 800e150:	6862      	ldr	r2, [r4, #4]
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e158:	6021      	str	r1, [r4, #0]
 800e15a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
 800e160:	08011290 	.word	0x08011290
 800e164:	08011310 	.word	0x08011310

0800e168 <__multadd>:
 800e168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e16c:	690d      	ldr	r5, [r1, #16]
 800e16e:	4607      	mov	r7, r0
 800e170:	460c      	mov	r4, r1
 800e172:	461e      	mov	r6, r3
 800e174:	f101 0c14 	add.w	ip, r1, #20
 800e178:	2000      	movs	r0, #0
 800e17a:	f8dc 3000 	ldr.w	r3, [ip]
 800e17e:	b299      	uxth	r1, r3
 800e180:	fb02 6101 	mla	r1, r2, r1, r6
 800e184:	0c1e      	lsrs	r6, r3, #16
 800e186:	0c0b      	lsrs	r3, r1, #16
 800e188:	fb02 3306 	mla	r3, r2, r6, r3
 800e18c:	b289      	uxth	r1, r1
 800e18e:	3001      	adds	r0, #1
 800e190:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e194:	4285      	cmp	r5, r0
 800e196:	f84c 1b04 	str.w	r1, [ip], #4
 800e19a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e19e:	dcec      	bgt.n	800e17a <__multadd+0x12>
 800e1a0:	b30e      	cbz	r6, 800e1e6 <__multadd+0x7e>
 800e1a2:	68a3      	ldr	r3, [r4, #8]
 800e1a4:	42ab      	cmp	r3, r5
 800e1a6:	dc19      	bgt.n	800e1dc <__multadd+0x74>
 800e1a8:	6861      	ldr	r1, [r4, #4]
 800e1aa:	4638      	mov	r0, r7
 800e1ac:	3101      	adds	r1, #1
 800e1ae:	f7ff ff79 	bl	800e0a4 <_Balloc>
 800e1b2:	4680      	mov	r8, r0
 800e1b4:	b928      	cbnz	r0, 800e1c2 <__multadd+0x5a>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	4b0c      	ldr	r3, [pc, #48]	@ (800e1ec <__multadd+0x84>)
 800e1ba:	480d      	ldr	r0, [pc, #52]	@ (800e1f0 <__multadd+0x88>)
 800e1bc:	21ba      	movs	r1, #186	@ 0xba
 800e1be:	f002 f86f 	bl	80102a0 <__assert_func>
 800e1c2:	6922      	ldr	r2, [r4, #16]
 800e1c4:	3202      	adds	r2, #2
 800e1c6:	f104 010c 	add.w	r1, r4, #12
 800e1ca:	0092      	lsls	r2, r2, #2
 800e1cc:	300c      	adds	r0, #12
 800e1ce:	f7ff f8be 	bl	800d34e <memcpy>
 800e1d2:	4621      	mov	r1, r4
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	f7ff ffa5 	bl	800e124 <_Bfree>
 800e1da:	4644      	mov	r4, r8
 800e1dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1e0:	3501      	adds	r5, #1
 800e1e2:	615e      	str	r6, [r3, #20]
 800e1e4:	6125      	str	r5, [r4, #16]
 800e1e6:	4620      	mov	r0, r4
 800e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ec:	080112ff 	.word	0x080112ff
 800e1f0:	08011310 	.word	0x08011310

0800e1f4 <__s2b>:
 800e1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1f8:	460c      	mov	r4, r1
 800e1fa:	4615      	mov	r5, r2
 800e1fc:	461f      	mov	r7, r3
 800e1fe:	2209      	movs	r2, #9
 800e200:	3308      	adds	r3, #8
 800e202:	4606      	mov	r6, r0
 800e204:	fb93 f3f2 	sdiv	r3, r3, r2
 800e208:	2100      	movs	r1, #0
 800e20a:	2201      	movs	r2, #1
 800e20c:	429a      	cmp	r2, r3
 800e20e:	db09      	blt.n	800e224 <__s2b+0x30>
 800e210:	4630      	mov	r0, r6
 800e212:	f7ff ff47 	bl	800e0a4 <_Balloc>
 800e216:	b940      	cbnz	r0, 800e22a <__s2b+0x36>
 800e218:	4602      	mov	r2, r0
 800e21a:	4b19      	ldr	r3, [pc, #100]	@ (800e280 <__s2b+0x8c>)
 800e21c:	4819      	ldr	r0, [pc, #100]	@ (800e284 <__s2b+0x90>)
 800e21e:	21d3      	movs	r1, #211	@ 0xd3
 800e220:	f002 f83e 	bl	80102a0 <__assert_func>
 800e224:	0052      	lsls	r2, r2, #1
 800e226:	3101      	adds	r1, #1
 800e228:	e7f0      	b.n	800e20c <__s2b+0x18>
 800e22a:	9b08      	ldr	r3, [sp, #32]
 800e22c:	6143      	str	r3, [r0, #20]
 800e22e:	2d09      	cmp	r5, #9
 800e230:	f04f 0301 	mov.w	r3, #1
 800e234:	6103      	str	r3, [r0, #16]
 800e236:	dd16      	ble.n	800e266 <__s2b+0x72>
 800e238:	f104 0909 	add.w	r9, r4, #9
 800e23c:	46c8      	mov	r8, r9
 800e23e:	442c      	add	r4, r5
 800e240:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e244:	4601      	mov	r1, r0
 800e246:	3b30      	subs	r3, #48	@ 0x30
 800e248:	220a      	movs	r2, #10
 800e24a:	4630      	mov	r0, r6
 800e24c:	f7ff ff8c 	bl	800e168 <__multadd>
 800e250:	45a0      	cmp	r8, r4
 800e252:	d1f5      	bne.n	800e240 <__s2b+0x4c>
 800e254:	f1a5 0408 	sub.w	r4, r5, #8
 800e258:	444c      	add	r4, r9
 800e25a:	1b2d      	subs	r5, r5, r4
 800e25c:	1963      	adds	r3, r4, r5
 800e25e:	42bb      	cmp	r3, r7
 800e260:	db04      	blt.n	800e26c <__s2b+0x78>
 800e262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e266:	340a      	adds	r4, #10
 800e268:	2509      	movs	r5, #9
 800e26a:	e7f6      	b.n	800e25a <__s2b+0x66>
 800e26c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e270:	4601      	mov	r1, r0
 800e272:	3b30      	subs	r3, #48	@ 0x30
 800e274:	220a      	movs	r2, #10
 800e276:	4630      	mov	r0, r6
 800e278:	f7ff ff76 	bl	800e168 <__multadd>
 800e27c:	e7ee      	b.n	800e25c <__s2b+0x68>
 800e27e:	bf00      	nop
 800e280:	080112ff 	.word	0x080112ff
 800e284:	08011310 	.word	0x08011310

0800e288 <__hi0bits>:
 800e288:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e28c:	4603      	mov	r3, r0
 800e28e:	bf36      	itet	cc
 800e290:	0403      	lslcc	r3, r0, #16
 800e292:	2000      	movcs	r0, #0
 800e294:	2010      	movcc	r0, #16
 800e296:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e29a:	bf3c      	itt	cc
 800e29c:	021b      	lslcc	r3, r3, #8
 800e29e:	3008      	addcc	r0, #8
 800e2a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e2a4:	bf3c      	itt	cc
 800e2a6:	011b      	lslcc	r3, r3, #4
 800e2a8:	3004      	addcc	r0, #4
 800e2aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2ae:	bf3c      	itt	cc
 800e2b0:	009b      	lslcc	r3, r3, #2
 800e2b2:	3002      	addcc	r0, #2
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	db05      	blt.n	800e2c4 <__hi0bits+0x3c>
 800e2b8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e2bc:	f100 0001 	add.w	r0, r0, #1
 800e2c0:	bf08      	it	eq
 800e2c2:	2020      	moveq	r0, #32
 800e2c4:	4770      	bx	lr

0800e2c6 <__lo0bits>:
 800e2c6:	6803      	ldr	r3, [r0, #0]
 800e2c8:	4602      	mov	r2, r0
 800e2ca:	f013 0007 	ands.w	r0, r3, #7
 800e2ce:	d00b      	beq.n	800e2e8 <__lo0bits+0x22>
 800e2d0:	07d9      	lsls	r1, r3, #31
 800e2d2:	d421      	bmi.n	800e318 <__lo0bits+0x52>
 800e2d4:	0798      	lsls	r0, r3, #30
 800e2d6:	bf49      	itett	mi
 800e2d8:	085b      	lsrmi	r3, r3, #1
 800e2da:	089b      	lsrpl	r3, r3, #2
 800e2dc:	2001      	movmi	r0, #1
 800e2de:	6013      	strmi	r3, [r2, #0]
 800e2e0:	bf5c      	itt	pl
 800e2e2:	6013      	strpl	r3, [r2, #0]
 800e2e4:	2002      	movpl	r0, #2
 800e2e6:	4770      	bx	lr
 800e2e8:	b299      	uxth	r1, r3
 800e2ea:	b909      	cbnz	r1, 800e2f0 <__lo0bits+0x2a>
 800e2ec:	0c1b      	lsrs	r3, r3, #16
 800e2ee:	2010      	movs	r0, #16
 800e2f0:	b2d9      	uxtb	r1, r3
 800e2f2:	b909      	cbnz	r1, 800e2f8 <__lo0bits+0x32>
 800e2f4:	3008      	adds	r0, #8
 800e2f6:	0a1b      	lsrs	r3, r3, #8
 800e2f8:	0719      	lsls	r1, r3, #28
 800e2fa:	bf04      	itt	eq
 800e2fc:	091b      	lsreq	r3, r3, #4
 800e2fe:	3004      	addeq	r0, #4
 800e300:	0799      	lsls	r1, r3, #30
 800e302:	bf04      	itt	eq
 800e304:	089b      	lsreq	r3, r3, #2
 800e306:	3002      	addeq	r0, #2
 800e308:	07d9      	lsls	r1, r3, #31
 800e30a:	d403      	bmi.n	800e314 <__lo0bits+0x4e>
 800e30c:	085b      	lsrs	r3, r3, #1
 800e30e:	f100 0001 	add.w	r0, r0, #1
 800e312:	d003      	beq.n	800e31c <__lo0bits+0x56>
 800e314:	6013      	str	r3, [r2, #0]
 800e316:	4770      	bx	lr
 800e318:	2000      	movs	r0, #0
 800e31a:	4770      	bx	lr
 800e31c:	2020      	movs	r0, #32
 800e31e:	4770      	bx	lr

0800e320 <__i2b>:
 800e320:	b510      	push	{r4, lr}
 800e322:	460c      	mov	r4, r1
 800e324:	2101      	movs	r1, #1
 800e326:	f7ff febd 	bl	800e0a4 <_Balloc>
 800e32a:	4602      	mov	r2, r0
 800e32c:	b928      	cbnz	r0, 800e33a <__i2b+0x1a>
 800e32e:	4b05      	ldr	r3, [pc, #20]	@ (800e344 <__i2b+0x24>)
 800e330:	4805      	ldr	r0, [pc, #20]	@ (800e348 <__i2b+0x28>)
 800e332:	f240 1145 	movw	r1, #325	@ 0x145
 800e336:	f001 ffb3 	bl	80102a0 <__assert_func>
 800e33a:	2301      	movs	r3, #1
 800e33c:	6144      	str	r4, [r0, #20]
 800e33e:	6103      	str	r3, [r0, #16]
 800e340:	bd10      	pop	{r4, pc}
 800e342:	bf00      	nop
 800e344:	080112ff 	.word	0x080112ff
 800e348:	08011310 	.word	0x08011310

0800e34c <__multiply>:
 800e34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e350:	4614      	mov	r4, r2
 800e352:	690a      	ldr	r2, [r1, #16]
 800e354:	6923      	ldr	r3, [r4, #16]
 800e356:	429a      	cmp	r2, r3
 800e358:	bfa8      	it	ge
 800e35a:	4623      	movge	r3, r4
 800e35c:	460f      	mov	r7, r1
 800e35e:	bfa4      	itt	ge
 800e360:	460c      	movge	r4, r1
 800e362:	461f      	movge	r7, r3
 800e364:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800e368:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800e36c:	68a3      	ldr	r3, [r4, #8]
 800e36e:	6861      	ldr	r1, [r4, #4]
 800e370:	eb0a 0609 	add.w	r6, sl, r9
 800e374:	42b3      	cmp	r3, r6
 800e376:	b085      	sub	sp, #20
 800e378:	bfb8      	it	lt
 800e37a:	3101      	addlt	r1, #1
 800e37c:	f7ff fe92 	bl	800e0a4 <_Balloc>
 800e380:	b930      	cbnz	r0, 800e390 <__multiply+0x44>
 800e382:	4602      	mov	r2, r0
 800e384:	4b44      	ldr	r3, [pc, #272]	@ (800e498 <__multiply+0x14c>)
 800e386:	4845      	ldr	r0, [pc, #276]	@ (800e49c <__multiply+0x150>)
 800e388:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e38c:	f001 ff88 	bl	80102a0 <__assert_func>
 800e390:	f100 0514 	add.w	r5, r0, #20
 800e394:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e398:	462b      	mov	r3, r5
 800e39a:	2200      	movs	r2, #0
 800e39c:	4543      	cmp	r3, r8
 800e39e:	d321      	bcc.n	800e3e4 <__multiply+0x98>
 800e3a0:	f107 0114 	add.w	r1, r7, #20
 800e3a4:	f104 0214 	add.w	r2, r4, #20
 800e3a8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800e3ac:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800e3b0:	9302      	str	r3, [sp, #8]
 800e3b2:	1b13      	subs	r3, r2, r4
 800e3b4:	3b15      	subs	r3, #21
 800e3b6:	f023 0303 	bic.w	r3, r3, #3
 800e3ba:	3304      	adds	r3, #4
 800e3bc:	f104 0715 	add.w	r7, r4, #21
 800e3c0:	42ba      	cmp	r2, r7
 800e3c2:	bf38      	it	cc
 800e3c4:	2304      	movcc	r3, #4
 800e3c6:	9301      	str	r3, [sp, #4]
 800e3c8:	9b02      	ldr	r3, [sp, #8]
 800e3ca:	9103      	str	r1, [sp, #12]
 800e3cc:	428b      	cmp	r3, r1
 800e3ce:	d80c      	bhi.n	800e3ea <__multiply+0x9e>
 800e3d0:	2e00      	cmp	r6, #0
 800e3d2:	dd03      	ble.n	800e3dc <__multiply+0x90>
 800e3d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d05b      	beq.n	800e494 <__multiply+0x148>
 800e3dc:	6106      	str	r6, [r0, #16]
 800e3de:	b005      	add	sp, #20
 800e3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e4:	f843 2b04 	str.w	r2, [r3], #4
 800e3e8:	e7d8      	b.n	800e39c <__multiply+0x50>
 800e3ea:	f8b1 a000 	ldrh.w	sl, [r1]
 800e3ee:	f1ba 0f00 	cmp.w	sl, #0
 800e3f2:	d024      	beq.n	800e43e <__multiply+0xf2>
 800e3f4:	f104 0e14 	add.w	lr, r4, #20
 800e3f8:	46a9      	mov	r9, r5
 800e3fa:	f04f 0c00 	mov.w	ip, #0
 800e3fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e402:	f8d9 3000 	ldr.w	r3, [r9]
 800e406:	fa1f fb87 	uxth.w	fp, r7
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	fb0a 330b 	mla	r3, sl, fp, r3
 800e410:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800e414:	f8d9 7000 	ldr.w	r7, [r9]
 800e418:	4463      	add	r3, ip
 800e41a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e41e:	fb0a c70b 	mla	r7, sl, fp, ip
 800e422:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800e426:	b29b      	uxth	r3, r3
 800e428:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e42c:	4572      	cmp	r2, lr
 800e42e:	f849 3b04 	str.w	r3, [r9], #4
 800e432:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800e436:	d8e2      	bhi.n	800e3fe <__multiply+0xb2>
 800e438:	9b01      	ldr	r3, [sp, #4]
 800e43a:	f845 c003 	str.w	ip, [r5, r3]
 800e43e:	9b03      	ldr	r3, [sp, #12]
 800e440:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e444:	3104      	adds	r1, #4
 800e446:	f1b9 0f00 	cmp.w	r9, #0
 800e44a:	d021      	beq.n	800e490 <__multiply+0x144>
 800e44c:	682b      	ldr	r3, [r5, #0]
 800e44e:	f104 0c14 	add.w	ip, r4, #20
 800e452:	46ae      	mov	lr, r5
 800e454:	f04f 0a00 	mov.w	sl, #0
 800e458:	f8bc b000 	ldrh.w	fp, [ip]
 800e45c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800e460:	fb09 770b 	mla	r7, r9, fp, r7
 800e464:	4457      	add	r7, sl
 800e466:	b29b      	uxth	r3, r3
 800e468:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800e46c:	f84e 3b04 	str.w	r3, [lr], #4
 800e470:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e474:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e478:	f8be 3000 	ldrh.w	r3, [lr]
 800e47c:	fb09 330a 	mla	r3, r9, sl, r3
 800e480:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800e484:	4562      	cmp	r2, ip
 800e486:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e48a:	d8e5      	bhi.n	800e458 <__multiply+0x10c>
 800e48c:	9f01      	ldr	r7, [sp, #4]
 800e48e:	51eb      	str	r3, [r5, r7]
 800e490:	3504      	adds	r5, #4
 800e492:	e799      	b.n	800e3c8 <__multiply+0x7c>
 800e494:	3e01      	subs	r6, #1
 800e496:	e79b      	b.n	800e3d0 <__multiply+0x84>
 800e498:	080112ff 	.word	0x080112ff
 800e49c:	08011310 	.word	0x08011310

0800e4a0 <__pow5mult>:
 800e4a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e4a4:	4615      	mov	r5, r2
 800e4a6:	f012 0203 	ands.w	r2, r2, #3
 800e4aa:	4607      	mov	r7, r0
 800e4ac:	460e      	mov	r6, r1
 800e4ae:	d007      	beq.n	800e4c0 <__pow5mult+0x20>
 800e4b0:	4c25      	ldr	r4, [pc, #148]	@ (800e548 <__pow5mult+0xa8>)
 800e4b2:	3a01      	subs	r2, #1
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e4ba:	f7ff fe55 	bl	800e168 <__multadd>
 800e4be:	4606      	mov	r6, r0
 800e4c0:	10ad      	asrs	r5, r5, #2
 800e4c2:	d03d      	beq.n	800e540 <__pow5mult+0xa0>
 800e4c4:	69fc      	ldr	r4, [r7, #28]
 800e4c6:	b97c      	cbnz	r4, 800e4e8 <__pow5mult+0x48>
 800e4c8:	2010      	movs	r0, #16
 800e4ca:	f7fd fde7 	bl	800c09c <malloc>
 800e4ce:	4602      	mov	r2, r0
 800e4d0:	61f8      	str	r0, [r7, #28]
 800e4d2:	b928      	cbnz	r0, 800e4e0 <__pow5mult+0x40>
 800e4d4:	4b1d      	ldr	r3, [pc, #116]	@ (800e54c <__pow5mult+0xac>)
 800e4d6:	481e      	ldr	r0, [pc, #120]	@ (800e550 <__pow5mult+0xb0>)
 800e4d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e4dc:	f001 fee0 	bl	80102a0 <__assert_func>
 800e4e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4e4:	6004      	str	r4, [r0, #0]
 800e4e6:	60c4      	str	r4, [r0, #12]
 800e4e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e4ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4f0:	b94c      	cbnz	r4, 800e506 <__pow5mult+0x66>
 800e4f2:	f240 2171 	movw	r1, #625	@ 0x271
 800e4f6:	4638      	mov	r0, r7
 800e4f8:	f7ff ff12 	bl	800e320 <__i2b>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	f8c8 0008 	str.w	r0, [r8, #8]
 800e502:	4604      	mov	r4, r0
 800e504:	6003      	str	r3, [r0, #0]
 800e506:	f04f 0900 	mov.w	r9, #0
 800e50a:	07eb      	lsls	r3, r5, #31
 800e50c:	d50a      	bpl.n	800e524 <__pow5mult+0x84>
 800e50e:	4631      	mov	r1, r6
 800e510:	4622      	mov	r2, r4
 800e512:	4638      	mov	r0, r7
 800e514:	f7ff ff1a 	bl	800e34c <__multiply>
 800e518:	4631      	mov	r1, r6
 800e51a:	4680      	mov	r8, r0
 800e51c:	4638      	mov	r0, r7
 800e51e:	f7ff fe01 	bl	800e124 <_Bfree>
 800e522:	4646      	mov	r6, r8
 800e524:	106d      	asrs	r5, r5, #1
 800e526:	d00b      	beq.n	800e540 <__pow5mult+0xa0>
 800e528:	6820      	ldr	r0, [r4, #0]
 800e52a:	b938      	cbnz	r0, 800e53c <__pow5mult+0x9c>
 800e52c:	4622      	mov	r2, r4
 800e52e:	4621      	mov	r1, r4
 800e530:	4638      	mov	r0, r7
 800e532:	f7ff ff0b 	bl	800e34c <__multiply>
 800e536:	6020      	str	r0, [r4, #0]
 800e538:	f8c0 9000 	str.w	r9, [r0]
 800e53c:	4604      	mov	r4, r0
 800e53e:	e7e4      	b.n	800e50a <__pow5mult+0x6a>
 800e540:	4630      	mov	r0, r6
 800e542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e546:	bf00      	nop
 800e548:	0801136c 	.word	0x0801136c
 800e54c:	08011290 	.word	0x08011290
 800e550:	08011310 	.word	0x08011310

0800e554 <__lshift>:
 800e554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e558:	460c      	mov	r4, r1
 800e55a:	6849      	ldr	r1, [r1, #4]
 800e55c:	6923      	ldr	r3, [r4, #16]
 800e55e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e562:	68a3      	ldr	r3, [r4, #8]
 800e564:	4607      	mov	r7, r0
 800e566:	4691      	mov	r9, r2
 800e568:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e56c:	f108 0601 	add.w	r6, r8, #1
 800e570:	42b3      	cmp	r3, r6
 800e572:	db0b      	blt.n	800e58c <__lshift+0x38>
 800e574:	4638      	mov	r0, r7
 800e576:	f7ff fd95 	bl	800e0a4 <_Balloc>
 800e57a:	4605      	mov	r5, r0
 800e57c:	b948      	cbnz	r0, 800e592 <__lshift+0x3e>
 800e57e:	4602      	mov	r2, r0
 800e580:	4b28      	ldr	r3, [pc, #160]	@ (800e624 <__lshift+0xd0>)
 800e582:	4829      	ldr	r0, [pc, #164]	@ (800e628 <__lshift+0xd4>)
 800e584:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e588:	f001 fe8a 	bl	80102a0 <__assert_func>
 800e58c:	3101      	adds	r1, #1
 800e58e:	005b      	lsls	r3, r3, #1
 800e590:	e7ee      	b.n	800e570 <__lshift+0x1c>
 800e592:	2300      	movs	r3, #0
 800e594:	f100 0114 	add.w	r1, r0, #20
 800e598:	f100 0210 	add.w	r2, r0, #16
 800e59c:	4618      	mov	r0, r3
 800e59e:	4553      	cmp	r3, sl
 800e5a0:	db33      	blt.n	800e60a <__lshift+0xb6>
 800e5a2:	6920      	ldr	r0, [r4, #16]
 800e5a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e5a8:	f104 0314 	add.w	r3, r4, #20
 800e5ac:	f019 091f 	ands.w	r9, r9, #31
 800e5b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e5b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e5b8:	d02b      	beq.n	800e612 <__lshift+0xbe>
 800e5ba:	f1c9 0e20 	rsb	lr, r9, #32
 800e5be:	468a      	mov	sl, r1
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	6818      	ldr	r0, [r3, #0]
 800e5c4:	fa00 f009 	lsl.w	r0, r0, r9
 800e5c8:	4310      	orrs	r0, r2
 800e5ca:	f84a 0b04 	str.w	r0, [sl], #4
 800e5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5d2:	459c      	cmp	ip, r3
 800e5d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e5d8:	d8f3      	bhi.n	800e5c2 <__lshift+0x6e>
 800e5da:	ebac 0304 	sub.w	r3, ip, r4
 800e5de:	3b15      	subs	r3, #21
 800e5e0:	f023 0303 	bic.w	r3, r3, #3
 800e5e4:	3304      	adds	r3, #4
 800e5e6:	f104 0015 	add.w	r0, r4, #21
 800e5ea:	4584      	cmp	ip, r0
 800e5ec:	bf38      	it	cc
 800e5ee:	2304      	movcc	r3, #4
 800e5f0:	50ca      	str	r2, [r1, r3]
 800e5f2:	b10a      	cbz	r2, 800e5f8 <__lshift+0xa4>
 800e5f4:	f108 0602 	add.w	r6, r8, #2
 800e5f8:	3e01      	subs	r6, #1
 800e5fa:	4638      	mov	r0, r7
 800e5fc:	612e      	str	r6, [r5, #16]
 800e5fe:	4621      	mov	r1, r4
 800e600:	f7ff fd90 	bl	800e124 <_Bfree>
 800e604:	4628      	mov	r0, r5
 800e606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e60a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e60e:	3301      	adds	r3, #1
 800e610:	e7c5      	b.n	800e59e <__lshift+0x4a>
 800e612:	3904      	subs	r1, #4
 800e614:	f853 2b04 	ldr.w	r2, [r3], #4
 800e618:	f841 2f04 	str.w	r2, [r1, #4]!
 800e61c:	459c      	cmp	ip, r3
 800e61e:	d8f9      	bhi.n	800e614 <__lshift+0xc0>
 800e620:	e7ea      	b.n	800e5f8 <__lshift+0xa4>
 800e622:	bf00      	nop
 800e624:	080112ff 	.word	0x080112ff
 800e628:	08011310 	.word	0x08011310

0800e62c <__mcmp>:
 800e62c:	690a      	ldr	r2, [r1, #16]
 800e62e:	4603      	mov	r3, r0
 800e630:	6900      	ldr	r0, [r0, #16]
 800e632:	1a80      	subs	r0, r0, r2
 800e634:	b530      	push	{r4, r5, lr}
 800e636:	d10e      	bne.n	800e656 <__mcmp+0x2a>
 800e638:	3314      	adds	r3, #20
 800e63a:	3114      	adds	r1, #20
 800e63c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e640:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e644:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e648:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e64c:	4295      	cmp	r5, r2
 800e64e:	d003      	beq.n	800e658 <__mcmp+0x2c>
 800e650:	d205      	bcs.n	800e65e <__mcmp+0x32>
 800e652:	f04f 30ff 	mov.w	r0, #4294967295
 800e656:	bd30      	pop	{r4, r5, pc}
 800e658:	42a3      	cmp	r3, r4
 800e65a:	d3f3      	bcc.n	800e644 <__mcmp+0x18>
 800e65c:	e7fb      	b.n	800e656 <__mcmp+0x2a>
 800e65e:	2001      	movs	r0, #1
 800e660:	e7f9      	b.n	800e656 <__mcmp+0x2a>
	...

0800e664 <__mdiff>:
 800e664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e668:	4689      	mov	r9, r1
 800e66a:	4606      	mov	r6, r0
 800e66c:	4611      	mov	r1, r2
 800e66e:	4648      	mov	r0, r9
 800e670:	4614      	mov	r4, r2
 800e672:	f7ff ffdb 	bl	800e62c <__mcmp>
 800e676:	1e05      	subs	r5, r0, #0
 800e678:	d112      	bne.n	800e6a0 <__mdiff+0x3c>
 800e67a:	4629      	mov	r1, r5
 800e67c:	4630      	mov	r0, r6
 800e67e:	f7ff fd11 	bl	800e0a4 <_Balloc>
 800e682:	4602      	mov	r2, r0
 800e684:	b928      	cbnz	r0, 800e692 <__mdiff+0x2e>
 800e686:	4b3f      	ldr	r3, [pc, #252]	@ (800e784 <__mdiff+0x120>)
 800e688:	f240 2137 	movw	r1, #567	@ 0x237
 800e68c:	483e      	ldr	r0, [pc, #248]	@ (800e788 <__mdiff+0x124>)
 800e68e:	f001 fe07 	bl	80102a0 <__assert_func>
 800e692:	2301      	movs	r3, #1
 800e694:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e698:	4610      	mov	r0, r2
 800e69a:	b003      	add	sp, #12
 800e69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a0:	bfbc      	itt	lt
 800e6a2:	464b      	movlt	r3, r9
 800e6a4:	46a1      	movlt	r9, r4
 800e6a6:	4630      	mov	r0, r6
 800e6a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e6ac:	bfba      	itte	lt
 800e6ae:	461c      	movlt	r4, r3
 800e6b0:	2501      	movlt	r5, #1
 800e6b2:	2500      	movge	r5, #0
 800e6b4:	f7ff fcf6 	bl	800e0a4 <_Balloc>
 800e6b8:	4602      	mov	r2, r0
 800e6ba:	b918      	cbnz	r0, 800e6c4 <__mdiff+0x60>
 800e6bc:	4b31      	ldr	r3, [pc, #196]	@ (800e784 <__mdiff+0x120>)
 800e6be:	f240 2145 	movw	r1, #581	@ 0x245
 800e6c2:	e7e3      	b.n	800e68c <__mdiff+0x28>
 800e6c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e6c8:	6926      	ldr	r6, [r4, #16]
 800e6ca:	60c5      	str	r5, [r0, #12]
 800e6cc:	f109 0310 	add.w	r3, r9, #16
 800e6d0:	f109 0514 	add.w	r5, r9, #20
 800e6d4:	f104 0e14 	add.w	lr, r4, #20
 800e6d8:	f100 0b14 	add.w	fp, r0, #20
 800e6dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e6e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e6e4:	9301      	str	r3, [sp, #4]
 800e6e6:	46d9      	mov	r9, fp
 800e6e8:	f04f 0c00 	mov.w	ip, #0
 800e6ec:	9b01      	ldr	r3, [sp, #4]
 800e6ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e6f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e6f6:	9301      	str	r3, [sp, #4]
 800e6f8:	fa1f f38a 	uxth.w	r3, sl
 800e6fc:	4619      	mov	r1, r3
 800e6fe:	b283      	uxth	r3, r0
 800e700:	1acb      	subs	r3, r1, r3
 800e702:	0c00      	lsrs	r0, r0, #16
 800e704:	4463      	add	r3, ip
 800e706:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e70a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e70e:	b29b      	uxth	r3, r3
 800e710:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e714:	4576      	cmp	r6, lr
 800e716:	f849 3b04 	str.w	r3, [r9], #4
 800e71a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e71e:	d8e5      	bhi.n	800e6ec <__mdiff+0x88>
 800e720:	1b33      	subs	r3, r6, r4
 800e722:	3b15      	subs	r3, #21
 800e724:	f023 0303 	bic.w	r3, r3, #3
 800e728:	3415      	adds	r4, #21
 800e72a:	3304      	adds	r3, #4
 800e72c:	42a6      	cmp	r6, r4
 800e72e:	bf38      	it	cc
 800e730:	2304      	movcc	r3, #4
 800e732:	441d      	add	r5, r3
 800e734:	445b      	add	r3, fp
 800e736:	461e      	mov	r6, r3
 800e738:	462c      	mov	r4, r5
 800e73a:	4544      	cmp	r4, r8
 800e73c:	d30e      	bcc.n	800e75c <__mdiff+0xf8>
 800e73e:	f108 0103 	add.w	r1, r8, #3
 800e742:	1b49      	subs	r1, r1, r5
 800e744:	f021 0103 	bic.w	r1, r1, #3
 800e748:	3d03      	subs	r5, #3
 800e74a:	45a8      	cmp	r8, r5
 800e74c:	bf38      	it	cc
 800e74e:	2100      	movcc	r1, #0
 800e750:	440b      	add	r3, r1
 800e752:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e756:	b191      	cbz	r1, 800e77e <__mdiff+0x11a>
 800e758:	6117      	str	r7, [r2, #16]
 800e75a:	e79d      	b.n	800e698 <__mdiff+0x34>
 800e75c:	f854 1b04 	ldr.w	r1, [r4], #4
 800e760:	46e6      	mov	lr, ip
 800e762:	0c08      	lsrs	r0, r1, #16
 800e764:	fa1c fc81 	uxtah	ip, ip, r1
 800e768:	4471      	add	r1, lr
 800e76a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e76e:	b289      	uxth	r1, r1
 800e770:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e774:	f846 1b04 	str.w	r1, [r6], #4
 800e778:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e77c:	e7dd      	b.n	800e73a <__mdiff+0xd6>
 800e77e:	3f01      	subs	r7, #1
 800e780:	e7e7      	b.n	800e752 <__mdiff+0xee>
 800e782:	bf00      	nop
 800e784:	080112ff 	.word	0x080112ff
 800e788:	08011310 	.word	0x08011310

0800e78c <__ulp>:
 800e78c:	b082      	sub	sp, #8
 800e78e:	ed8d 0b00 	vstr	d0, [sp]
 800e792:	9a01      	ldr	r2, [sp, #4]
 800e794:	4b0f      	ldr	r3, [pc, #60]	@ (800e7d4 <__ulp+0x48>)
 800e796:	4013      	ands	r3, r2
 800e798:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	dc08      	bgt.n	800e7b2 <__ulp+0x26>
 800e7a0:	425b      	negs	r3, r3
 800e7a2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800e7a6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e7aa:	da04      	bge.n	800e7b6 <__ulp+0x2a>
 800e7ac:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800e7b0:	4113      	asrs	r3, r2
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	e008      	b.n	800e7c8 <__ulp+0x3c>
 800e7b6:	f1a2 0314 	sub.w	r3, r2, #20
 800e7ba:	2b1e      	cmp	r3, #30
 800e7bc:	bfda      	itte	le
 800e7be:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800e7c2:	40da      	lsrle	r2, r3
 800e7c4:	2201      	movgt	r2, #1
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	4619      	mov	r1, r3
 800e7ca:	4610      	mov	r0, r2
 800e7cc:	ec41 0b10 	vmov	d0, r0, r1
 800e7d0:	b002      	add	sp, #8
 800e7d2:	4770      	bx	lr
 800e7d4:	7ff00000 	.word	0x7ff00000

0800e7d8 <__b2d>:
 800e7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7dc:	6906      	ldr	r6, [r0, #16]
 800e7de:	f100 0814 	add.w	r8, r0, #20
 800e7e2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800e7e6:	1f37      	subs	r7, r6, #4
 800e7e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e7ec:	4610      	mov	r0, r2
 800e7ee:	f7ff fd4b 	bl	800e288 <__hi0bits>
 800e7f2:	f1c0 0320 	rsb	r3, r0, #32
 800e7f6:	280a      	cmp	r0, #10
 800e7f8:	600b      	str	r3, [r1, #0]
 800e7fa:	491b      	ldr	r1, [pc, #108]	@ (800e868 <__b2d+0x90>)
 800e7fc:	dc15      	bgt.n	800e82a <__b2d+0x52>
 800e7fe:	f1c0 0c0b 	rsb	ip, r0, #11
 800e802:	fa22 f30c 	lsr.w	r3, r2, ip
 800e806:	45b8      	cmp	r8, r7
 800e808:	ea43 0501 	orr.w	r5, r3, r1
 800e80c:	bf34      	ite	cc
 800e80e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e812:	2300      	movcs	r3, #0
 800e814:	3015      	adds	r0, #21
 800e816:	fa02 f000 	lsl.w	r0, r2, r0
 800e81a:	fa23 f30c 	lsr.w	r3, r3, ip
 800e81e:	4303      	orrs	r3, r0
 800e820:	461c      	mov	r4, r3
 800e822:	ec45 4b10 	vmov	d0, r4, r5
 800e826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e82a:	45b8      	cmp	r8, r7
 800e82c:	bf3a      	itte	cc
 800e82e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800e832:	f1a6 0708 	subcc.w	r7, r6, #8
 800e836:	2300      	movcs	r3, #0
 800e838:	380b      	subs	r0, #11
 800e83a:	d012      	beq.n	800e862 <__b2d+0x8a>
 800e83c:	f1c0 0120 	rsb	r1, r0, #32
 800e840:	fa23 f401 	lsr.w	r4, r3, r1
 800e844:	4082      	lsls	r2, r0
 800e846:	4322      	orrs	r2, r4
 800e848:	4547      	cmp	r7, r8
 800e84a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800e84e:	bf8c      	ite	hi
 800e850:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800e854:	2200      	movls	r2, #0
 800e856:	4083      	lsls	r3, r0
 800e858:	40ca      	lsrs	r2, r1
 800e85a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e85e:	4313      	orrs	r3, r2
 800e860:	e7de      	b.n	800e820 <__b2d+0x48>
 800e862:	ea42 0501 	orr.w	r5, r2, r1
 800e866:	e7db      	b.n	800e820 <__b2d+0x48>
 800e868:	3ff00000 	.word	0x3ff00000

0800e86c <__d2b>:
 800e86c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e870:	460f      	mov	r7, r1
 800e872:	2101      	movs	r1, #1
 800e874:	ec59 8b10 	vmov	r8, r9, d0
 800e878:	4616      	mov	r6, r2
 800e87a:	f7ff fc13 	bl	800e0a4 <_Balloc>
 800e87e:	4604      	mov	r4, r0
 800e880:	b930      	cbnz	r0, 800e890 <__d2b+0x24>
 800e882:	4602      	mov	r2, r0
 800e884:	4b23      	ldr	r3, [pc, #140]	@ (800e914 <__d2b+0xa8>)
 800e886:	4824      	ldr	r0, [pc, #144]	@ (800e918 <__d2b+0xac>)
 800e888:	f240 310f 	movw	r1, #783	@ 0x30f
 800e88c:	f001 fd08 	bl	80102a0 <__assert_func>
 800e890:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e894:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e898:	b10d      	cbz	r5, 800e89e <__d2b+0x32>
 800e89a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e89e:	9301      	str	r3, [sp, #4]
 800e8a0:	f1b8 0300 	subs.w	r3, r8, #0
 800e8a4:	d023      	beq.n	800e8ee <__d2b+0x82>
 800e8a6:	4668      	mov	r0, sp
 800e8a8:	9300      	str	r3, [sp, #0]
 800e8aa:	f7ff fd0c 	bl	800e2c6 <__lo0bits>
 800e8ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e8b2:	b1d0      	cbz	r0, 800e8ea <__d2b+0x7e>
 800e8b4:	f1c0 0320 	rsb	r3, r0, #32
 800e8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e8bc:	430b      	orrs	r3, r1
 800e8be:	40c2      	lsrs	r2, r0
 800e8c0:	6163      	str	r3, [r4, #20]
 800e8c2:	9201      	str	r2, [sp, #4]
 800e8c4:	9b01      	ldr	r3, [sp, #4]
 800e8c6:	61a3      	str	r3, [r4, #24]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	bf0c      	ite	eq
 800e8cc:	2201      	moveq	r2, #1
 800e8ce:	2202      	movne	r2, #2
 800e8d0:	6122      	str	r2, [r4, #16]
 800e8d2:	b1a5      	cbz	r5, 800e8fe <__d2b+0x92>
 800e8d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e8d8:	4405      	add	r5, r0
 800e8da:	603d      	str	r5, [r7, #0]
 800e8dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e8e0:	6030      	str	r0, [r6, #0]
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	b003      	add	sp, #12
 800e8e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e8ea:	6161      	str	r1, [r4, #20]
 800e8ec:	e7ea      	b.n	800e8c4 <__d2b+0x58>
 800e8ee:	a801      	add	r0, sp, #4
 800e8f0:	f7ff fce9 	bl	800e2c6 <__lo0bits>
 800e8f4:	9b01      	ldr	r3, [sp, #4]
 800e8f6:	6163      	str	r3, [r4, #20]
 800e8f8:	3020      	adds	r0, #32
 800e8fa:	2201      	movs	r2, #1
 800e8fc:	e7e8      	b.n	800e8d0 <__d2b+0x64>
 800e8fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e902:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e906:	6038      	str	r0, [r7, #0]
 800e908:	6918      	ldr	r0, [r3, #16]
 800e90a:	f7ff fcbd 	bl	800e288 <__hi0bits>
 800e90e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e912:	e7e5      	b.n	800e8e0 <__d2b+0x74>
 800e914:	080112ff 	.word	0x080112ff
 800e918:	08011310 	.word	0x08011310

0800e91c <__ratio>:
 800e91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e920:	b085      	sub	sp, #20
 800e922:	e9cd 1000 	strd	r1, r0, [sp]
 800e926:	a902      	add	r1, sp, #8
 800e928:	f7ff ff56 	bl	800e7d8 <__b2d>
 800e92c:	9800      	ldr	r0, [sp, #0]
 800e92e:	a903      	add	r1, sp, #12
 800e930:	ec55 4b10 	vmov	r4, r5, d0
 800e934:	f7ff ff50 	bl	800e7d8 <__b2d>
 800e938:	9b01      	ldr	r3, [sp, #4]
 800e93a:	6919      	ldr	r1, [r3, #16]
 800e93c:	9b00      	ldr	r3, [sp, #0]
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	1ac9      	subs	r1, r1, r3
 800e942:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e946:	1a9b      	subs	r3, r3, r2
 800e948:	ec5b ab10 	vmov	sl, fp, d0
 800e94c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800e950:	2b00      	cmp	r3, #0
 800e952:	bfce      	itee	gt
 800e954:	462a      	movgt	r2, r5
 800e956:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e95a:	465a      	movle	r2, fp
 800e95c:	462f      	mov	r7, r5
 800e95e:	46d9      	mov	r9, fp
 800e960:	bfcc      	ite	gt
 800e962:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e966:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800e96a:	464b      	mov	r3, r9
 800e96c:	4652      	mov	r2, sl
 800e96e:	4620      	mov	r0, r4
 800e970:	4639      	mov	r1, r7
 800e972:	f7f1 ff73 	bl	800085c <__aeabi_ddiv>
 800e976:	ec41 0b10 	vmov	d0, r0, r1
 800e97a:	b005      	add	sp, #20
 800e97c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e980 <__copybits>:
 800e980:	3901      	subs	r1, #1
 800e982:	b570      	push	{r4, r5, r6, lr}
 800e984:	1149      	asrs	r1, r1, #5
 800e986:	6914      	ldr	r4, [r2, #16]
 800e988:	3101      	adds	r1, #1
 800e98a:	f102 0314 	add.w	r3, r2, #20
 800e98e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e992:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e996:	1f05      	subs	r5, r0, #4
 800e998:	42a3      	cmp	r3, r4
 800e99a:	d30c      	bcc.n	800e9b6 <__copybits+0x36>
 800e99c:	1aa3      	subs	r3, r4, r2
 800e99e:	3b11      	subs	r3, #17
 800e9a0:	f023 0303 	bic.w	r3, r3, #3
 800e9a4:	3211      	adds	r2, #17
 800e9a6:	42a2      	cmp	r2, r4
 800e9a8:	bf88      	it	hi
 800e9aa:	2300      	movhi	r3, #0
 800e9ac:	4418      	add	r0, r3
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	4288      	cmp	r0, r1
 800e9b2:	d305      	bcc.n	800e9c0 <__copybits+0x40>
 800e9b4:	bd70      	pop	{r4, r5, r6, pc}
 800e9b6:	f853 6b04 	ldr.w	r6, [r3], #4
 800e9ba:	f845 6f04 	str.w	r6, [r5, #4]!
 800e9be:	e7eb      	b.n	800e998 <__copybits+0x18>
 800e9c0:	f840 3b04 	str.w	r3, [r0], #4
 800e9c4:	e7f4      	b.n	800e9b0 <__copybits+0x30>

0800e9c6 <__any_on>:
 800e9c6:	f100 0214 	add.w	r2, r0, #20
 800e9ca:	6900      	ldr	r0, [r0, #16]
 800e9cc:	114b      	asrs	r3, r1, #5
 800e9ce:	4298      	cmp	r0, r3
 800e9d0:	b510      	push	{r4, lr}
 800e9d2:	db11      	blt.n	800e9f8 <__any_on+0x32>
 800e9d4:	dd0a      	ble.n	800e9ec <__any_on+0x26>
 800e9d6:	f011 011f 	ands.w	r1, r1, #31
 800e9da:	d007      	beq.n	800e9ec <__any_on+0x26>
 800e9dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e9e0:	fa24 f001 	lsr.w	r0, r4, r1
 800e9e4:	fa00 f101 	lsl.w	r1, r0, r1
 800e9e8:	428c      	cmp	r4, r1
 800e9ea:	d10b      	bne.n	800ea04 <__any_on+0x3e>
 800e9ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d803      	bhi.n	800e9fc <__any_on+0x36>
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	bd10      	pop	{r4, pc}
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	e7f7      	b.n	800e9ec <__any_on+0x26>
 800e9fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ea00:	2900      	cmp	r1, #0
 800ea02:	d0f5      	beq.n	800e9f0 <__any_on+0x2a>
 800ea04:	2001      	movs	r0, #1
 800ea06:	e7f6      	b.n	800e9f6 <__any_on+0x30>

0800ea08 <sulp>:
 800ea08:	b570      	push	{r4, r5, r6, lr}
 800ea0a:	4604      	mov	r4, r0
 800ea0c:	460d      	mov	r5, r1
 800ea0e:	ec45 4b10 	vmov	d0, r4, r5
 800ea12:	4616      	mov	r6, r2
 800ea14:	f7ff feba 	bl	800e78c <__ulp>
 800ea18:	ec51 0b10 	vmov	r0, r1, d0
 800ea1c:	b17e      	cbz	r6, 800ea3e <sulp+0x36>
 800ea1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ea22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	dd09      	ble.n	800ea3e <sulp+0x36>
 800ea2a:	051b      	lsls	r3, r3, #20
 800ea2c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ea30:	2400      	movs	r4, #0
 800ea32:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ea36:	4622      	mov	r2, r4
 800ea38:	462b      	mov	r3, r5
 800ea3a:	f7f1 fde5 	bl	8000608 <__aeabi_dmul>
 800ea3e:	ec41 0b10 	vmov	d0, r0, r1
 800ea42:	bd70      	pop	{r4, r5, r6, pc}
 800ea44:	0000      	movs	r0, r0
	...

0800ea48 <_strtod_l>:
 800ea48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea4c:	b09f      	sub	sp, #124	@ 0x7c
 800ea4e:	460c      	mov	r4, r1
 800ea50:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ea52:	2200      	movs	r2, #0
 800ea54:	921a      	str	r2, [sp, #104]	@ 0x68
 800ea56:	9005      	str	r0, [sp, #20]
 800ea58:	f04f 0a00 	mov.w	sl, #0
 800ea5c:	f04f 0b00 	mov.w	fp, #0
 800ea60:	460a      	mov	r2, r1
 800ea62:	9219      	str	r2, [sp, #100]	@ 0x64
 800ea64:	7811      	ldrb	r1, [r2, #0]
 800ea66:	292b      	cmp	r1, #43	@ 0x2b
 800ea68:	d04a      	beq.n	800eb00 <_strtod_l+0xb8>
 800ea6a:	d838      	bhi.n	800eade <_strtod_l+0x96>
 800ea6c:	290d      	cmp	r1, #13
 800ea6e:	d832      	bhi.n	800ead6 <_strtod_l+0x8e>
 800ea70:	2908      	cmp	r1, #8
 800ea72:	d832      	bhi.n	800eada <_strtod_l+0x92>
 800ea74:	2900      	cmp	r1, #0
 800ea76:	d03b      	beq.n	800eaf0 <_strtod_l+0xa8>
 800ea78:	2200      	movs	r2, #0
 800ea7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ea7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ea7e:	782a      	ldrb	r2, [r5, #0]
 800ea80:	2a30      	cmp	r2, #48	@ 0x30
 800ea82:	f040 80b3 	bne.w	800ebec <_strtod_l+0x1a4>
 800ea86:	786a      	ldrb	r2, [r5, #1]
 800ea88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ea8c:	2a58      	cmp	r2, #88	@ 0x58
 800ea8e:	d16e      	bne.n	800eb6e <_strtod_l+0x126>
 800ea90:	9302      	str	r3, [sp, #8]
 800ea92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea94:	9301      	str	r3, [sp, #4]
 800ea96:	ab1a      	add	r3, sp, #104	@ 0x68
 800ea98:	9300      	str	r3, [sp, #0]
 800ea9a:	4a8e      	ldr	r2, [pc, #568]	@ (800ecd4 <_strtod_l+0x28c>)
 800ea9c:	9805      	ldr	r0, [sp, #20]
 800ea9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800eaa0:	a919      	add	r1, sp, #100	@ 0x64
 800eaa2:	f001 fc97 	bl	80103d4 <__gethex>
 800eaa6:	f010 060f 	ands.w	r6, r0, #15
 800eaaa:	4604      	mov	r4, r0
 800eaac:	d005      	beq.n	800eaba <_strtod_l+0x72>
 800eaae:	2e06      	cmp	r6, #6
 800eab0:	d128      	bne.n	800eb04 <_strtod_l+0xbc>
 800eab2:	3501      	adds	r5, #1
 800eab4:	2300      	movs	r3, #0
 800eab6:	9519      	str	r5, [sp, #100]	@ 0x64
 800eab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eaba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f040 858e 	bne.w	800f5de <_strtod_l+0xb96>
 800eac2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eac4:	b1cb      	cbz	r3, 800eafa <_strtod_l+0xb2>
 800eac6:	4652      	mov	r2, sl
 800eac8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800eacc:	ec43 2b10 	vmov	d0, r2, r3
 800ead0:	b01f      	add	sp, #124	@ 0x7c
 800ead2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ead6:	2920      	cmp	r1, #32
 800ead8:	d1ce      	bne.n	800ea78 <_strtod_l+0x30>
 800eada:	3201      	adds	r2, #1
 800eadc:	e7c1      	b.n	800ea62 <_strtod_l+0x1a>
 800eade:	292d      	cmp	r1, #45	@ 0x2d
 800eae0:	d1ca      	bne.n	800ea78 <_strtod_l+0x30>
 800eae2:	2101      	movs	r1, #1
 800eae4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800eae6:	1c51      	adds	r1, r2, #1
 800eae8:	9119      	str	r1, [sp, #100]	@ 0x64
 800eaea:	7852      	ldrb	r2, [r2, #1]
 800eaec:	2a00      	cmp	r2, #0
 800eaee:	d1c5      	bne.n	800ea7c <_strtod_l+0x34>
 800eaf0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800eaf2:	9419      	str	r4, [sp, #100]	@ 0x64
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f040 8570 	bne.w	800f5da <_strtod_l+0xb92>
 800eafa:	4652      	mov	r2, sl
 800eafc:	465b      	mov	r3, fp
 800eafe:	e7e5      	b.n	800eacc <_strtod_l+0x84>
 800eb00:	2100      	movs	r1, #0
 800eb02:	e7ef      	b.n	800eae4 <_strtod_l+0x9c>
 800eb04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800eb06:	b13a      	cbz	r2, 800eb18 <_strtod_l+0xd0>
 800eb08:	2135      	movs	r1, #53	@ 0x35
 800eb0a:	a81c      	add	r0, sp, #112	@ 0x70
 800eb0c:	f7ff ff38 	bl	800e980 <__copybits>
 800eb10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb12:	9805      	ldr	r0, [sp, #20]
 800eb14:	f7ff fb06 	bl	800e124 <_Bfree>
 800eb18:	3e01      	subs	r6, #1
 800eb1a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800eb1c:	2e04      	cmp	r6, #4
 800eb1e:	d806      	bhi.n	800eb2e <_strtod_l+0xe6>
 800eb20:	e8df f006 	tbb	[pc, r6]
 800eb24:	201d0314 	.word	0x201d0314
 800eb28:	14          	.byte	0x14
 800eb29:	00          	.byte	0x00
 800eb2a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800eb2e:	05e1      	lsls	r1, r4, #23
 800eb30:	bf48      	it	mi
 800eb32:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800eb36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eb3a:	0d1b      	lsrs	r3, r3, #20
 800eb3c:	051b      	lsls	r3, r3, #20
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d1bb      	bne.n	800eaba <_strtod_l+0x72>
 800eb42:	f7fe fbd7 	bl	800d2f4 <__errno>
 800eb46:	2322      	movs	r3, #34	@ 0x22
 800eb48:	6003      	str	r3, [r0, #0]
 800eb4a:	e7b6      	b.n	800eaba <_strtod_l+0x72>
 800eb4c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800eb50:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800eb54:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800eb58:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800eb5c:	e7e7      	b.n	800eb2e <_strtod_l+0xe6>
 800eb5e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ecdc <_strtod_l+0x294>
 800eb62:	e7e4      	b.n	800eb2e <_strtod_l+0xe6>
 800eb64:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800eb68:	f04f 3aff 	mov.w	sl, #4294967295
 800eb6c:	e7df      	b.n	800eb2e <_strtod_l+0xe6>
 800eb6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb70:	1c5a      	adds	r2, r3, #1
 800eb72:	9219      	str	r2, [sp, #100]	@ 0x64
 800eb74:	785b      	ldrb	r3, [r3, #1]
 800eb76:	2b30      	cmp	r3, #48	@ 0x30
 800eb78:	d0f9      	beq.n	800eb6e <_strtod_l+0x126>
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d09d      	beq.n	800eaba <_strtod_l+0x72>
 800eb7e:	2301      	movs	r3, #1
 800eb80:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800eb84:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb86:	2300      	movs	r3, #0
 800eb88:	9308      	str	r3, [sp, #32]
 800eb8a:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb8c:	461f      	mov	r7, r3
 800eb8e:	220a      	movs	r2, #10
 800eb90:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800eb92:	7805      	ldrb	r5, [r0, #0]
 800eb94:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800eb98:	b2d9      	uxtb	r1, r3
 800eb9a:	2909      	cmp	r1, #9
 800eb9c:	d928      	bls.n	800ebf0 <_strtod_l+0x1a8>
 800eb9e:	494e      	ldr	r1, [pc, #312]	@ (800ecd8 <_strtod_l+0x290>)
 800eba0:	2201      	movs	r2, #1
 800eba2:	f001 fb62 	bl	801026a <strncmp>
 800eba6:	2800      	cmp	r0, #0
 800eba8:	d032      	beq.n	800ec10 <_strtod_l+0x1c8>
 800ebaa:	2000      	movs	r0, #0
 800ebac:	462a      	mov	r2, r5
 800ebae:	4681      	mov	r9, r0
 800ebb0:	463d      	mov	r5, r7
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2a65      	cmp	r2, #101	@ 0x65
 800ebb6:	d001      	beq.n	800ebbc <_strtod_l+0x174>
 800ebb8:	2a45      	cmp	r2, #69	@ 0x45
 800ebba:	d114      	bne.n	800ebe6 <_strtod_l+0x19e>
 800ebbc:	b91d      	cbnz	r5, 800ebc6 <_strtod_l+0x17e>
 800ebbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ebc0:	4302      	orrs	r2, r0
 800ebc2:	d095      	beq.n	800eaf0 <_strtod_l+0xa8>
 800ebc4:	2500      	movs	r5, #0
 800ebc6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800ebc8:	1c62      	adds	r2, r4, #1
 800ebca:	9219      	str	r2, [sp, #100]	@ 0x64
 800ebcc:	7862      	ldrb	r2, [r4, #1]
 800ebce:	2a2b      	cmp	r2, #43	@ 0x2b
 800ebd0:	d077      	beq.n	800ecc2 <_strtod_l+0x27a>
 800ebd2:	2a2d      	cmp	r2, #45	@ 0x2d
 800ebd4:	d07b      	beq.n	800ecce <_strtod_l+0x286>
 800ebd6:	f04f 0c00 	mov.w	ip, #0
 800ebda:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800ebde:	2909      	cmp	r1, #9
 800ebe0:	f240 8082 	bls.w	800ece8 <_strtod_l+0x2a0>
 800ebe4:	9419      	str	r4, [sp, #100]	@ 0x64
 800ebe6:	f04f 0800 	mov.w	r8, #0
 800ebea:	e0a2      	b.n	800ed32 <_strtod_l+0x2ea>
 800ebec:	2300      	movs	r3, #0
 800ebee:	e7c7      	b.n	800eb80 <_strtod_l+0x138>
 800ebf0:	2f08      	cmp	r7, #8
 800ebf2:	bfd5      	itete	le
 800ebf4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800ebf6:	9908      	ldrgt	r1, [sp, #32]
 800ebf8:	fb02 3301 	mlale	r3, r2, r1, r3
 800ebfc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800ec00:	f100 0001 	add.w	r0, r0, #1
 800ec04:	bfd4      	ite	le
 800ec06:	930a      	strle	r3, [sp, #40]	@ 0x28
 800ec08:	9308      	strgt	r3, [sp, #32]
 800ec0a:	3701      	adds	r7, #1
 800ec0c:	9019      	str	r0, [sp, #100]	@ 0x64
 800ec0e:	e7bf      	b.n	800eb90 <_strtod_l+0x148>
 800ec10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec12:	1c5a      	adds	r2, r3, #1
 800ec14:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec16:	785a      	ldrb	r2, [r3, #1]
 800ec18:	b37f      	cbz	r7, 800ec7a <_strtod_l+0x232>
 800ec1a:	4681      	mov	r9, r0
 800ec1c:	463d      	mov	r5, r7
 800ec1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ec22:	2b09      	cmp	r3, #9
 800ec24:	d912      	bls.n	800ec4c <_strtod_l+0x204>
 800ec26:	2301      	movs	r3, #1
 800ec28:	e7c4      	b.n	800ebb4 <_strtod_l+0x16c>
 800ec2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec2c:	1c5a      	adds	r2, r3, #1
 800ec2e:	9219      	str	r2, [sp, #100]	@ 0x64
 800ec30:	785a      	ldrb	r2, [r3, #1]
 800ec32:	3001      	adds	r0, #1
 800ec34:	2a30      	cmp	r2, #48	@ 0x30
 800ec36:	d0f8      	beq.n	800ec2a <_strtod_l+0x1e2>
 800ec38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ec3c:	2b08      	cmp	r3, #8
 800ec3e:	f200 84d3 	bhi.w	800f5e8 <_strtod_l+0xba0>
 800ec42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ec44:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec46:	4681      	mov	r9, r0
 800ec48:	2000      	movs	r0, #0
 800ec4a:	4605      	mov	r5, r0
 800ec4c:	3a30      	subs	r2, #48	@ 0x30
 800ec4e:	f100 0301 	add.w	r3, r0, #1
 800ec52:	d02a      	beq.n	800ecaa <_strtod_l+0x262>
 800ec54:	4499      	add	r9, r3
 800ec56:	eb00 0c05 	add.w	ip, r0, r5
 800ec5a:	462b      	mov	r3, r5
 800ec5c:	210a      	movs	r1, #10
 800ec5e:	4563      	cmp	r3, ip
 800ec60:	d10d      	bne.n	800ec7e <_strtod_l+0x236>
 800ec62:	1c69      	adds	r1, r5, #1
 800ec64:	4401      	add	r1, r0
 800ec66:	4428      	add	r0, r5
 800ec68:	2808      	cmp	r0, #8
 800ec6a:	dc16      	bgt.n	800ec9a <_strtod_l+0x252>
 800ec6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ec6e:	230a      	movs	r3, #10
 800ec70:	fb03 2300 	mla	r3, r3, r0, r2
 800ec74:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec76:	2300      	movs	r3, #0
 800ec78:	e018      	b.n	800ecac <_strtod_l+0x264>
 800ec7a:	4638      	mov	r0, r7
 800ec7c:	e7da      	b.n	800ec34 <_strtod_l+0x1ec>
 800ec7e:	2b08      	cmp	r3, #8
 800ec80:	f103 0301 	add.w	r3, r3, #1
 800ec84:	dc03      	bgt.n	800ec8e <_strtod_l+0x246>
 800ec86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ec88:	434e      	muls	r6, r1
 800ec8a:	960a      	str	r6, [sp, #40]	@ 0x28
 800ec8c:	e7e7      	b.n	800ec5e <_strtod_l+0x216>
 800ec8e:	2b10      	cmp	r3, #16
 800ec90:	bfde      	ittt	le
 800ec92:	9e08      	ldrle	r6, [sp, #32]
 800ec94:	434e      	mulle	r6, r1
 800ec96:	9608      	strle	r6, [sp, #32]
 800ec98:	e7e1      	b.n	800ec5e <_strtod_l+0x216>
 800ec9a:	280f      	cmp	r0, #15
 800ec9c:	dceb      	bgt.n	800ec76 <_strtod_l+0x22e>
 800ec9e:	9808      	ldr	r0, [sp, #32]
 800eca0:	230a      	movs	r3, #10
 800eca2:	fb03 2300 	mla	r3, r3, r0, r2
 800eca6:	9308      	str	r3, [sp, #32]
 800eca8:	e7e5      	b.n	800ec76 <_strtod_l+0x22e>
 800ecaa:	4629      	mov	r1, r5
 800ecac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ecae:	1c50      	adds	r0, r2, #1
 800ecb0:	9019      	str	r0, [sp, #100]	@ 0x64
 800ecb2:	7852      	ldrb	r2, [r2, #1]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	e7b1      	b.n	800ec1e <_strtod_l+0x1d6>
 800ecba:	f04f 0900 	mov.w	r9, #0
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	e77d      	b.n	800ebbe <_strtod_l+0x176>
 800ecc2:	f04f 0c00 	mov.w	ip, #0
 800ecc6:	1ca2      	adds	r2, r4, #2
 800ecc8:	9219      	str	r2, [sp, #100]	@ 0x64
 800ecca:	78a2      	ldrb	r2, [r4, #2]
 800eccc:	e785      	b.n	800ebda <_strtod_l+0x192>
 800ecce:	f04f 0c01 	mov.w	ip, #1
 800ecd2:	e7f8      	b.n	800ecc6 <_strtod_l+0x27e>
 800ecd4:	08011480 	.word	0x08011480
 800ecd8:	08011468 	.word	0x08011468
 800ecdc:	7ff00000 	.word	0x7ff00000
 800ece0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ece2:	1c51      	adds	r1, r2, #1
 800ece4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ece6:	7852      	ldrb	r2, [r2, #1]
 800ece8:	2a30      	cmp	r2, #48	@ 0x30
 800ecea:	d0f9      	beq.n	800ece0 <_strtod_l+0x298>
 800ecec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ecf0:	2908      	cmp	r1, #8
 800ecf2:	f63f af78 	bhi.w	800ebe6 <_strtod_l+0x19e>
 800ecf6:	3a30      	subs	r2, #48	@ 0x30
 800ecf8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ecfa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ecfc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ecfe:	f04f 080a 	mov.w	r8, #10
 800ed02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ed04:	1c56      	adds	r6, r2, #1
 800ed06:	9619      	str	r6, [sp, #100]	@ 0x64
 800ed08:	7852      	ldrb	r2, [r2, #1]
 800ed0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ed0e:	f1be 0f09 	cmp.w	lr, #9
 800ed12:	d939      	bls.n	800ed88 <_strtod_l+0x340>
 800ed14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ed16:	1a76      	subs	r6, r6, r1
 800ed18:	2e08      	cmp	r6, #8
 800ed1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ed1e:	dc03      	bgt.n	800ed28 <_strtod_l+0x2e0>
 800ed20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ed22:	4588      	cmp	r8, r1
 800ed24:	bfa8      	it	ge
 800ed26:	4688      	movge	r8, r1
 800ed28:	f1bc 0f00 	cmp.w	ip, #0
 800ed2c:	d001      	beq.n	800ed32 <_strtod_l+0x2ea>
 800ed2e:	f1c8 0800 	rsb	r8, r8, #0
 800ed32:	2d00      	cmp	r5, #0
 800ed34:	d14e      	bne.n	800edd4 <_strtod_l+0x38c>
 800ed36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ed38:	4308      	orrs	r0, r1
 800ed3a:	f47f aebe 	bne.w	800eaba <_strtod_l+0x72>
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f47f aed6 	bne.w	800eaf0 <_strtod_l+0xa8>
 800ed44:	2a69      	cmp	r2, #105	@ 0x69
 800ed46:	d028      	beq.n	800ed9a <_strtod_l+0x352>
 800ed48:	dc25      	bgt.n	800ed96 <_strtod_l+0x34e>
 800ed4a:	2a49      	cmp	r2, #73	@ 0x49
 800ed4c:	d025      	beq.n	800ed9a <_strtod_l+0x352>
 800ed4e:	2a4e      	cmp	r2, #78	@ 0x4e
 800ed50:	f47f aece 	bne.w	800eaf0 <_strtod_l+0xa8>
 800ed54:	499b      	ldr	r1, [pc, #620]	@ (800efc4 <_strtod_l+0x57c>)
 800ed56:	a819      	add	r0, sp, #100	@ 0x64
 800ed58:	f001 fd5e 	bl	8010818 <__match>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	f43f aec7 	beq.w	800eaf0 <_strtod_l+0xa8>
 800ed62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	2b28      	cmp	r3, #40	@ 0x28
 800ed68:	d12e      	bne.n	800edc8 <_strtod_l+0x380>
 800ed6a:	4997      	ldr	r1, [pc, #604]	@ (800efc8 <_strtod_l+0x580>)
 800ed6c:	aa1c      	add	r2, sp, #112	@ 0x70
 800ed6e:	a819      	add	r0, sp, #100	@ 0x64
 800ed70:	f001 fd66 	bl	8010840 <__hexnan>
 800ed74:	2805      	cmp	r0, #5
 800ed76:	d127      	bne.n	800edc8 <_strtod_l+0x380>
 800ed78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ed7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ed7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ed82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ed86:	e698      	b.n	800eaba <_strtod_l+0x72>
 800ed88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ed8a:	fb08 2101 	mla	r1, r8, r1, r2
 800ed8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ed92:	920e      	str	r2, [sp, #56]	@ 0x38
 800ed94:	e7b5      	b.n	800ed02 <_strtod_l+0x2ba>
 800ed96:	2a6e      	cmp	r2, #110	@ 0x6e
 800ed98:	e7da      	b.n	800ed50 <_strtod_l+0x308>
 800ed9a:	498c      	ldr	r1, [pc, #560]	@ (800efcc <_strtod_l+0x584>)
 800ed9c:	a819      	add	r0, sp, #100	@ 0x64
 800ed9e:	f001 fd3b 	bl	8010818 <__match>
 800eda2:	2800      	cmp	r0, #0
 800eda4:	f43f aea4 	beq.w	800eaf0 <_strtod_l+0xa8>
 800eda8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edaa:	4989      	ldr	r1, [pc, #548]	@ (800efd0 <_strtod_l+0x588>)
 800edac:	3b01      	subs	r3, #1
 800edae:	a819      	add	r0, sp, #100	@ 0x64
 800edb0:	9319      	str	r3, [sp, #100]	@ 0x64
 800edb2:	f001 fd31 	bl	8010818 <__match>
 800edb6:	b910      	cbnz	r0, 800edbe <_strtod_l+0x376>
 800edb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800edba:	3301      	adds	r3, #1
 800edbc:	9319      	str	r3, [sp, #100]	@ 0x64
 800edbe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800efe0 <_strtod_l+0x598>
 800edc2:	f04f 0a00 	mov.w	sl, #0
 800edc6:	e678      	b.n	800eaba <_strtod_l+0x72>
 800edc8:	4882      	ldr	r0, [pc, #520]	@ (800efd4 <_strtod_l+0x58c>)
 800edca:	f001 fa61 	bl	8010290 <nan>
 800edce:	ec5b ab10 	vmov	sl, fp, d0
 800edd2:	e672      	b.n	800eaba <_strtod_l+0x72>
 800edd4:	eba8 0309 	sub.w	r3, r8, r9
 800edd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800edda:	9309      	str	r3, [sp, #36]	@ 0x24
 800eddc:	2f00      	cmp	r7, #0
 800edde:	bf08      	it	eq
 800ede0:	462f      	moveq	r7, r5
 800ede2:	2d10      	cmp	r5, #16
 800ede4:	462c      	mov	r4, r5
 800ede6:	bfa8      	it	ge
 800ede8:	2410      	movge	r4, #16
 800edea:	f7f1 fb93 	bl	8000514 <__aeabi_ui2d>
 800edee:	2d09      	cmp	r5, #9
 800edf0:	4682      	mov	sl, r0
 800edf2:	468b      	mov	fp, r1
 800edf4:	dc13      	bgt.n	800ee1e <_strtod_l+0x3d6>
 800edf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	f43f ae5e 	beq.w	800eaba <_strtod_l+0x72>
 800edfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee00:	dd78      	ble.n	800eef4 <_strtod_l+0x4ac>
 800ee02:	2b16      	cmp	r3, #22
 800ee04:	dc5f      	bgt.n	800eec6 <_strtod_l+0x47e>
 800ee06:	4974      	ldr	r1, [pc, #464]	@ (800efd8 <_strtod_l+0x590>)
 800ee08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ee0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee10:	4652      	mov	r2, sl
 800ee12:	465b      	mov	r3, fp
 800ee14:	f7f1 fbf8 	bl	8000608 <__aeabi_dmul>
 800ee18:	4682      	mov	sl, r0
 800ee1a:	468b      	mov	fp, r1
 800ee1c:	e64d      	b.n	800eaba <_strtod_l+0x72>
 800ee1e:	4b6e      	ldr	r3, [pc, #440]	@ (800efd8 <_strtod_l+0x590>)
 800ee20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800ee28:	f7f1 fbee 	bl	8000608 <__aeabi_dmul>
 800ee2c:	4682      	mov	sl, r0
 800ee2e:	9808      	ldr	r0, [sp, #32]
 800ee30:	468b      	mov	fp, r1
 800ee32:	f7f1 fb6f 	bl	8000514 <__aeabi_ui2d>
 800ee36:	4602      	mov	r2, r0
 800ee38:	460b      	mov	r3, r1
 800ee3a:	4650      	mov	r0, sl
 800ee3c:	4659      	mov	r1, fp
 800ee3e:	f7f1 fa2d 	bl	800029c <__adddf3>
 800ee42:	2d0f      	cmp	r5, #15
 800ee44:	4682      	mov	sl, r0
 800ee46:	468b      	mov	fp, r1
 800ee48:	ddd5      	ble.n	800edf6 <_strtod_l+0x3ae>
 800ee4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee4c:	1b2c      	subs	r4, r5, r4
 800ee4e:	441c      	add	r4, r3
 800ee50:	2c00      	cmp	r4, #0
 800ee52:	f340 8096 	ble.w	800ef82 <_strtod_l+0x53a>
 800ee56:	f014 030f 	ands.w	r3, r4, #15
 800ee5a:	d00a      	beq.n	800ee72 <_strtod_l+0x42a>
 800ee5c:	495e      	ldr	r1, [pc, #376]	@ (800efd8 <_strtod_l+0x590>)
 800ee5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ee62:	4652      	mov	r2, sl
 800ee64:	465b      	mov	r3, fp
 800ee66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee6a:	f7f1 fbcd 	bl	8000608 <__aeabi_dmul>
 800ee6e:	4682      	mov	sl, r0
 800ee70:	468b      	mov	fp, r1
 800ee72:	f034 040f 	bics.w	r4, r4, #15
 800ee76:	d073      	beq.n	800ef60 <_strtod_l+0x518>
 800ee78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ee7c:	dd48      	ble.n	800ef10 <_strtod_l+0x4c8>
 800ee7e:	2400      	movs	r4, #0
 800ee80:	46a0      	mov	r8, r4
 800ee82:	940a      	str	r4, [sp, #40]	@ 0x28
 800ee84:	46a1      	mov	r9, r4
 800ee86:	9a05      	ldr	r2, [sp, #20]
 800ee88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800efe0 <_strtod_l+0x598>
 800ee8c:	2322      	movs	r3, #34	@ 0x22
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	f04f 0a00 	mov.w	sl, #0
 800ee94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f43f ae0f 	beq.w	800eaba <_strtod_l+0x72>
 800ee9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee9e:	9805      	ldr	r0, [sp, #20]
 800eea0:	f7ff f940 	bl	800e124 <_Bfree>
 800eea4:	9805      	ldr	r0, [sp, #20]
 800eea6:	4649      	mov	r1, r9
 800eea8:	f7ff f93c 	bl	800e124 <_Bfree>
 800eeac:	9805      	ldr	r0, [sp, #20]
 800eeae:	4641      	mov	r1, r8
 800eeb0:	f7ff f938 	bl	800e124 <_Bfree>
 800eeb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eeb6:	9805      	ldr	r0, [sp, #20]
 800eeb8:	f7ff f934 	bl	800e124 <_Bfree>
 800eebc:	9805      	ldr	r0, [sp, #20]
 800eebe:	4621      	mov	r1, r4
 800eec0:	f7ff f930 	bl	800e124 <_Bfree>
 800eec4:	e5f9      	b.n	800eaba <_strtod_l+0x72>
 800eec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eec8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800eecc:	4293      	cmp	r3, r2
 800eece:	dbbc      	blt.n	800ee4a <_strtod_l+0x402>
 800eed0:	4c41      	ldr	r4, [pc, #260]	@ (800efd8 <_strtod_l+0x590>)
 800eed2:	f1c5 050f 	rsb	r5, r5, #15
 800eed6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eeda:	4652      	mov	r2, sl
 800eedc:	465b      	mov	r3, fp
 800eede:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eee2:	f7f1 fb91 	bl	8000608 <__aeabi_dmul>
 800eee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eee8:	1b5d      	subs	r5, r3, r5
 800eeea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800eeee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eef2:	e78f      	b.n	800ee14 <_strtod_l+0x3cc>
 800eef4:	3316      	adds	r3, #22
 800eef6:	dba8      	blt.n	800ee4a <_strtod_l+0x402>
 800eef8:	4b37      	ldr	r3, [pc, #220]	@ (800efd8 <_strtod_l+0x590>)
 800eefa:	eba9 0808 	sub.w	r8, r9, r8
 800eefe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ef02:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ef06:	4650      	mov	r0, sl
 800ef08:	4659      	mov	r1, fp
 800ef0a:	f7f1 fca7 	bl	800085c <__aeabi_ddiv>
 800ef0e:	e783      	b.n	800ee18 <_strtod_l+0x3d0>
 800ef10:	4b32      	ldr	r3, [pc, #200]	@ (800efdc <_strtod_l+0x594>)
 800ef12:	9308      	str	r3, [sp, #32]
 800ef14:	2300      	movs	r3, #0
 800ef16:	1124      	asrs	r4, r4, #4
 800ef18:	4650      	mov	r0, sl
 800ef1a:	4659      	mov	r1, fp
 800ef1c:	461e      	mov	r6, r3
 800ef1e:	2c01      	cmp	r4, #1
 800ef20:	dc21      	bgt.n	800ef66 <_strtod_l+0x51e>
 800ef22:	b10b      	cbz	r3, 800ef28 <_strtod_l+0x4e0>
 800ef24:	4682      	mov	sl, r0
 800ef26:	468b      	mov	fp, r1
 800ef28:	492c      	ldr	r1, [pc, #176]	@ (800efdc <_strtod_l+0x594>)
 800ef2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ef2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ef32:	4652      	mov	r2, sl
 800ef34:	465b      	mov	r3, fp
 800ef36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef3a:	f7f1 fb65 	bl	8000608 <__aeabi_dmul>
 800ef3e:	4b28      	ldr	r3, [pc, #160]	@ (800efe0 <_strtod_l+0x598>)
 800ef40:	460a      	mov	r2, r1
 800ef42:	400b      	ands	r3, r1
 800ef44:	4927      	ldr	r1, [pc, #156]	@ (800efe4 <_strtod_l+0x59c>)
 800ef46:	428b      	cmp	r3, r1
 800ef48:	4682      	mov	sl, r0
 800ef4a:	d898      	bhi.n	800ee7e <_strtod_l+0x436>
 800ef4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ef50:	428b      	cmp	r3, r1
 800ef52:	bf86      	itte	hi
 800ef54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800efe8 <_strtod_l+0x5a0>
 800ef58:	f04f 3aff 	movhi.w	sl, #4294967295
 800ef5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ef60:	2300      	movs	r3, #0
 800ef62:	9308      	str	r3, [sp, #32]
 800ef64:	e07a      	b.n	800f05c <_strtod_l+0x614>
 800ef66:	07e2      	lsls	r2, r4, #31
 800ef68:	d505      	bpl.n	800ef76 <_strtod_l+0x52e>
 800ef6a:	9b08      	ldr	r3, [sp, #32]
 800ef6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef70:	f7f1 fb4a 	bl	8000608 <__aeabi_dmul>
 800ef74:	2301      	movs	r3, #1
 800ef76:	9a08      	ldr	r2, [sp, #32]
 800ef78:	3208      	adds	r2, #8
 800ef7a:	3601      	adds	r6, #1
 800ef7c:	1064      	asrs	r4, r4, #1
 800ef7e:	9208      	str	r2, [sp, #32]
 800ef80:	e7cd      	b.n	800ef1e <_strtod_l+0x4d6>
 800ef82:	d0ed      	beq.n	800ef60 <_strtod_l+0x518>
 800ef84:	4264      	negs	r4, r4
 800ef86:	f014 020f 	ands.w	r2, r4, #15
 800ef8a:	d00a      	beq.n	800efa2 <_strtod_l+0x55a>
 800ef8c:	4b12      	ldr	r3, [pc, #72]	@ (800efd8 <_strtod_l+0x590>)
 800ef8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef92:	4650      	mov	r0, sl
 800ef94:	4659      	mov	r1, fp
 800ef96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9a:	f7f1 fc5f 	bl	800085c <__aeabi_ddiv>
 800ef9e:	4682      	mov	sl, r0
 800efa0:	468b      	mov	fp, r1
 800efa2:	1124      	asrs	r4, r4, #4
 800efa4:	d0dc      	beq.n	800ef60 <_strtod_l+0x518>
 800efa6:	2c1f      	cmp	r4, #31
 800efa8:	dd20      	ble.n	800efec <_strtod_l+0x5a4>
 800efaa:	2400      	movs	r4, #0
 800efac:	46a0      	mov	r8, r4
 800efae:	940a      	str	r4, [sp, #40]	@ 0x28
 800efb0:	46a1      	mov	r9, r4
 800efb2:	9a05      	ldr	r2, [sp, #20]
 800efb4:	2322      	movs	r3, #34	@ 0x22
 800efb6:	f04f 0a00 	mov.w	sl, #0
 800efba:	f04f 0b00 	mov.w	fp, #0
 800efbe:	6013      	str	r3, [r2, #0]
 800efc0:	e768      	b.n	800ee94 <_strtod_l+0x44c>
 800efc2:	bf00      	nop
 800efc4:	08011259 	.word	0x08011259
 800efc8:	0801146c 	.word	0x0801146c
 800efcc:	08011251 	.word	0x08011251
 800efd0:	08011286 	.word	0x08011286
 800efd4:	08011630 	.word	0x08011630
 800efd8:	080113a0 	.word	0x080113a0
 800efdc:	08011378 	.word	0x08011378
 800efe0:	7ff00000 	.word	0x7ff00000
 800efe4:	7ca00000 	.word	0x7ca00000
 800efe8:	7fefffff 	.word	0x7fefffff
 800efec:	f014 0310 	ands.w	r3, r4, #16
 800eff0:	bf18      	it	ne
 800eff2:	236a      	movne	r3, #106	@ 0x6a
 800eff4:	4ea9      	ldr	r6, [pc, #676]	@ (800f29c <_strtod_l+0x854>)
 800eff6:	9308      	str	r3, [sp, #32]
 800eff8:	4650      	mov	r0, sl
 800effa:	4659      	mov	r1, fp
 800effc:	2300      	movs	r3, #0
 800effe:	07e2      	lsls	r2, r4, #31
 800f000:	d504      	bpl.n	800f00c <_strtod_l+0x5c4>
 800f002:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f006:	f7f1 faff 	bl	8000608 <__aeabi_dmul>
 800f00a:	2301      	movs	r3, #1
 800f00c:	1064      	asrs	r4, r4, #1
 800f00e:	f106 0608 	add.w	r6, r6, #8
 800f012:	d1f4      	bne.n	800effe <_strtod_l+0x5b6>
 800f014:	b10b      	cbz	r3, 800f01a <_strtod_l+0x5d2>
 800f016:	4682      	mov	sl, r0
 800f018:	468b      	mov	fp, r1
 800f01a:	9b08      	ldr	r3, [sp, #32]
 800f01c:	b1b3      	cbz	r3, 800f04c <_strtod_l+0x604>
 800f01e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f022:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800f026:	2b00      	cmp	r3, #0
 800f028:	4659      	mov	r1, fp
 800f02a:	dd0f      	ble.n	800f04c <_strtod_l+0x604>
 800f02c:	2b1f      	cmp	r3, #31
 800f02e:	dd55      	ble.n	800f0dc <_strtod_l+0x694>
 800f030:	2b34      	cmp	r3, #52	@ 0x34
 800f032:	bfde      	ittt	le
 800f034:	f04f 33ff 	movle.w	r3, #4294967295
 800f038:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800f03c:	4093      	lslle	r3, r2
 800f03e:	f04f 0a00 	mov.w	sl, #0
 800f042:	bfcc      	ite	gt
 800f044:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800f048:	ea03 0b01 	andle.w	fp, r3, r1
 800f04c:	2200      	movs	r2, #0
 800f04e:	2300      	movs	r3, #0
 800f050:	4650      	mov	r0, sl
 800f052:	4659      	mov	r1, fp
 800f054:	f7f1 fd40 	bl	8000ad8 <__aeabi_dcmpeq>
 800f058:	2800      	cmp	r0, #0
 800f05a:	d1a6      	bne.n	800efaa <_strtod_l+0x562>
 800f05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800f062:	9805      	ldr	r0, [sp, #20]
 800f064:	462b      	mov	r3, r5
 800f066:	463a      	mov	r2, r7
 800f068:	f7ff f8c4 	bl	800e1f4 <__s2b>
 800f06c:	900a      	str	r0, [sp, #40]	@ 0x28
 800f06e:	2800      	cmp	r0, #0
 800f070:	f43f af05 	beq.w	800ee7e <_strtod_l+0x436>
 800f074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f076:	2a00      	cmp	r2, #0
 800f078:	eba9 0308 	sub.w	r3, r9, r8
 800f07c:	bfa8      	it	ge
 800f07e:	2300      	movge	r3, #0
 800f080:	9312      	str	r3, [sp, #72]	@ 0x48
 800f082:	2400      	movs	r4, #0
 800f084:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f088:	9316      	str	r3, [sp, #88]	@ 0x58
 800f08a:	46a0      	mov	r8, r4
 800f08c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f08e:	9805      	ldr	r0, [sp, #20]
 800f090:	6859      	ldr	r1, [r3, #4]
 800f092:	f7ff f807 	bl	800e0a4 <_Balloc>
 800f096:	4681      	mov	r9, r0
 800f098:	2800      	cmp	r0, #0
 800f09a:	f43f aef4 	beq.w	800ee86 <_strtod_l+0x43e>
 800f09e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f0a0:	691a      	ldr	r2, [r3, #16]
 800f0a2:	3202      	adds	r2, #2
 800f0a4:	f103 010c 	add.w	r1, r3, #12
 800f0a8:	0092      	lsls	r2, r2, #2
 800f0aa:	300c      	adds	r0, #12
 800f0ac:	f7fe f94f 	bl	800d34e <memcpy>
 800f0b0:	ec4b ab10 	vmov	d0, sl, fp
 800f0b4:	9805      	ldr	r0, [sp, #20]
 800f0b6:	aa1c      	add	r2, sp, #112	@ 0x70
 800f0b8:	a91b      	add	r1, sp, #108	@ 0x6c
 800f0ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800f0be:	f7ff fbd5 	bl	800e86c <__d2b>
 800f0c2:	901a      	str	r0, [sp, #104]	@ 0x68
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	f43f aede 	beq.w	800ee86 <_strtod_l+0x43e>
 800f0ca:	9805      	ldr	r0, [sp, #20]
 800f0cc:	2101      	movs	r1, #1
 800f0ce:	f7ff f927 	bl	800e320 <__i2b>
 800f0d2:	4680      	mov	r8, r0
 800f0d4:	b948      	cbnz	r0, 800f0ea <_strtod_l+0x6a2>
 800f0d6:	f04f 0800 	mov.w	r8, #0
 800f0da:	e6d4      	b.n	800ee86 <_strtod_l+0x43e>
 800f0dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f0e0:	fa02 f303 	lsl.w	r3, r2, r3
 800f0e4:	ea03 0a0a 	and.w	sl, r3, sl
 800f0e8:	e7b0      	b.n	800f04c <_strtod_l+0x604>
 800f0ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800f0ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800f0ee:	2d00      	cmp	r5, #0
 800f0f0:	bfab      	itete	ge
 800f0f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800f0f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800f0f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800f0f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800f0fa:	bfac      	ite	ge
 800f0fc:	18ef      	addge	r7, r5, r3
 800f0fe:	1b5e      	sublt	r6, r3, r5
 800f100:	9b08      	ldr	r3, [sp, #32]
 800f102:	1aed      	subs	r5, r5, r3
 800f104:	4415      	add	r5, r2
 800f106:	4b66      	ldr	r3, [pc, #408]	@ (800f2a0 <_strtod_l+0x858>)
 800f108:	3d01      	subs	r5, #1
 800f10a:	429d      	cmp	r5, r3
 800f10c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800f110:	da50      	bge.n	800f1b4 <_strtod_l+0x76c>
 800f112:	1b5b      	subs	r3, r3, r5
 800f114:	2b1f      	cmp	r3, #31
 800f116:	eba2 0203 	sub.w	r2, r2, r3
 800f11a:	f04f 0101 	mov.w	r1, #1
 800f11e:	dc3d      	bgt.n	800f19c <_strtod_l+0x754>
 800f120:	fa01 f303 	lsl.w	r3, r1, r3
 800f124:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f126:	2300      	movs	r3, #0
 800f128:	9310      	str	r3, [sp, #64]	@ 0x40
 800f12a:	18bd      	adds	r5, r7, r2
 800f12c:	9b08      	ldr	r3, [sp, #32]
 800f12e:	42af      	cmp	r7, r5
 800f130:	4416      	add	r6, r2
 800f132:	441e      	add	r6, r3
 800f134:	463b      	mov	r3, r7
 800f136:	bfa8      	it	ge
 800f138:	462b      	movge	r3, r5
 800f13a:	42b3      	cmp	r3, r6
 800f13c:	bfa8      	it	ge
 800f13e:	4633      	movge	r3, r6
 800f140:	2b00      	cmp	r3, #0
 800f142:	bfc2      	ittt	gt
 800f144:	1aed      	subgt	r5, r5, r3
 800f146:	1af6      	subgt	r6, r6, r3
 800f148:	1aff      	subgt	r7, r7, r3
 800f14a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	dd16      	ble.n	800f17e <_strtod_l+0x736>
 800f150:	4641      	mov	r1, r8
 800f152:	9805      	ldr	r0, [sp, #20]
 800f154:	461a      	mov	r2, r3
 800f156:	f7ff f9a3 	bl	800e4a0 <__pow5mult>
 800f15a:	4680      	mov	r8, r0
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d0ba      	beq.n	800f0d6 <_strtod_l+0x68e>
 800f160:	4601      	mov	r1, r0
 800f162:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800f164:	9805      	ldr	r0, [sp, #20]
 800f166:	f7ff f8f1 	bl	800e34c <__multiply>
 800f16a:	900e      	str	r0, [sp, #56]	@ 0x38
 800f16c:	2800      	cmp	r0, #0
 800f16e:	f43f ae8a 	beq.w	800ee86 <_strtod_l+0x43e>
 800f172:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f174:	9805      	ldr	r0, [sp, #20]
 800f176:	f7fe ffd5 	bl	800e124 <_Bfree>
 800f17a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f17c:	931a      	str	r3, [sp, #104]	@ 0x68
 800f17e:	2d00      	cmp	r5, #0
 800f180:	dc1d      	bgt.n	800f1be <_strtod_l+0x776>
 800f182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f184:	2b00      	cmp	r3, #0
 800f186:	dd23      	ble.n	800f1d0 <_strtod_l+0x788>
 800f188:	4649      	mov	r1, r9
 800f18a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800f18c:	9805      	ldr	r0, [sp, #20]
 800f18e:	f7ff f987 	bl	800e4a0 <__pow5mult>
 800f192:	4681      	mov	r9, r0
 800f194:	b9e0      	cbnz	r0, 800f1d0 <_strtod_l+0x788>
 800f196:	f04f 0900 	mov.w	r9, #0
 800f19a:	e674      	b.n	800ee86 <_strtod_l+0x43e>
 800f19c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800f1a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800f1a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800f1a8:	35e2      	adds	r5, #226	@ 0xe2
 800f1aa:	fa01 f305 	lsl.w	r3, r1, r5
 800f1ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f1b2:	e7ba      	b.n	800f12a <_strtod_l+0x6e2>
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	9310      	str	r3, [sp, #64]	@ 0x40
 800f1b8:	2301      	movs	r3, #1
 800f1ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f1bc:	e7b5      	b.n	800f12a <_strtod_l+0x6e2>
 800f1be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1c0:	9805      	ldr	r0, [sp, #20]
 800f1c2:	462a      	mov	r2, r5
 800f1c4:	f7ff f9c6 	bl	800e554 <__lshift>
 800f1c8:	901a      	str	r0, [sp, #104]	@ 0x68
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d1d9      	bne.n	800f182 <_strtod_l+0x73a>
 800f1ce:	e65a      	b.n	800ee86 <_strtod_l+0x43e>
 800f1d0:	2e00      	cmp	r6, #0
 800f1d2:	dd07      	ble.n	800f1e4 <_strtod_l+0x79c>
 800f1d4:	4649      	mov	r1, r9
 800f1d6:	9805      	ldr	r0, [sp, #20]
 800f1d8:	4632      	mov	r2, r6
 800f1da:	f7ff f9bb 	bl	800e554 <__lshift>
 800f1de:	4681      	mov	r9, r0
 800f1e0:	2800      	cmp	r0, #0
 800f1e2:	d0d8      	beq.n	800f196 <_strtod_l+0x74e>
 800f1e4:	2f00      	cmp	r7, #0
 800f1e6:	dd08      	ble.n	800f1fa <_strtod_l+0x7b2>
 800f1e8:	4641      	mov	r1, r8
 800f1ea:	9805      	ldr	r0, [sp, #20]
 800f1ec:	463a      	mov	r2, r7
 800f1ee:	f7ff f9b1 	bl	800e554 <__lshift>
 800f1f2:	4680      	mov	r8, r0
 800f1f4:	2800      	cmp	r0, #0
 800f1f6:	f43f ae46 	beq.w	800ee86 <_strtod_l+0x43e>
 800f1fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f1fc:	9805      	ldr	r0, [sp, #20]
 800f1fe:	464a      	mov	r2, r9
 800f200:	f7ff fa30 	bl	800e664 <__mdiff>
 800f204:	4604      	mov	r4, r0
 800f206:	2800      	cmp	r0, #0
 800f208:	f43f ae3d 	beq.w	800ee86 <_strtod_l+0x43e>
 800f20c:	68c3      	ldr	r3, [r0, #12]
 800f20e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f210:	2300      	movs	r3, #0
 800f212:	60c3      	str	r3, [r0, #12]
 800f214:	4641      	mov	r1, r8
 800f216:	f7ff fa09 	bl	800e62c <__mcmp>
 800f21a:	2800      	cmp	r0, #0
 800f21c:	da46      	bge.n	800f2ac <_strtod_l+0x864>
 800f21e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f220:	ea53 030a 	orrs.w	r3, r3, sl
 800f224:	d16c      	bne.n	800f300 <_strtod_l+0x8b8>
 800f226:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d168      	bne.n	800f300 <_strtod_l+0x8b8>
 800f22e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f232:	0d1b      	lsrs	r3, r3, #20
 800f234:	051b      	lsls	r3, r3, #20
 800f236:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f23a:	d961      	bls.n	800f300 <_strtod_l+0x8b8>
 800f23c:	6963      	ldr	r3, [r4, #20]
 800f23e:	b913      	cbnz	r3, 800f246 <_strtod_l+0x7fe>
 800f240:	6923      	ldr	r3, [r4, #16]
 800f242:	2b01      	cmp	r3, #1
 800f244:	dd5c      	ble.n	800f300 <_strtod_l+0x8b8>
 800f246:	4621      	mov	r1, r4
 800f248:	2201      	movs	r2, #1
 800f24a:	9805      	ldr	r0, [sp, #20]
 800f24c:	f7ff f982 	bl	800e554 <__lshift>
 800f250:	4641      	mov	r1, r8
 800f252:	4604      	mov	r4, r0
 800f254:	f7ff f9ea 	bl	800e62c <__mcmp>
 800f258:	2800      	cmp	r0, #0
 800f25a:	dd51      	ble.n	800f300 <_strtod_l+0x8b8>
 800f25c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f260:	9a08      	ldr	r2, [sp, #32]
 800f262:	0d1b      	lsrs	r3, r3, #20
 800f264:	051b      	lsls	r3, r3, #20
 800f266:	2a00      	cmp	r2, #0
 800f268:	d06b      	beq.n	800f342 <_strtod_l+0x8fa>
 800f26a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800f26e:	d868      	bhi.n	800f342 <_strtod_l+0x8fa>
 800f270:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800f274:	f67f ae9d 	bls.w	800efb2 <_strtod_l+0x56a>
 800f278:	4b0a      	ldr	r3, [pc, #40]	@ (800f2a4 <_strtod_l+0x85c>)
 800f27a:	4650      	mov	r0, sl
 800f27c:	4659      	mov	r1, fp
 800f27e:	2200      	movs	r2, #0
 800f280:	f7f1 f9c2 	bl	8000608 <__aeabi_dmul>
 800f284:	4b08      	ldr	r3, [pc, #32]	@ (800f2a8 <_strtod_l+0x860>)
 800f286:	400b      	ands	r3, r1
 800f288:	4682      	mov	sl, r0
 800f28a:	468b      	mov	fp, r1
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	f47f ae05 	bne.w	800ee9c <_strtod_l+0x454>
 800f292:	9a05      	ldr	r2, [sp, #20]
 800f294:	2322      	movs	r3, #34	@ 0x22
 800f296:	6013      	str	r3, [r2, #0]
 800f298:	e600      	b.n	800ee9c <_strtod_l+0x454>
 800f29a:	bf00      	nop
 800f29c:	08011498 	.word	0x08011498
 800f2a0:	fffffc02 	.word	0xfffffc02
 800f2a4:	39500000 	.word	0x39500000
 800f2a8:	7ff00000 	.word	0x7ff00000
 800f2ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f2b0:	d165      	bne.n	800f37e <_strtod_l+0x936>
 800f2b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f2b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f2b8:	b35a      	cbz	r2, 800f312 <_strtod_l+0x8ca>
 800f2ba:	4a9f      	ldr	r2, [pc, #636]	@ (800f538 <_strtod_l+0xaf0>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d12b      	bne.n	800f318 <_strtod_l+0x8d0>
 800f2c0:	9b08      	ldr	r3, [sp, #32]
 800f2c2:	4651      	mov	r1, sl
 800f2c4:	b303      	cbz	r3, 800f308 <_strtod_l+0x8c0>
 800f2c6:	4b9d      	ldr	r3, [pc, #628]	@ (800f53c <_strtod_l+0xaf4>)
 800f2c8:	465a      	mov	r2, fp
 800f2ca:	4013      	ands	r3, r2
 800f2cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800f2d0:	f04f 32ff 	mov.w	r2, #4294967295
 800f2d4:	d81b      	bhi.n	800f30e <_strtod_l+0x8c6>
 800f2d6:	0d1b      	lsrs	r3, r3, #20
 800f2d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800f2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f2e0:	4299      	cmp	r1, r3
 800f2e2:	d119      	bne.n	800f318 <_strtod_l+0x8d0>
 800f2e4:	4b96      	ldr	r3, [pc, #600]	@ (800f540 <_strtod_l+0xaf8>)
 800f2e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2e8:	429a      	cmp	r2, r3
 800f2ea:	d102      	bne.n	800f2f2 <_strtod_l+0x8aa>
 800f2ec:	3101      	adds	r1, #1
 800f2ee:	f43f adca 	beq.w	800ee86 <_strtod_l+0x43e>
 800f2f2:	4b92      	ldr	r3, [pc, #584]	@ (800f53c <_strtod_l+0xaf4>)
 800f2f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f2f6:	401a      	ands	r2, r3
 800f2f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800f2fc:	f04f 0a00 	mov.w	sl, #0
 800f300:	9b08      	ldr	r3, [sp, #32]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d1b8      	bne.n	800f278 <_strtod_l+0x830>
 800f306:	e5c9      	b.n	800ee9c <_strtod_l+0x454>
 800f308:	f04f 33ff 	mov.w	r3, #4294967295
 800f30c:	e7e8      	b.n	800f2e0 <_strtod_l+0x898>
 800f30e:	4613      	mov	r3, r2
 800f310:	e7e6      	b.n	800f2e0 <_strtod_l+0x898>
 800f312:	ea53 030a 	orrs.w	r3, r3, sl
 800f316:	d0a1      	beq.n	800f25c <_strtod_l+0x814>
 800f318:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f31a:	b1db      	cbz	r3, 800f354 <_strtod_l+0x90c>
 800f31c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f31e:	4213      	tst	r3, r2
 800f320:	d0ee      	beq.n	800f300 <_strtod_l+0x8b8>
 800f322:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f324:	9a08      	ldr	r2, [sp, #32]
 800f326:	4650      	mov	r0, sl
 800f328:	4659      	mov	r1, fp
 800f32a:	b1bb      	cbz	r3, 800f35c <_strtod_l+0x914>
 800f32c:	f7ff fb6c 	bl	800ea08 <sulp>
 800f330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f334:	ec53 2b10 	vmov	r2, r3, d0
 800f338:	f7f0 ffb0 	bl	800029c <__adddf3>
 800f33c:	4682      	mov	sl, r0
 800f33e:	468b      	mov	fp, r1
 800f340:	e7de      	b.n	800f300 <_strtod_l+0x8b8>
 800f342:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800f346:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f34a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f34e:	f04f 3aff 	mov.w	sl, #4294967295
 800f352:	e7d5      	b.n	800f300 <_strtod_l+0x8b8>
 800f354:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f356:	ea13 0f0a 	tst.w	r3, sl
 800f35a:	e7e1      	b.n	800f320 <_strtod_l+0x8d8>
 800f35c:	f7ff fb54 	bl	800ea08 <sulp>
 800f360:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f364:	ec53 2b10 	vmov	r2, r3, d0
 800f368:	f7f0 ff96 	bl	8000298 <__aeabi_dsub>
 800f36c:	2200      	movs	r2, #0
 800f36e:	2300      	movs	r3, #0
 800f370:	4682      	mov	sl, r0
 800f372:	468b      	mov	fp, r1
 800f374:	f7f1 fbb0 	bl	8000ad8 <__aeabi_dcmpeq>
 800f378:	2800      	cmp	r0, #0
 800f37a:	d0c1      	beq.n	800f300 <_strtod_l+0x8b8>
 800f37c:	e619      	b.n	800efb2 <_strtod_l+0x56a>
 800f37e:	4641      	mov	r1, r8
 800f380:	4620      	mov	r0, r4
 800f382:	f7ff facb 	bl	800e91c <__ratio>
 800f386:	ec57 6b10 	vmov	r6, r7, d0
 800f38a:	2200      	movs	r2, #0
 800f38c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f390:	4630      	mov	r0, r6
 800f392:	4639      	mov	r1, r7
 800f394:	f7f1 fbb4 	bl	8000b00 <__aeabi_dcmple>
 800f398:	2800      	cmp	r0, #0
 800f39a:	d06f      	beq.n	800f47c <_strtod_l+0xa34>
 800f39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d17a      	bne.n	800f498 <_strtod_l+0xa50>
 800f3a2:	f1ba 0f00 	cmp.w	sl, #0
 800f3a6:	d158      	bne.n	800f45a <_strtod_l+0xa12>
 800f3a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d15a      	bne.n	800f468 <_strtod_l+0xa20>
 800f3b2:	4b64      	ldr	r3, [pc, #400]	@ (800f544 <_strtod_l+0xafc>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	4639      	mov	r1, r7
 800f3ba:	f7f1 fb97 	bl	8000aec <__aeabi_dcmplt>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	d159      	bne.n	800f476 <_strtod_l+0xa2e>
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	4639      	mov	r1, r7
 800f3c6:	4b60      	ldr	r3, [pc, #384]	@ (800f548 <_strtod_l+0xb00>)
 800f3c8:	2200      	movs	r2, #0
 800f3ca:	f7f1 f91d 	bl	8000608 <__aeabi_dmul>
 800f3ce:	4606      	mov	r6, r0
 800f3d0:	460f      	mov	r7, r1
 800f3d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f3d6:	9606      	str	r6, [sp, #24]
 800f3d8:	9307      	str	r3, [sp, #28]
 800f3da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f3de:	4d57      	ldr	r5, [pc, #348]	@ (800f53c <_strtod_l+0xaf4>)
 800f3e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f3e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3e6:	401d      	ands	r5, r3
 800f3e8:	4b58      	ldr	r3, [pc, #352]	@ (800f54c <_strtod_l+0xb04>)
 800f3ea:	429d      	cmp	r5, r3
 800f3ec:	f040 80b2 	bne.w	800f554 <_strtod_l+0xb0c>
 800f3f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f3f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f3f6:	ec4b ab10 	vmov	d0, sl, fp
 800f3fa:	f7ff f9c7 	bl	800e78c <__ulp>
 800f3fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f402:	ec51 0b10 	vmov	r0, r1, d0
 800f406:	f7f1 f8ff 	bl	8000608 <__aeabi_dmul>
 800f40a:	4652      	mov	r2, sl
 800f40c:	465b      	mov	r3, fp
 800f40e:	f7f0 ff45 	bl	800029c <__adddf3>
 800f412:	460b      	mov	r3, r1
 800f414:	4949      	ldr	r1, [pc, #292]	@ (800f53c <_strtod_l+0xaf4>)
 800f416:	4a4e      	ldr	r2, [pc, #312]	@ (800f550 <_strtod_l+0xb08>)
 800f418:	4019      	ands	r1, r3
 800f41a:	4291      	cmp	r1, r2
 800f41c:	4682      	mov	sl, r0
 800f41e:	d942      	bls.n	800f4a6 <_strtod_l+0xa5e>
 800f420:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f422:	4b47      	ldr	r3, [pc, #284]	@ (800f540 <_strtod_l+0xaf8>)
 800f424:	429a      	cmp	r2, r3
 800f426:	d103      	bne.n	800f430 <_strtod_l+0x9e8>
 800f428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f42a:	3301      	adds	r3, #1
 800f42c:	f43f ad2b 	beq.w	800ee86 <_strtod_l+0x43e>
 800f430:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f540 <_strtod_l+0xaf8>
 800f434:	f04f 3aff 	mov.w	sl, #4294967295
 800f438:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f43a:	9805      	ldr	r0, [sp, #20]
 800f43c:	f7fe fe72 	bl	800e124 <_Bfree>
 800f440:	9805      	ldr	r0, [sp, #20]
 800f442:	4649      	mov	r1, r9
 800f444:	f7fe fe6e 	bl	800e124 <_Bfree>
 800f448:	9805      	ldr	r0, [sp, #20]
 800f44a:	4641      	mov	r1, r8
 800f44c:	f7fe fe6a 	bl	800e124 <_Bfree>
 800f450:	9805      	ldr	r0, [sp, #20]
 800f452:	4621      	mov	r1, r4
 800f454:	f7fe fe66 	bl	800e124 <_Bfree>
 800f458:	e618      	b.n	800f08c <_strtod_l+0x644>
 800f45a:	f1ba 0f01 	cmp.w	sl, #1
 800f45e:	d103      	bne.n	800f468 <_strtod_l+0xa20>
 800f460:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f462:	2b00      	cmp	r3, #0
 800f464:	f43f ada5 	beq.w	800efb2 <_strtod_l+0x56a>
 800f468:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f518 <_strtod_l+0xad0>
 800f46c:	4f35      	ldr	r7, [pc, #212]	@ (800f544 <_strtod_l+0xafc>)
 800f46e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f472:	2600      	movs	r6, #0
 800f474:	e7b1      	b.n	800f3da <_strtod_l+0x992>
 800f476:	4f34      	ldr	r7, [pc, #208]	@ (800f548 <_strtod_l+0xb00>)
 800f478:	2600      	movs	r6, #0
 800f47a:	e7aa      	b.n	800f3d2 <_strtod_l+0x98a>
 800f47c:	4b32      	ldr	r3, [pc, #200]	@ (800f548 <_strtod_l+0xb00>)
 800f47e:	4630      	mov	r0, r6
 800f480:	4639      	mov	r1, r7
 800f482:	2200      	movs	r2, #0
 800f484:	f7f1 f8c0 	bl	8000608 <__aeabi_dmul>
 800f488:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f48a:	4606      	mov	r6, r0
 800f48c:	460f      	mov	r7, r1
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d09f      	beq.n	800f3d2 <_strtod_l+0x98a>
 800f492:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f496:	e7a0      	b.n	800f3da <_strtod_l+0x992>
 800f498:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f520 <_strtod_l+0xad8>
 800f49c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f4a0:	ec57 6b17 	vmov	r6, r7, d7
 800f4a4:	e799      	b.n	800f3da <_strtod_l+0x992>
 800f4a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f4aa:	9b08      	ldr	r3, [sp, #32]
 800f4ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d1c1      	bne.n	800f438 <_strtod_l+0x9f0>
 800f4b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f4b8:	0d1b      	lsrs	r3, r3, #20
 800f4ba:	051b      	lsls	r3, r3, #20
 800f4bc:	429d      	cmp	r5, r3
 800f4be:	d1bb      	bne.n	800f438 <_strtod_l+0x9f0>
 800f4c0:	4630      	mov	r0, r6
 800f4c2:	4639      	mov	r1, r7
 800f4c4:	f7f1 fbe8 	bl	8000c98 <__aeabi_d2lz>
 800f4c8:	f7f1 f870 	bl	80005ac <__aeabi_l2d>
 800f4cc:	4602      	mov	r2, r0
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	4630      	mov	r0, r6
 800f4d2:	4639      	mov	r1, r7
 800f4d4:	f7f0 fee0 	bl	8000298 <__aeabi_dsub>
 800f4d8:	460b      	mov	r3, r1
 800f4da:	4602      	mov	r2, r0
 800f4dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f4e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f4e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f4e6:	ea46 060a 	orr.w	r6, r6, sl
 800f4ea:	431e      	orrs	r6, r3
 800f4ec:	d06f      	beq.n	800f5ce <_strtod_l+0xb86>
 800f4ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800f528 <_strtod_l+0xae0>)
 800f4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f4:	f7f1 fafa 	bl	8000aec <__aeabi_dcmplt>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	f47f accf 	bne.w	800ee9c <_strtod_l+0x454>
 800f4fe:	a30c      	add	r3, pc, #48	@ (adr r3, 800f530 <_strtod_l+0xae8>)
 800f500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f508:	f7f1 fb0e 	bl	8000b28 <__aeabi_dcmpgt>
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d093      	beq.n	800f438 <_strtod_l+0x9f0>
 800f510:	e4c4      	b.n	800ee9c <_strtod_l+0x454>
 800f512:	bf00      	nop
 800f514:	f3af 8000 	nop.w
 800f518:	00000000 	.word	0x00000000
 800f51c:	bff00000 	.word	0xbff00000
 800f520:	00000000 	.word	0x00000000
 800f524:	3ff00000 	.word	0x3ff00000
 800f528:	94a03595 	.word	0x94a03595
 800f52c:	3fdfffff 	.word	0x3fdfffff
 800f530:	35afe535 	.word	0x35afe535
 800f534:	3fe00000 	.word	0x3fe00000
 800f538:	000fffff 	.word	0x000fffff
 800f53c:	7ff00000 	.word	0x7ff00000
 800f540:	7fefffff 	.word	0x7fefffff
 800f544:	3ff00000 	.word	0x3ff00000
 800f548:	3fe00000 	.word	0x3fe00000
 800f54c:	7fe00000 	.word	0x7fe00000
 800f550:	7c9fffff 	.word	0x7c9fffff
 800f554:	9b08      	ldr	r3, [sp, #32]
 800f556:	b323      	cbz	r3, 800f5a2 <_strtod_l+0xb5a>
 800f558:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f55c:	d821      	bhi.n	800f5a2 <_strtod_l+0xb5a>
 800f55e:	a328      	add	r3, pc, #160	@ (adr r3, 800f600 <_strtod_l+0xbb8>)
 800f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f564:	4630      	mov	r0, r6
 800f566:	4639      	mov	r1, r7
 800f568:	f7f1 faca 	bl	8000b00 <__aeabi_dcmple>
 800f56c:	b1a0      	cbz	r0, 800f598 <_strtod_l+0xb50>
 800f56e:	4639      	mov	r1, r7
 800f570:	4630      	mov	r0, r6
 800f572:	f7f1 fb21 	bl	8000bb8 <__aeabi_d2uiz>
 800f576:	2801      	cmp	r0, #1
 800f578:	bf38      	it	cc
 800f57a:	2001      	movcc	r0, #1
 800f57c:	f7f0 ffca 	bl	8000514 <__aeabi_ui2d>
 800f580:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f582:	4606      	mov	r6, r0
 800f584:	460f      	mov	r7, r1
 800f586:	b9fb      	cbnz	r3, 800f5c8 <_strtod_l+0xb80>
 800f588:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f58c:	9014      	str	r0, [sp, #80]	@ 0x50
 800f58e:	9315      	str	r3, [sp, #84]	@ 0x54
 800f590:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f594:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f598:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f59a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f59e:	1b5b      	subs	r3, r3, r5
 800f5a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f5a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f5a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f5aa:	f7ff f8ef 	bl	800e78c <__ulp>
 800f5ae:	4650      	mov	r0, sl
 800f5b0:	ec53 2b10 	vmov	r2, r3, d0
 800f5b4:	4659      	mov	r1, fp
 800f5b6:	f7f1 f827 	bl	8000608 <__aeabi_dmul>
 800f5ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f5be:	f7f0 fe6d 	bl	800029c <__adddf3>
 800f5c2:	4682      	mov	sl, r0
 800f5c4:	468b      	mov	fp, r1
 800f5c6:	e770      	b.n	800f4aa <_strtod_l+0xa62>
 800f5c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f5cc:	e7e0      	b.n	800f590 <_strtod_l+0xb48>
 800f5ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800f608 <_strtod_l+0xbc0>)
 800f5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d4:	f7f1 fa8a 	bl	8000aec <__aeabi_dcmplt>
 800f5d8:	e798      	b.n	800f50c <_strtod_l+0xac4>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f5de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f5e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f5e2:	6013      	str	r3, [r2, #0]
 800f5e4:	f7ff ba6d 	b.w	800eac2 <_strtod_l+0x7a>
 800f5e8:	2a65      	cmp	r2, #101	@ 0x65
 800f5ea:	f43f ab66 	beq.w	800ecba <_strtod_l+0x272>
 800f5ee:	2a45      	cmp	r2, #69	@ 0x45
 800f5f0:	f43f ab63 	beq.w	800ecba <_strtod_l+0x272>
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	f7ff bb9e 	b.w	800ed36 <_strtod_l+0x2ee>
 800f5fa:	bf00      	nop
 800f5fc:	f3af 8000 	nop.w
 800f600:	ffc00000 	.word	0xffc00000
 800f604:	41dfffff 	.word	0x41dfffff
 800f608:	94a03595 	.word	0x94a03595
 800f60c:	3fcfffff 	.word	0x3fcfffff

0800f610 <_strtod_r>:
 800f610:	4b01      	ldr	r3, [pc, #4]	@ (800f618 <_strtod_r+0x8>)
 800f612:	f7ff ba19 	b.w	800ea48 <_strtod_l>
 800f616:	bf00      	nop
 800f618:	20000078 	.word	0x20000078

0800f61c <_strtol_l.constprop.0>:
 800f61c:	2b24      	cmp	r3, #36	@ 0x24
 800f61e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f622:	4686      	mov	lr, r0
 800f624:	4690      	mov	r8, r2
 800f626:	d801      	bhi.n	800f62c <_strtol_l.constprop.0+0x10>
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d106      	bne.n	800f63a <_strtol_l.constprop.0+0x1e>
 800f62c:	f7fd fe62 	bl	800d2f4 <__errno>
 800f630:	2316      	movs	r3, #22
 800f632:	6003      	str	r3, [r0, #0]
 800f634:	2000      	movs	r0, #0
 800f636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f63a:	4834      	ldr	r0, [pc, #208]	@ (800f70c <_strtol_l.constprop.0+0xf0>)
 800f63c:	460d      	mov	r5, r1
 800f63e:	462a      	mov	r2, r5
 800f640:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f644:	5d06      	ldrb	r6, [r0, r4]
 800f646:	f016 0608 	ands.w	r6, r6, #8
 800f64a:	d1f8      	bne.n	800f63e <_strtol_l.constprop.0+0x22>
 800f64c:	2c2d      	cmp	r4, #45	@ 0x2d
 800f64e:	d12d      	bne.n	800f6ac <_strtol_l.constprop.0+0x90>
 800f650:	782c      	ldrb	r4, [r5, #0]
 800f652:	2601      	movs	r6, #1
 800f654:	1c95      	adds	r5, r2, #2
 800f656:	f033 0210 	bics.w	r2, r3, #16
 800f65a:	d109      	bne.n	800f670 <_strtol_l.constprop.0+0x54>
 800f65c:	2c30      	cmp	r4, #48	@ 0x30
 800f65e:	d12a      	bne.n	800f6b6 <_strtol_l.constprop.0+0x9a>
 800f660:	782a      	ldrb	r2, [r5, #0]
 800f662:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f666:	2a58      	cmp	r2, #88	@ 0x58
 800f668:	d125      	bne.n	800f6b6 <_strtol_l.constprop.0+0x9a>
 800f66a:	786c      	ldrb	r4, [r5, #1]
 800f66c:	2310      	movs	r3, #16
 800f66e:	3502      	adds	r5, #2
 800f670:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f674:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f678:	2200      	movs	r2, #0
 800f67a:	fbbc f9f3 	udiv	r9, ip, r3
 800f67e:	4610      	mov	r0, r2
 800f680:	fb03 ca19 	mls	sl, r3, r9, ip
 800f684:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f688:	2f09      	cmp	r7, #9
 800f68a:	d81b      	bhi.n	800f6c4 <_strtol_l.constprop.0+0xa8>
 800f68c:	463c      	mov	r4, r7
 800f68e:	42a3      	cmp	r3, r4
 800f690:	dd27      	ble.n	800f6e2 <_strtol_l.constprop.0+0xc6>
 800f692:	1c57      	adds	r7, r2, #1
 800f694:	d007      	beq.n	800f6a6 <_strtol_l.constprop.0+0x8a>
 800f696:	4581      	cmp	r9, r0
 800f698:	d320      	bcc.n	800f6dc <_strtol_l.constprop.0+0xc0>
 800f69a:	d101      	bne.n	800f6a0 <_strtol_l.constprop.0+0x84>
 800f69c:	45a2      	cmp	sl, r4
 800f69e:	db1d      	blt.n	800f6dc <_strtol_l.constprop.0+0xc0>
 800f6a0:	fb00 4003 	mla	r0, r0, r3, r4
 800f6a4:	2201      	movs	r2, #1
 800f6a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f6aa:	e7eb      	b.n	800f684 <_strtol_l.constprop.0+0x68>
 800f6ac:	2c2b      	cmp	r4, #43	@ 0x2b
 800f6ae:	bf04      	itt	eq
 800f6b0:	782c      	ldrbeq	r4, [r5, #0]
 800f6b2:	1c95      	addeq	r5, r2, #2
 800f6b4:	e7cf      	b.n	800f656 <_strtol_l.constprop.0+0x3a>
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d1da      	bne.n	800f670 <_strtol_l.constprop.0+0x54>
 800f6ba:	2c30      	cmp	r4, #48	@ 0x30
 800f6bc:	bf0c      	ite	eq
 800f6be:	2308      	moveq	r3, #8
 800f6c0:	230a      	movne	r3, #10
 800f6c2:	e7d5      	b.n	800f670 <_strtol_l.constprop.0+0x54>
 800f6c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f6c8:	2f19      	cmp	r7, #25
 800f6ca:	d801      	bhi.n	800f6d0 <_strtol_l.constprop.0+0xb4>
 800f6cc:	3c37      	subs	r4, #55	@ 0x37
 800f6ce:	e7de      	b.n	800f68e <_strtol_l.constprop.0+0x72>
 800f6d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f6d4:	2f19      	cmp	r7, #25
 800f6d6:	d804      	bhi.n	800f6e2 <_strtol_l.constprop.0+0xc6>
 800f6d8:	3c57      	subs	r4, #87	@ 0x57
 800f6da:	e7d8      	b.n	800f68e <_strtol_l.constprop.0+0x72>
 800f6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e0:	e7e1      	b.n	800f6a6 <_strtol_l.constprop.0+0x8a>
 800f6e2:	1c53      	adds	r3, r2, #1
 800f6e4:	d108      	bne.n	800f6f8 <_strtol_l.constprop.0+0xdc>
 800f6e6:	2322      	movs	r3, #34	@ 0x22
 800f6e8:	f8ce 3000 	str.w	r3, [lr]
 800f6ec:	4660      	mov	r0, ip
 800f6ee:	f1b8 0f00 	cmp.w	r8, #0
 800f6f2:	d0a0      	beq.n	800f636 <_strtol_l.constprop.0+0x1a>
 800f6f4:	1e69      	subs	r1, r5, #1
 800f6f6:	e006      	b.n	800f706 <_strtol_l.constprop.0+0xea>
 800f6f8:	b106      	cbz	r6, 800f6fc <_strtol_l.constprop.0+0xe0>
 800f6fa:	4240      	negs	r0, r0
 800f6fc:	f1b8 0f00 	cmp.w	r8, #0
 800f700:	d099      	beq.n	800f636 <_strtol_l.constprop.0+0x1a>
 800f702:	2a00      	cmp	r2, #0
 800f704:	d1f6      	bne.n	800f6f4 <_strtol_l.constprop.0+0xd8>
 800f706:	f8c8 1000 	str.w	r1, [r8]
 800f70a:	e794      	b.n	800f636 <_strtol_l.constprop.0+0x1a>
 800f70c:	080114c1 	.word	0x080114c1

0800f710 <_strtol_r>:
 800f710:	f7ff bf84 	b.w	800f61c <_strtol_l.constprop.0>

0800f714 <__ssputs_r>:
 800f714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f718:	688e      	ldr	r6, [r1, #8]
 800f71a:	461f      	mov	r7, r3
 800f71c:	42be      	cmp	r6, r7
 800f71e:	680b      	ldr	r3, [r1, #0]
 800f720:	4682      	mov	sl, r0
 800f722:	460c      	mov	r4, r1
 800f724:	4690      	mov	r8, r2
 800f726:	d82d      	bhi.n	800f784 <__ssputs_r+0x70>
 800f728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f72c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f730:	d026      	beq.n	800f780 <__ssputs_r+0x6c>
 800f732:	6965      	ldr	r5, [r4, #20]
 800f734:	6909      	ldr	r1, [r1, #16]
 800f736:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f73a:	eba3 0901 	sub.w	r9, r3, r1
 800f73e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f742:	1c7b      	adds	r3, r7, #1
 800f744:	444b      	add	r3, r9
 800f746:	106d      	asrs	r5, r5, #1
 800f748:	429d      	cmp	r5, r3
 800f74a:	bf38      	it	cc
 800f74c:	461d      	movcc	r5, r3
 800f74e:	0553      	lsls	r3, r2, #21
 800f750:	d527      	bpl.n	800f7a2 <__ssputs_r+0x8e>
 800f752:	4629      	mov	r1, r5
 800f754:	f7fc fccc 	bl	800c0f0 <_malloc_r>
 800f758:	4606      	mov	r6, r0
 800f75a:	b360      	cbz	r0, 800f7b6 <__ssputs_r+0xa2>
 800f75c:	6921      	ldr	r1, [r4, #16]
 800f75e:	464a      	mov	r2, r9
 800f760:	f7fd fdf5 	bl	800d34e <memcpy>
 800f764:	89a3      	ldrh	r3, [r4, #12]
 800f766:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f76e:	81a3      	strh	r3, [r4, #12]
 800f770:	6126      	str	r6, [r4, #16]
 800f772:	6165      	str	r5, [r4, #20]
 800f774:	444e      	add	r6, r9
 800f776:	eba5 0509 	sub.w	r5, r5, r9
 800f77a:	6026      	str	r6, [r4, #0]
 800f77c:	60a5      	str	r5, [r4, #8]
 800f77e:	463e      	mov	r6, r7
 800f780:	42be      	cmp	r6, r7
 800f782:	d900      	bls.n	800f786 <__ssputs_r+0x72>
 800f784:	463e      	mov	r6, r7
 800f786:	6820      	ldr	r0, [r4, #0]
 800f788:	4632      	mov	r2, r6
 800f78a:	4641      	mov	r1, r8
 800f78c:	f000 fd53 	bl	8010236 <memmove>
 800f790:	68a3      	ldr	r3, [r4, #8]
 800f792:	1b9b      	subs	r3, r3, r6
 800f794:	60a3      	str	r3, [r4, #8]
 800f796:	6823      	ldr	r3, [r4, #0]
 800f798:	4433      	add	r3, r6
 800f79a:	6023      	str	r3, [r4, #0]
 800f79c:	2000      	movs	r0, #0
 800f79e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7a2:	462a      	mov	r2, r5
 800f7a4:	f001 f8f9 	bl	801099a <_realloc_r>
 800f7a8:	4606      	mov	r6, r0
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	d1e0      	bne.n	800f770 <__ssputs_r+0x5c>
 800f7ae:	6921      	ldr	r1, [r4, #16]
 800f7b0:	4650      	mov	r0, sl
 800f7b2:	f7fe fc2d 	bl	800e010 <_free_r>
 800f7b6:	230c      	movs	r3, #12
 800f7b8:	f8ca 3000 	str.w	r3, [sl]
 800f7bc:	89a3      	ldrh	r3, [r4, #12]
 800f7be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7c2:	81a3      	strh	r3, [r4, #12]
 800f7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7c8:	e7e9      	b.n	800f79e <__ssputs_r+0x8a>
	...

0800f7cc <_svfiprintf_r>:
 800f7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7d0:	4698      	mov	r8, r3
 800f7d2:	898b      	ldrh	r3, [r1, #12]
 800f7d4:	061b      	lsls	r3, r3, #24
 800f7d6:	b09d      	sub	sp, #116	@ 0x74
 800f7d8:	4607      	mov	r7, r0
 800f7da:	460d      	mov	r5, r1
 800f7dc:	4614      	mov	r4, r2
 800f7de:	d510      	bpl.n	800f802 <_svfiprintf_r+0x36>
 800f7e0:	690b      	ldr	r3, [r1, #16]
 800f7e2:	b973      	cbnz	r3, 800f802 <_svfiprintf_r+0x36>
 800f7e4:	2140      	movs	r1, #64	@ 0x40
 800f7e6:	f7fc fc83 	bl	800c0f0 <_malloc_r>
 800f7ea:	6028      	str	r0, [r5, #0]
 800f7ec:	6128      	str	r0, [r5, #16]
 800f7ee:	b930      	cbnz	r0, 800f7fe <_svfiprintf_r+0x32>
 800f7f0:	230c      	movs	r3, #12
 800f7f2:	603b      	str	r3, [r7, #0]
 800f7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800f7f8:	b01d      	add	sp, #116	@ 0x74
 800f7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fe:	2340      	movs	r3, #64	@ 0x40
 800f800:	616b      	str	r3, [r5, #20]
 800f802:	2300      	movs	r3, #0
 800f804:	9309      	str	r3, [sp, #36]	@ 0x24
 800f806:	2320      	movs	r3, #32
 800f808:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f80c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f810:	2330      	movs	r3, #48	@ 0x30
 800f812:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f9b0 <_svfiprintf_r+0x1e4>
 800f816:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f81a:	f04f 0901 	mov.w	r9, #1
 800f81e:	4623      	mov	r3, r4
 800f820:	469a      	mov	sl, r3
 800f822:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f826:	b10a      	cbz	r2, 800f82c <_svfiprintf_r+0x60>
 800f828:	2a25      	cmp	r2, #37	@ 0x25
 800f82a:	d1f9      	bne.n	800f820 <_svfiprintf_r+0x54>
 800f82c:	ebba 0b04 	subs.w	fp, sl, r4
 800f830:	d00b      	beq.n	800f84a <_svfiprintf_r+0x7e>
 800f832:	465b      	mov	r3, fp
 800f834:	4622      	mov	r2, r4
 800f836:	4629      	mov	r1, r5
 800f838:	4638      	mov	r0, r7
 800f83a:	f7ff ff6b 	bl	800f714 <__ssputs_r>
 800f83e:	3001      	adds	r0, #1
 800f840:	f000 80a7 	beq.w	800f992 <_svfiprintf_r+0x1c6>
 800f844:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f846:	445a      	add	r2, fp
 800f848:	9209      	str	r2, [sp, #36]	@ 0x24
 800f84a:	f89a 3000 	ldrb.w	r3, [sl]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	f000 809f 	beq.w	800f992 <_svfiprintf_r+0x1c6>
 800f854:	2300      	movs	r3, #0
 800f856:	f04f 32ff 	mov.w	r2, #4294967295
 800f85a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f85e:	f10a 0a01 	add.w	sl, sl, #1
 800f862:	9304      	str	r3, [sp, #16]
 800f864:	9307      	str	r3, [sp, #28]
 800f866:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f86a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f86c:	4654      	mov	r4, sl
 800f86e:	2205      	movs	r2, #5
 800f870:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f874:	484e      	ldr	r0, [pc, #312]	@ (800f9b0 <_svfiprintf_r+0x1e4>)
 800f876:	f7f0 fcb3 	bl	80001e0 <memchr>
 800f87a:	9a04      	ldr	r2, [sp, #16]
 800f87c:	b9d8      	cbnz	r0, 800f8b6 <_svfiprintf_r+0xea>
 800f87e:	06d0      	lsls	r0, r2, #27
 800f880:	bf44      	itt	mi
 800f882:	2320      	movmi	r3, #32
 800f884:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f888:	0711      	lsls	r1, r2, #28
 800f88a:	bf44      	itt	mi
 800f88c:	232b      	movmi	r3, #43	@ 0x2b
 800f88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f892:	f89a 3000 	ldrb.w	r3, [sl]
 800f896:	2b2a      	cmp	r3, #42	@ 0x2a
 800f898:	d015      	beq.n	800f8c6 <_svfiprintf_r+0xfa>
 800f89a:	9a07      	ldr	r2, [sp, #28]
 800f89c:	4654      	mov	r4, sl
 800f89e:	2000      	movs	r0, #0
 800f8a0:	f04f 0c0a 	mov.w	ip, #10
 800f8a4:	4621      	mov	r1, r4
 800f8a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8aa:	3b30      	subs	r3, #48	@ 0x30
 800f8ac:	2b09      	cmp	r3, #9
 800f8ae:	d94b      	bls.n	800f948 <_svfiprintf_r+0x17c>
 800f8b0:	b1b0      	cbz	r0, 800f8e0 <_svfiprintf_r+0x114>
 800f8b2:	9207      	str	r2, [sp, #28]
 800f8b4:	e014      	b.n	800f8e0 <_svfiprintf_r+0x114>
 800f8b6:	eba0 0308 	sub.w	r3, r0, r8
 800f8ba:	fa09 f303 	lsl.w	r3, r9, r3
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	9304      	str	r3, [sp, #16]
 800f8c2:	46a2      	mov	sl, r4
 800f8c4:	e7d2      	b.n	800f86c <_svfiprintf_r+0xa0>
 800f8c6:	9b03      	ldr	r3, [sp, #12]
 800f8c8:	1d19      	adds	r1, r3, #4
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	9103      	str	r1, [sp, #12]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	bfbb      	ittet	lt
 800f8d2:	425b      	neglt	r3, r3
 800f8d4:	f042 0202 	orrlt.w	r2, r2, #2
 800f8d8:	9307      	strge	r3, [sp, #28]
 800f8da:	9307      	strlt	r3, [sp, #28]
 800f8dc:	bfb8      	it	lt
 800f8de:	9204      	strlt	r2, [sp, #16]
 800f8e0:	7823      	ldrb	r3, [r4, #0]
 800f8e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8e4:	d10a      	bne.n	800f8fc <_svfiprintf_r+0x130>
 800f8e6:	7863      	ldrb	r3, [r4, #1]
 800f8e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8ea:	d132      	bne.n	800f952 <_svfiprintf_r+0x186>
 800f8ec:	9b03      	ldr	r3, [sp, #12]
 800f8ee:	1d1a      	adds	r2, r3, #4
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	9203      	str	r2, [sp, #12]
 800f8f4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f8f8:	3402      	adds	r4, #2
 800f8fa:	9305      	str	r3, [sp, #20]
 800f8fc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f9c0 <_svfiprintf_r+0x1f4>
 800f900:	7821      	ldrb	r1, [r4, #0]
 800f902:	2203      	movs	r2, #3
 800f904:	4650      	mov	r0, sl
 800f906:	f7f0 fc6b 	bl	80001e0 <memchr>
 800f90a:	b138      	cbz	r0, 800f91c <_svfiprintf_r+0x150>
 800f90c:	9b04      	ldr	r3, [sp, #16]
 800f90e:	eba0 000a 	sub.w	r0, r0, sl
 800f912:	2240      	movs	r2, #64	@ 0x40
 800f914:	4082      	lsls	r2, r0
 800f916:	4313      	orrs	r3, r2
 800f918:	3401      	adds	r4, #1
 800f91a:	9304      	str	r3, [sp, #16]
 800f91c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f920:	4824      	ldr	r0, [pc, #144]	@ (800f9b4 <_svfiprintf_r+0x1e8>)
 800f922:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f926:	2206      	movs	r2, #6
 800f928:	f7f0 fc5a 	bl	80001e0 <memchr>
 800f92c:	2800      	cmp	r0, #0
 800f92e:	d036      	beq.n	800f99e <_svfiprintf_r+0x1d2>
 800f930:	4b21      	ldr	r3, [pc, #132]	@ (800f9b8 <_svfiprintf_r+0x1ec>)
 800f932:	bb1b      	cbnz	r3, 800f97c <_svfiprintf_r+0x1b0>
 800f934:	9b03      	ldr	r3, [sp, #12]
 800f936:	3307      	adds	r3, #7
 800f938:	f023 0307 	bic.w	r3, r3, #7
 800f93c:	3308      	adds	r3, #8
 800f93e:	9303      	str	r3, [sp, #12]
 800f940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f942:	4433      	add	r3, r6
 800f944:	9309      	str	r3, [sp, #36]	@ 0x24
 800f946:	e76a      	b.n	800f81e <_svfiprintf_r+0x52>
 800f948:	fb0c 3202 	mla	r2, ip, r2, r3
 800f94c:	460c      	mov	r4, r1
 800f94e:	2001      	movs	r0, #1
 800f950:	e7a8      	b.n	800f8a4 <_svfiprintf_r+0xd8>
 800f952:	2300      	movs	r3, #0
 800f954:	3401      	adds	r4, #1
 800f956:	9305      	str	r3, [sp, #20]
 800f958:	4619      	mov	r1, r3
 800f95a:	f04f 0c0a 	mov.w	ip, #10
 800f95e:	4620      	mov	r0, r4
 800f960:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f964:	3a30      	subs	r2, #48	@ 0x30
 800f966:	2a09      	cmp	r2, #9
 800f968:	d903      	bls.n	800f972 <_svfiprintf_r+0x1a6>
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d0c6      	beq.n	800f8fc <_svfiprintf_r+0x130>
 800f96e:	9105      	str	r1, [sp, #20]
 800f970:	e7c4      	b.n	800f8fc <_svfiprintf_r+0x130>
 800f972:	fb0c 2101 	mla	r1, ip, r1, r2
 800f976:	4604      	mov	r4, r0
 800f978:	2301      	movs	r3, #1
 800f97a:	e7f0      	b.n	800f95e <_svfiprintf_r+0x192>
 800f97c:	ab03      	add	r3, sp, #12
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	462a      	mov	r2, r5
 800f982:	4b0e      	ldr	r3, [pc, #56]	@ (800f9bc <_svfiprintf_r+0x1f0>)
 800f984:	a904      	add	r1, sp, #16
 800f986:	4638      	mov	r0, r7
 800f988:	f7fc fcde 	bl	800c348 <_printf_float>
 800f98c:	1c42      	adds	r2, r0, #1
 800f98e:	4606      	mov	r6, r0
 800f990:	d1d6      	bne.n	800f940 <_svfiprintf_r+0x174>
 800f992:	89ab      	ldrh	r3, [r5, #12]
 800f994:	065b      	lsls	r3, r3, #25
 800f996:	f53f af2d 	bmi.w	800f7f4 <_svfiprintf_r+0x28>
 800f99a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f99c:	e72c      	b.n	800f7f8 <_svfiprintf_r+0x2c>
 800f99e:	ab03      	add	r3, sp, #12
 800f9a0:	9300      	str	r3, [sp, #0]
 800f9a2:	462a      	mov	r2, r5
 800f9a4:	4b05      	ldr	r3, [pc, #20]	@ (800f9bc <_svfiprintf_r+0x1f0>)
 800f9a6:	a904      	add	r1, sp, #16
 800f9a8:	4638      	mov	r0, r7
 800f9aa:	f7fc ff65 	bl	800c878 <_printf_i>
 800f9ae:	e7ed      	b.n	800f98c <_svfiprintf_r+0x1c0>
 800f9b0:	080115c1 	.word	0x080115c1
 800f9b4:	080115cb 	.word	0x080115cb
 800f9b8:	0800c349 	.word	0x0800c349
 800f9bc:	0800f715 	.word	0x0800f715
 800f9c0:	080115c7 	.word	0x080115c7

0800f9c4 <_sungetc_r>:
 800f9c4:	b538      	push	{r3, r4, r5, lr}
 800f9c6:	1c4b      	adds	r3, r1, #1
 800f9c8:	4614      	mov	r4, r2
 800f9ca:	d103      	bne.n	800f9d4 <_sungetc_r+0x10>
 800f9cc:	f04f 35ff 	mov.w	r5, #4294967295
 800f9d0:	4628      	mov	r0, r5
 800f9d2:	bd38      	pop	{r3, r4, r5, pc}
 800f9d4:	8993      	ldrh	r3, [r2, #12]
 800f9d6:	f023 0320 	bic.w	r3, r3, #32
 800f9da:	8193      	strh	r3, [r2, #12]
 800f9dc:	6853      	ldr	r3, [r2, #4]
 800f9de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800f9e0:	b2cd      	uxtb	r5, r1
 800f9e2:	b18a      	cbz	r2, 800fa08 <_sungetc_r+0x44>
 800f9e4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800f9e6:	429a      	cmp	r2, r3
 800f9e8:	dd08      	ble.n	800f9fc <_sungetc_r+0x38>
 800f9ea:	6823      	ldr	r3, [r4, #0]
 800f9ec:	1e5a      	subs	r2, r3, #1
 800f9ee:	6022      	str	r2, [r4, #0]
 800f9f0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800f9f4:	6863      	ldr	r3, [r4, #4]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	6063      	str	r3, [r4, #4]
 800f9fa:	e7e9      	b.n	800f9d0 <_sungetc_r+0xc>
 800f9fc:	4621      	mov	r1, r4
 800f9fe:	f000 fbe0 	bl	80101c2 <__submore>
 800fa02:	2800      	cmp	r0, #0
 800fa04:	d0f1      	beq.n	800f9ea <_sungetc_r+0x26>
 800fa06:	e7e1      	b.n	800f9cc <_sungetc_r+0x8>
 800fa08:	6921      	ldr	r1, [r4, #16]
 800fa0a:	6822      	ldr	r2, [r4, #0]
 800fa0c:	b141      	cbz	r1, 800fa20 <_sungetc_r+0x5c>
 800fa0e:	4291      	cmp	r1, r2
 800fa10:	d206      	bcs.n	800fa20 <_sungetc_r+0x5c>
 800fa12:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fa16:	42a9      	cmp	r1, r5
 800fa18:	d102      	bne.n	800fa20 <_sungetc_r+0x5c>
 800fa1a:	3a01      	subs	r2, #1
 800fa1c:	6022      	str	r2, [r4, #0]
 800fa1e:	e7ea      	b.n	800f9f6 <_sungetc_r+0x32>
 800fa20:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800fa24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa28:	6363      	str	r3, [r4, #52]	@ 0x34
 800fa2a:	2303      	movs	r3, #3
 800fa2c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800fa2e:	4623      	mov	r3, r4
 800fa30:	f803 5f46 	strb.w	r5, [r3, #70]!
 800fa34:	6023      	str	r3, [r4, #0]
 800fa36:	2301      	movs	r3, #1
 800fa38:	e7de      	b.n	800f9f8 <_sungetc_r+0x34>

0800fa3a <__ssrefill_r>:
 800fa3a:	b510      	push	{r4, lr}
 800fa3c:	460c      	mov	r4, r1
 800fa3e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800fa40:	b169      	cbz	r1, 800fa5e <__ssrefill_r+0x24>
 800fa42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fa46:	4299      	cmp	r1, r3
 800fa48:	d001      	beq.n	800fa4e <__ssrefill_r+0x14>
 800fa4a:	f7fe fae1 	bl	800e010 <_free_r>
 800fa4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fa50:	6063      	str	r3, [r4, #4]
 800fa52:	2000      	movs	r0, #0
 800fa54:	6360      	str	r0, [r4, #52]	@ 0x34
 800fa56:	b113      	cbz	r3, 800fa5e <__ssrefill_r+0x24>
 800fa58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800fa5a:	6023      	str	r3, [r4, #0]
 800fa5c:	bd10      	pop	{r4, pc}
 800fa5e:	6923      	ldr	r3, [r4, #16]
 800fa60:	6023      	str	r3, [r4, #0]
 800fa62:	2300      	movs	r3, #0
 800fa64:	6063      	str	r3, [r4, #4]
 800fa66:	89a3      	ldrh	r3, [r4, #12]
 800fa68:	f043 0320 	orr.w	r3, r3, #32
 800fa6c:	81a3      	strh	r3, [r4, #12]
 800fa6e:	f04f 30ff 	mov.w	r0, #4294967295
 800fa72:	e7f3      	b.n	800fa5c <__ssrefill_r+0x22>

0800fa74 <__ssvfiscanf_r>:
 800fa74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa78:	460c      	mov	r4, r1
 800fa7a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800fa7e:	2100      	movs	r1, #0
 800fa80:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800fa84:	49a5      	ldr	r1, [pc, #660]	@ (800fd1c <__ssvfiscanf_r+0x2a8>)
 800fa86:	91a0      	str	r1, [sp, #640]	@ 0x280
 800fa88:	f10d 0804 	add.w	r8, sp, #4
 800fa8c:	49a4      	ldr	r1, [pc, #656]	@ (800fd20 <__ssvfiscanf_r+0x2ac>)
 800fa8e:	4fa5      	ldr	r7, [pc, #660]	@ (800fd24 <__ssvfiscanf_r+0x2b0>)
 800fa90:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800fa94:	4606      	mov	r6, r0
 800fa96:	91a1      	str	r1, [sp, #644]	@ 0x284
 800fa98:	9300      	str	r3, [sp, #0]
 800fa9a:	7813      	ldrb	r3, [r2, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	f000 8158 	beq.w	800fd52 <__ssvfiscanf_r+0x2de>
 800faa2:	5cf9      	ldrb	r1, [r7, r3]
 800faa4:	f011 0108 	ands.w	r1, r1, #8
 800faa8:	f102 0501 	add.w	r5, r2, #1
 800faac:	d019      	beq.n	800fae2 <__ssvfiscanf_r+0x6e>
 800faae:	6863      	ldr	r3, [r4, #4]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	dd0f      	ble.n	800fad4 <__ssvfiscanf_r+0x60>
 800fab4:	6823      	ldr	r3, [r4, #0]
 800fab6:	781a      	ldrb	r2, [r3, #0]
 800fab8:	5cba      	ldrb	r2, [r7, r2]
 800faba:	0712      	lsls	r2, r2, #28
 800fabc:	d401      	bmi.n	800fac2 <__ssvfiscanf_r+0x4e>
 800fabe:	462a      	mov	r2, r5
 800fac0:	e7eb      	b.n	800fa9a <__ssvfiscanf_r+0x26>
 800fac2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fac4:	3201      	adds	r2, #1
 800fac6:	9245      	str	r2, [sp, #276]	@ 0x114
 800fac8:	6862      	ldr	r2, [r4, #4]
 800faca:	3301      	adds	r3, #1
 800facc:	3a01      	subs	r2, #1
 800face:	6062      	str	r2, [r4, #4]
 800fad0:	6023      	str	r3, [r4, #0]
 800fad2:	e7ec      	b.n	800faae <__ssvfiscanf_r+0x3a>
 800fad4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fad6:	4621      	mov	r1, r4
 800fad8:	4630      	mov	r0, r6
 800fada:	4798      	blx	r3
 800fadc:	2800      	cmp	r0, #0
 800fade:	d0e9      	beq.n	800fab4 <__ssvfiscanf_r+0x40>
 800fae0:	e7ed      	b.n	800fabe <__ssvfiscanf_r+0x4a>
 800fae2:	2b25      	cmp	r3, #37	@ 0x25
 800fae4:	d012      	beq.n	800fb0c <__ssvfiscanf_r+0x98>
 800fae6:	4699      	mov	r9, r3
 800fae8:	6863      	ldr	r3, [r4, #4]
 800faea:	2b00      	cmp	r3, #0
 800faec:	f340 8093 	ble.w	800fc16 <__ssvfiscanf_r+0x1a2>
 800faf0:	6822      	ldr	r2, [r4, #0]
 800faf2:	7813      	ldrb	r3, [r2, #0]
 800faf4:	454b      	cmp	r3, r9
 800faf6:	f040 812c 	bne.w	800fd52 <__ssvfiscanf_r+0x2de>
 800fafa:	6863      	ldr	r3, [r4, #4]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	6063      	str	r3, [r4, #4]
 800fb00:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800fb02:	3201      	adds	r2, #1
 800fb04:	3301      	adds	r3, #1
 800fb06:	6022      	str	r2, [r4, #0]
 800fb08:	9345      	str	r3, [sp, #276]	@ 0x114
 800fb0a:	e7d8      	b.n	800fabe <__ssvfiscanf_r+0x4a>
 800fb0c:	9141      	str	r1, [sp, #260]	@ 0x104
 800fb0e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800fb10:	7853      	ldrb	r3, [r2, #1]
 800fb12:	2b2a      	cmp	r3, #42	@ 0x2a
 800fb14:	bf02      	ittt	eq
 800fb16:	2310      	moveq	r3, #16
 800fb18:	1c95      	addeq	r5, r2, #2
 800fb1a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800fb1c:	220a      	movs	r2, #10
 800fb1e:	46a9      	mov	r9, r5
 800fb20:	f819 1b01 	ldrb.w	r1, [r9], #1
 800fb24:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800fb28:	2b09      	cmp	r3, #9
 800fb2a:	d91e      	bls.n	800fb6a <__ssvfiscanf_r+0xf6>
 800fb2c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800fd28 <__ssvfiscanf_r+0x2b4>
 800fb30:	2203      	movs	r2, #3
 800fb32:	4650      	mov	r0, sl
 800fb34:	f7f0 fb54 	bl	80001e0 <memchr>
 800fb38:	b138      	cbz	r0, 800fb4a <__ssvfiscanf_r+0xd6>
 800fb3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fb3c:	eba0 000a 	sub.w	r0, r0, sl
 800fb40:	2301      	movs	r3, #1
 800fb42:	4083      	lsls	r3, r0
 800fb44:	4313      	orrs	r3, r2
 800fb46:	9341      	str	r3, [sp, #260]	@ 0x104
 800fb48:	464d      	mov	r5, r9
 800fb4a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fb4e:	2b78      	cmp	r3, #120	@ 0x78
 800fb50:	d806      	bhi.n	800fb60 <__ssvfiscanf_r+0xec>
 800fb52:	2b57      	cmp	r3, #87	@ 0x57
 800fb54:	d810      	bhi.n	800fb78 <__ssvfiscanf_r+0x104>
 800fb56:	2b25      	cmp	r3, #37	@ 0x25
 800fb58:	d0c5      	beq.n	800fae6 <__ssvfiscanf_r+0x72>
 800fb5a:	d857      	bhi.n	800fc0c <__ssvfiscanf_r+0x198>
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d065      	beq.n	800fc2c <__ssvfiscanf_r+0x1b8>
 800fb60:	2303      	movs	r3, #3
 800fb62:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fb64:	230a      	movs	r3, #10
 800fb66:	9342      	str	r3, [sp, #264]	@ 0x108
 800fb68:	e078      	b.n	800fc5c <__ssvfiscanf_r+0x1e8>
 800fb6a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800fb6c:	fb02 1103 	mla	r1, r2, r3, r1
 800fb70:	3930      	subs	r1, #48	@ 0x30
 800fb72:	9143      	str	r1, [sp, #268]	@ 0x10c
 800fb74:	464d      	mov	r5, r9
 800fb76:	e7d2      	b.n	800fb1e <__ssvfiscanf_r+0xaa>
 800fb78:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800fb7c:	2a20      	cmp	r2, #32
 800fb7e:	d8ef      	bhi.n	800fb60 <__ssvfiscanf_r+0xec>
 800fb80:	a101      	add	r1, pc, #4	@ (adr r1, 800fb88 <__ssvfiscanf_r+0x114>)
 800fb82:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fb86:	bf00      	nop
 800fb88:	0800fc3b 	.word	0x0800fc3b
 800fb8c:	0800fb61 	.word	0x0800fb61
 800fb90:	0800fb61 	.word	0x0800fb61
 800fb94:	0800fc95 	.word	0x0800fc95
 800fb98:	0800fb61 	.word	0x0800fb61
 800fb9c:	0800fb61 	.word	0x0800fb61
 800fba0:	0800fb61 	.word	0x0800fb61
 800fba4:	0800fb61 	.word	0x0800fb61
 800fba8:	0800fb61 	.word	0x0800fb61
 800fbac:	0800fb61 	.word	0x0800fb61
 800fbb0:	0800fb61 	.word	0x0800fb61
 800fbb4:	0800fcab 	.word	0x0800fcab
 800fbb8:	0800fc91 	.word	0x0800fc91
 800fbbc:	0800fc13 	.word	0x0800fc13
 800fbc0:	0800fc13 	.word	0x0800fc13
 800fbc4:	0800fc13 	.word	0x0800fc13
 800fbc8:	0800fb61 	.word	0x0800fb61
 800fbcc:	0800fc4d 	.word	0x0800fc4d
 800fbd0:	0800fb61 	.word	0x0800fb61
 800fbd4:	0800fb61 	.word	0x0800fb61
 800fbd8:	0800fb61 	.word	0x0800fb61
 800fbdc:	0800fb61 	.word	0x0800fb61
 800fbe0:	0800fcbb 	.word	0x0800fcbb
 800fbe4:	0800fc55 	.word	0x0800fc55
 800fbe8:	0800fc33 	.word	0x0800fc33
 800fbec:	0800fb61 	.word	0x0800fb61
 800fbf0:	0800fb61 	.word	0x0800fb61
 800fbf4:	0800fcb7 	.word	0x0800fcb7
 800fbf8:	0800fb61 	.word	0x0800fb61
 800fbfc:	0800fc91 	.word	0x0800fc91
 800fc00:	0800fb61 	.word	0x0800fb61
 800fc04:	0800fb61 	.word	0x0800fb61
 800fc08:	0800fc3b 	.word	0x0800fc3b
 800fc0c:	3b45      	subs	r3, #69	@ 0x45
 800fc0e:	2b02      	cmp	r3, #2
 800fc10:	d8a6      	bhi.n	800fb60 <__ssvfiscanf_r+0xec>
 800fc12:	2305      	movs	r3, #5
 800fc14:	e021      	b.n	800fc5a <__ssvfiscanf_r+0x1e6>
 800fc16:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fc18:	4621      	mov	r1, r4
 800fc1a:	4630      	mov	r0, r6
 800fc1c:	4798      	blx	r3
 800fc1e:	2800      	cmp	r0, #0
 800fc20:	f43f af66 	beq.w	800faf0 <__ssvfiscanf_r+0x7c>
 800fc24:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800fc26:	2800      	cmp	r0, #0
 800fc28:	f040 808b 	bne.w	800fd42 <__ssvfiscanf_r+0x2ce>
 800fc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc30:	e08b      	b.n	800fd4a <__ssvfiscanf_r+0x2d6>
 800fc32:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fc34:	f042 0220 	orr.w	r2, r2, #32
 800fc38:	9241      	str	r2, [sp, #260]	@ 0x104
 800fc3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800fc3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fc40:	9241      	str	r2, [sp, #260]	@ 0x104
 800fc42:	2210      	movs	r2, #16
 800fc44:	2b6e      	cmp	r3, #110	@ 0x6e
 800fc46:	9242      	str	r2, [sp, #264]	@ 0x108
 800fc48:	d902      	bls.n	800fc50 <__ssvfiscanf_r+0x1dc>
 800fc4a:	e005      	b.n	800fc58 <__ssvfiscanf_r+0x1e4>
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	9342      	str	r3, [sp, #264]	@ 0x108
 800fc50:	2303      	movs	r3, #3
 800fc52:	e002      	b.n	800fc5a <__ssvfiscanf_r+0x1e6>
 800fc54:	2308      	movs	r3, #8
 800fc56:	9342      	str	r3, [sp, #264]	@ 0x108
 800fc58:	2304      	movs	r3, #4
 800fc5a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800fc5c:	6863      	ldr	r3, [r4, #4]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	dd39      	ble.n	800fcd6 <__ssvfiscanf_r+0x262>
 800fc62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fc64:	0659      	lsls	r1, r3, #25
 800fc66:	d404      	bmi.n	800fc72 <__ssvfiscanf_r+0x1fe>
 800fc68:	6823      	ldr	r3, [r4, #0]
 800fc6a:	781a      	ldrb	r2, [r3, #0]
 800fc6c:	5cba      	ldrb	r2, [r7, r2]
 800fc6e:	0712      	lsls	r2, r2, #28
 800fc70:	d438      	bmi.n	800fce4 <__ssvfiscanf_r+0x270>
 800fc72:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800fc74:	2b02      	cmp	r3, #2
 800fc76:	dc47      	bgt.n	800fd08 <__ssvfiscanf_r+0x294>
 800fc78:	466b      	mov	r3, sp
 800fc7a:	4622      	mov	r2, r4
 800fc7c:	a941      	add	r1, sp, #260	@ 0x104
 800fc7e:	4630      	mov	r0, r6
 800fc80:	f000 f86c 	bl	800fd5c <_scanf_chars>
 800fc84:	2801      	cmp	r0, #1
 800fc86:	d064      	beq.n	800fd52 <__ssvfiscanf_r+0x2de>
 800fc88:	2802      	cmp	r0, #2
 800fc8a:	f47f af18 	bne.w	800fabe <__ssvfiscanf_r+0x4a>
 800fc8e:	e7c9      	b.n	800fc24 <__ssvfiscanf_r+0x1b0>
 800fc90:	220a      	movs	r2, #10
 800fc92:	e7d7      	b.n	800fc44 <__ssvfiscanf_r+0x1d0>
 800fc94:	4629      	mov	r1, r5
 800fc96:	4640      	mov	r0, r8
 800fc98:	f000 fa5a 	bl	8010150 <__sccl>
 800fc9c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fc9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fca2:	9341      	str	r3, [sp, #260]	@ 0x104
 800fca4:	4605      	mov	r5, r0
 800fca6:	2301      	movs	r3, #1
 800fca8:	e7d7      	b.n	800fc5a <__ssvfiscanf_r+0x1e6>
 800fcaa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800fcac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcb0:	9341      	str	r3, [sp, #260]	@ 0x104
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	e7d1      	b.n	800fc5a <__ssvfiscanf_r+0x1e6>
 800fcb6:	2302      	movs	r3, #2
 800fcb8:	e7cf      	b.n	800fc5a <__ssvfiscanf_r+0x1e6>
 800fcba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800fcbc:	06c3      	lsls	r3, r0, #27
 800fcbe:	f53f aefe 	bmi.w	800fabe <__ssvfiscanf_r+0x4a>
 800fcc2:	9b00      	ldr	r3, [sp, #0]
 800fcc4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fcc6:	1d19      	adds	r1, r3, #4
 800fcc8:	9100      	str	r1, [sp, #0]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	07c0      	lsls	r0, r0, #31
 800fcce:	bf4c      	ite	mi
 800fcd0:	801a      	strhmi	r2, [r3, #0]
 800fcd2:	601a      	strpl	r2, [r3, #0]
 800fcd4:	e6f3      	b.n	800fabe <__ssvfiscanf_r+0x4a>
 800fcd6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fcd8:	4621      	mov	r1, r4
 800fcda:	4630      	mov	r0, r6
 800fcdc:	4798      	blx	r3
 800fcde:	2800      	cmp	r0, #0
 800fce0:	d0bf      	beq.n	800fc62 <__ssvfiscanf_r+0x1ee>
 800fce2:	e79f      	b.n	800fc24 <__ssvfiscanf_r+0x1b0>
 800fce4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800fce6:	3201      	adds	r2, #1
 800fce8:	9245      	str	r2, [sp, #276]	@ 0x114
 800fcea:	6862      	ldr	r2, [r4, #4]
 800fcec:	3a01      	subs	r2, #1
 800fcee:	2a00      	cmp	r2, #0
 800fcf0:	6062      	str	r2, [r4, #4]
 800fcf2:	dd02      	ble.n	800fcfa <__ssvfiscanf_r+0x286>
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	6023      	str	r3, [r4, #0]
 800fcf8:	e7b6      	b.n	800fc68 <__ssvfiscanf_r+0x1f4>
 800fcfa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800fcfc:	4621      	mov	r1, r4
 800fcfe:	4630      	mov	r0, r6
 800fd00:	4798      	blx	r3
 800fd02:	2800      	cmp	r0, #0
 800fd04:	d0b0      	beq.n	800fc68 <__ssvfiscanf_r+0x1f4>
 800fd06:	e78d      	b.n	800fc24 <__ssvfiscanf_r+0x1b0>
 800fd08:	2b04      	cmp	r3, #4
 800fd0a:	dc0f      	bgt.n	800fd2c <__ssvfiscanf_r+0x2b8>
 800fd0c:	466b      	mov	r3, sp
 800fd0e:	4622      	mov	r2, r4
 800fd10:	a941      	add	r1, sp, #260	@ 0x104
 800fd12:	4630      	mov	r0, r6
 800fd14:	f000 f87c 	bl	800fe10 <_scanf_i>
 800fd18:	e7b4      	b.n	800fc84 <__ssvfiscanf_r+0x210>
 800fd1a:	bf00      	nop
 800fd1c:	0800f9c5 	.word	0x0800f9c5
 800fd20:	0800fa3b 	.word	0x0800fa3b
 800fd24:	080114c1 	.word	0x080114c1
 800fd28:	080115c7 	.word	0x080115c7
 800fd2c:	4b0a      	ldr	r3, [pc, #40]	@ (800fd58 <__ssvfiscanf_r+0x2e4>)
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f43f aec5 	beq.w	800fabe <__ssvfiscanf_r+0x4a>
 800fd34:	466b      	mov	r3, sp
 800fd36:	4622      	mov	r2, r4
 800fd38:	a941      	add	r1, sp, #260	@ 0x104
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	f7fc febc 	bl	800cab8 <_scanf_float>
 800fd40:	e7a0      	b.n	800fc84 <__ssvfiscanf_r+0x210>
 800fd42:	89a3      	ldrh	r3, [r4, #12]
 800fd44:	065b      	lsls	r3, r3, #25
 800fd46:	f53f af71 	bmi.w	800fc2c <__ssvfiscanf_r+0x1b8>
 800fd4a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800fd4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd52:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800fd54:	e7f9      	b.n	800fd4a <__ssvfiscanf_r+0x2d6>
 800fd56:	bf00      	nop
 800fd58:	0800cab9 	.word	0x0800cab9

0800fd5c <_scanf_chars>:
 800fd5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd60:	4615      	mov	r5, r2
 800fd62:	688a      	ldr	r2, [r1, #8]
 800fd64:	4680      	mov	r8, r0
 800fd66:	460c      	mov	r4, r1
 800fd68:	b932      	cbnz	r2, 800fd78 <_scanf_chars+0x1c>
 800fd6a:	698a      	ldr	r2, [r1, #24]
 800fd6c:	2a00      	cmp	r2, #0
 800fd6e:	bf14      	ite	ne
 800fd70:	f04f 32ff 	movne.w	r2, #4294967295
 800fd74:	2201      	moveq	r2, #1
 800fd76:	608a      	str	r2, [r1, #8]
 800fd78:	6822      	ldr	r2, [r4, #0]
 800fd7a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800fe0c <_scanf_chars+0xb0>
 800fd7e:	06d1      	lsls	r1, r2, #27
 800fd80:	bf5f      	itttt	pl
 800fd82:	681a      	ldrpl	r2, [r3, #0]
 800fd84:	1d11      	addpl	r1, r2, #4
 800fd86:	6019      	strpl	r1, [r3, #0]
 800fd88:	6816      	ldrpl	r6, [r2, #0]
 800fd8a:	2700      	movs	r7, #0
 800fd8c:	69a0      	ldr	r0, [r4, #24]
 800fd8e:	b188      	cbz	r0, 800fdb4 <_scanf_chars+0x58>
 800fd90:	2801      	cmp	r0, #1
 800fd92:	d107      	bne.n	800fda4 <_scanf_chars+0x48>
 800fd94:	682b      	ldr	r3, [r5, #0]
 800fd96:	781a      	ldrb	r2, [r3, #0]
 800fd98:	6963      	ldr	r3, [r4, #20]
 800fd9a:	5c9b      	ldrb	r3, [r3, r2]
 800fd9c:	b953      	cbnz	r3, 800fdb4 <_scanf_chars+0x58>
 800fd9e:	2f00      	cmp	r7, #0
 800fda0:	d031      	beq.n	800fe06 <_scanf_chars+0xaa>
 800fda2:	e022      	b.n	800fdea <_scanf_chars+0x8e>
 800fda4:	2802      	cmp	r0, #2
 800fda6:	d120      	bne.n	800fdea <_scanf_chars+0x8e>
 800fda8:	682b      	ldr	r3, [r5, #0]
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	f819 3003 	ldrb.w	r3, [r9, r3]
 800fdb0:	071b      	lsls	r3, r3, #28
 800fdb2:	d41a      	bmi.n	800fdea <_scanf_chars+0x8e>
 800fdb4:	6823      	ldr	r3, [r4, #0]
 800fdb6:	06da      	lsls	r2, r3, #27
 800fdb8:	bf5e      	ittt	pl
 800fdba:	682b      	ldrpl	r3, [r5, #0]
 800fdbc:	781b      	ldrbpl	r3, [r3, #0]
 800fdbe:	f806 3b01 	strbpl.w	r3, [r6], #1
 800fdc2:	682a      	ldr	r2, [r5, #0]
 800fdc4:	686b      	ldr	r3, [r5, #4]
 800fdc6:	3201      	adds	r2, #1
 800fdc8:	602a      	str	r2, [r5, #0]
 800fdca:	68a2      	ldr	r2, [r4, #8]
 800fdcc:	3b01      	subs	r3, #1
 800fdce:	3a01      	subs	r2, #1
 800fdd0:	606b      	str	r3, [r5, #4]
 800fdd2:	3701      	adds	r7, #1
 800fdd4:	60a2      	str	r2, [r4, #8]
 800fdd6:	b142      	cbz	r2, 800fdea <_scanf_chars+0x8e>
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	dcd7      	bgt.n	800fd8c <_scanf_chars+0x30>
 800fddc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800fde0:	4629      	mov	r1, r5
 800fde2:	4640      	mov	r0, r8
 800fde4:	4798      	blx	r3
 800fde6:	2800      	cmp	r0, #0
 800fde8:	d0d0      	beq.n	800fd8c <_scanf_chars+0x30>
 800fdea:	6823      	ldr	r3, [r4, #0]
 800fdec:	f013 0310 	ands.w	r3, r3, #16
 800fdf0:	d105      	bne.n	800fdfe <_scanf_chars+0xa2>
 800fdf2:	68e2      	ldr	r2, [r4, #12]
 800fdf4:	3201      	adds	r2, #1
 800fdf6:	60e2      	str	r2, [r4, #12]
 800fdf8:	69a2      	ldr	r2, [r4, #24]
 800fdfa:	b102      	cbz	r2, 800fdfe <_scanf_chars+0xa2>
 800fdfc:	7033      	strb	r3, [r6, #0]
 800fdfe:	6923      	ldr	r3, [r4, #16]
 800fe00:	443b      	add	r3, r7
 800fe02:	6123      	str	r3, [r4, #16]
 800fe04:	2000      	movs	r0, #0
 800fe06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe0a:	bf00      	nop
 800fe0c:	080114c1 	.word	0x080114c1

0800fe10 <_scanf_i>:
 800fe10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe14:	4698      	mov	r8, r3
 800fe16:	4b74      	ldr	r3, [pc, #464]	@ (800ffe8 <_scanf_i+0x1d8>)
 800fe18:	460c      	mov	r4, r1
 800fe1a:	4682      	mov	sl, r0
 800fe1c:	4616      	mov	r6, r2
 800fe1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe22:	b087      	sub	sp, #28
 800fe24:	ab03      	add	r3, sp, #12
 800fe26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800fe2a:	4b70      	ldr	r3, [pc, #448]	@ (800ffec <_scanf_i+0x1dc>)
 800fe2c:	69a1      	ldr	r1, [r4, #24]
 800fe2e:	4a70      	ldr	r2, [pc, #448]	@ (800fff0 <_scanf_i+0x1e0>)
 800fe30:	2903      	cmp	r1, #3
 800fe32:	bf08      	it	eq
 800fe34:	461a      	moveq	r2, r3
 800fe36:	68a3      	ldr	r3, [r4, #8]
 800fe38:	9201      	str	r2, [sp, #4]
 800fe3a:	1e5a      	subs	r2, r3, #1
 800fe3c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800fe40:	bf88      	it	hi
 800fe42:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800fe46:	4627      	mov	r7, r4
 800fe48:	bf82      	ittt	hi
 800fe4a:	eb03 0905 	addhi.w	r9, r3, r5
 800fe4e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800fe52:	60a3      	strhi	r3, [r4, #8]
 800fe54:	f857 3b1c 	ldr.w	r3, [r7], #28
 800fe58:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800fe5c:	bf98      	it	ls
 800fe5e:	f04f 0900 	movls.w	r9, #0
 800fe62:	6023      	str	r3, [r4, #0]
 800fe64:	463d      	mov	r5, r7
 800fe66:	f04f 0b00 	mov.w	fp, #0
 800fe6a:	6831      	ldr	r1, [r6, #0]
 800fe6c:	ab03      	add	r3, sp, #12
 800fe6e:	7809      	ldrb	r1, [r1, #0]
 800fe70:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800fe74:	2202      	movs	r2, #2
 800fe76:	f7f0 f9b3 	bl	80001e0 <memchr>
 800fe7a:	b328      	cbz	r0, 800fec8 <_scanf_i+0xb8>
 800fe7c:	f1bb 0f01 	cmp.w	fp, #1
 800fe80:	d159      	bne.n	800ff36 <_scanf_i+0x126>
 800fe82:	6862      	ldr	r2, [r4, #4]
 800fe84:	b92a      	cbnz	r2, 800fe92 <_scanf_i+0x82>
 800fe86:	6822      	ldr	r2, [r4, #0]
 800fe88:	2108      	movs	r1, #8
 800fe8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800fe8e:	6061      	str	r1, [r4, #4]
 800fe90:	6022      	str	r2, [r4, #0]
 800fe92:	6822      	ldr	r2, [r4, #0]
 800fe94:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800fe98:	6022      	str	r2, [r4, #0]
 800fe9a:	68a2      	ldr	r2, [r4, #8]
 800fe9c:	1e51      	subs	r1, r2, #1
 800fe9e:	60a1      	str	r1, [r4, #8]
 800fea0:	b192      	cbz	r2, 800fec8 <_scanf_i+0xb8>
 800fea2:	6832      	ldr	r2, [r6, #0]
 800fea4:	1c51      	adds	r1, r2, #1
 800fea6:	6031      	str	r1, [r6, #0]
 800fea8:	7812      	ldrb	r2, [r2, #0]
 800feaa:	f805 2b01 	strb.w	r2, [r5], #1
 800feae:	6872      	ldr	r2, [r6, #4]
 800feb0:	3a01      	subs	r2, #1
 800feb2:	2a00      	cmp	r2, #0
 800feb4:	6072      	str	r2, [r6, #4]
 800feb6:	dc07      	bgt.n	800fec8 <_scanf_i+0xb8>
 800feb8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800febc:	4631      	mov	r1, r6
 800febe:	4650      	mov	r0, sl
 800fec0:	4790      	blx	r2
 800fec2:	2800      	cmp	r0, #0
 800fec4:	f040 8085 	bne.w	800ffd2 <_scanf_i+0x1c2>
 800fec8:	f10b 0b01 	add.w	fp, fp, #1
 800fecc:	f1bb 0f03 	cmp.w	fp, #3
 800fed0:	d1cb      	bne.n	800fe6a <_scanf_i+0x5a>
 800fed2:	6863      	ldr	r3, [r4, #4]
 800fed4:	b90b      	cbnz	r3, 800feda <_scanf_i+0xca>
 800fed6:	230a      	movs	r3, #10
 800fed8:	6063      	str	r3, [r4, #4]
 800feda:	6863      	ldr	r3, [r4, #4]
 800fedc:	4945      	ldr	r1, [pc, #276]	@ (800fff4 <_scanf_i+0x1e4>)
 800fede:	6960      	ldr	r0, [r4, #20]
 800fee0:	1ac9      	subs	r1, r1, r3
 800fee2:	f000 f935 	bl	8010150 <__sccl>
 800fee6:	f04f 0b00 	mov.w	fp, #0
 800feea:	68a3      	ldr	r3, [r4, #8]
 800feec:	6822      	ldr	r2, [r4, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d03d      	beq.n	800ff6e <_scanf_i+0x15e>
 800fef2:	6831      	ldr	r1, [r6, #0]
 800fef4:	6960      	ldr	r0, [r4, #20]
 800fef6:	f891 c000 	ldrb.w	ip, [r1]
 800fefa:	f810 000c 	ldrb.w	r0, [r0, ip]
 800fefe:	2800      	cmp	r0, #0
 800ff00:	d035      	beq.n	800ff6e <_scanf_i+0x15e>
 800ff02:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800ff06:	d124      	bne.n	800ff52 <_scanf_i+0x142>
 800ff08:	0510      	lsls	r0, r2, #20
 800ff0a:	d522      	bpl.n	800ff52 <_scanf_i+0x142>
 800ff0c:	f10b 0b01 	add.w	fp, fp, #1
 800ff10:	f1b9 0f00 	cmp.w	r9, #0
 800ff14:	d003      	beq.n	800ff1e <_scanf_i+0x10e>
 800ff16:	3301      	adds	r3, #1
 800ff18:	f109 39ff 	add.w	r9, r9, #4294967295
 800ff1c:	60a3      	str	r3, [r4, #8]
 800ff1e:	6873      	ldr	r3, [r6, #4]
 800ff20:	3b01      	subs	r3, #1
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	6073      	str	r3, [r6, #4]
 800ff26:	dd1b      	ble.n	800ff60 <_scanf_i+0x150>
 800ff28:	6833      	ldr	r3, [r6, #0]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	6033      	str	r3, [r6, #0]
 800ff2e:	68a3      	ldr	r3, [r4, #8]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	60a3      	str	r3, [r4, #8]
 800ff34:	e7d9      	b.n	800feea <_scanf_i+0xda>
 800ff36:	f1bb 0f02 	cmp.w	fp, #2
 800ff3a:	d1ae      	bne.n	800fe9a <_scanf_i+0x8a>
 800ff3c:	6822      	ldr	r2, [r4, #0]
 800ff3e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800ff42:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800ff46:	d1bf      	bne.n	800fec8 <_scanf_i+0xb8>
 800ff48:	2110      	movs	r1, #16
 800ff4a:	6061      	str	r1, [r4, #4]
 800ff4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ff50:	e7a2      	b.n	800fe98 <_scanf_i+0x88>
 800ff52:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800ff56:	6022      	str	r2, [r4, #0]
 800ff58:	780b      	ldrb	r3, [r1, #0]
 800ff5a:	f805 3b01 	strb.w	r3, [r5], #1
 800ff5e:	e7de      	b.n	800ff1e <_scanf_i+0x10e>
 800ff60:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800ff64:	4631      	mov	r1, r6
 800ff66:	4650      	mov	r0, sl
 800ff68:	4798      	blx	r3
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d0df      	beq.n	800ff2e <_scanf_i+0x11e>
 800ff6e:	6823      	ldr	r3, [r4, #0]
 800ff70:	05d9      	lsls	r1, r3, #23
 800ff72:	d50d      	bpl.n	800ff90 <_scanf_i+0x180>
 800ff74:	42bd      	cmp	r5, r7
 800ff76:	d909      	bls.n	800ff8c <_scanf_i+0x17c>
 800ff78:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ff7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800ff80:	4632      	mov	r2, r6
 800ff82:	4650      	mov	r0, sl
 800ff84:	4798      	blx	r3
 800ff86:	f105 39ff 	add.w	r9, r5, #4294967295
 800ff8a:	464d      	mov	r5, r9
 800ff8c:	42bd      	cmp	r5, r7
 800ff8e:	d028      	beq.n	800ffe2 <_scanf_i+0x1d2>
 800ff90:	6822      	ldr	r2, [r4, #0]
 800ff92:	f012 0210 	ands.w	r2, r2, #16
 800ff96:	d113      	bne.n	800ffc0 <_scanf_i+0x1b0>
 800ff98:	702a      	strb	r2, [r5, #0]
 800ff9a:	6863      	ldr	r3, [r4, #4]
 800ff9c:	9e01      	ldr	r6, [sp, #4]
 800ff9e:	4639      	mov	r1, r7
 800ffa0:	4650      	mov	r0, sl
 800ffa2:	47b0      	blx	r6
 800ffa4:	f8d8 3000 	ldr.w	r3, [r8]
 800ffa8:	6821      	ldr	r1, [r4, #0]
 800ffaa:	1d1a      	adds	r2, r3, #4
 800ffac:	f8c8 2000 	str.w	r2, [r8]
 800ffb0:	f011 0f20 	tst.w	r1, #32
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	d00f      	beq.n	800ffd8 <_scanf_i+0x1c8>
 800ffb8:	6018      	str	r0, [r3, #0]
 800ffba:	68e3      	ldr	r3, [r4, #12]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	60e3      	str	r3, [r4, #12]
 800ffc0:	6923      	ldr	r3, [r4, #16]
 800ffc2:	1bed      	subs	r5, r5, r7
 800ffc4:	445d      	add	r5, fp
 800ffc6:	442b      	add	r3, r5
 800ffc8:	6123      	str	r3, [r4, #16]
 800ffca:	2000      	movs	r0, #0
 800ffcc:	b007      	add	sp, #28
 800ffce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffd2:	f04f 0b00 	mov.w	fp, #0
 800ffd6:	e7ca      	b.n	800ff6e <_scanf_i+0x15e>
 800ffd8:	07ca      	lsls	r2, r1, #31
 800ffda:	bf4c      	ite	mi
 800ffdc:	8018      	strhmi	r0, [r3, #0]
 800ffde:	6018      	strpl	r0, [r3, #0]
 800ffe0:	e7eb      	b.n	800ffba <_scanf_i+0x1aa>
 800ffe2:	2001      	movs	r0, #1
 800ffe4:	e7f2      	b.n	800ffcc <_scanf_i+0x1bc>
 800ffe6:	bf00      	nop
 800ffe8:	0801119c 	.word	0x0801119c
 800ffec:	0800f711 	.word	0x0800f711
 800fff0:	08010ad5 	.word	0x08010ad5
 800fff4:	080115e2 	.word	0x080115e2

0800fff8 <__sflush_r>:
 800fff8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010000:	0716      	lsls	r6, r2, #28
 8010002:	4605      	mov	r5, r0
 8010004:	460c      	mov	r4, r1
 8010006:	d454      	bmi.n	80100b2 <__sflush_r+0xba>
 8010008:	684b      	ldr	r3, [r1, #4]
 801000a:	2b00      	cmp	r3, #0
 801000c:	dc02      	bgt.n	8010014 <__sflush_r+0x1c>
 801000e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010010:	2b00      	cmp	r3, #0
 8010012:	dd48      	ble.n	80100a6 <__sflush_r+0xae>
 8010014:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010016:	2e00      	cmp	r6, #0
 8010018:	d045      	beq.n	80100a6 <__sflush_r+0xae>
 801001a:	2300      	movs	r3, #0
 801001c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010020:	682f      	ldr	r7, [r5, #0]
 8010022:	6a21      	ldr	r1, [r4, #32]
 8010024:	602b      	str	r3, [r5, #0]
 8010026:	d030      	beq.n	801008a <__sflush_r+0x92>
 8010028:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801002a:	89a3      	ldrh	r3, [r4, #12]
 801002c:	0759      	lsls	r1, r3, #29
 801002e:	d505      	bpl.n	801003c <__sflush_r+0x44>
 8010030:	6863      	ldr	r3, [r4, #4]
 8010032:	1ad2      	subs	r2, r2, r3
 8010034:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010036:	b10b      	cbz	r3, 801003c <__sflush_r+0x44>
 8010038:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801003a:	1ad2      	subs	r2, r2, r3
 801003c:	2300      	movs	r3, #0
 801003e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010040:	6a21      	ldr	r1, [r4, #32]
 8010042:	4628      	mov	r0, r5
 8010044:	47b0      	blx	r6
 8010046:	1c43      	adds	r3, r0, #1
 8010048:	89a3      	ldrh	r3, [r4, #12]
 801004a:	d106      	bne.n	801005a <__sflush_r+0x62>
 801004c:	6829      	ldr	r1, [r5, #0]
 801004e:	291d      	cmp	r1, #29
 8010050:	d82b      	bhi.n	80100aa <__sflush_r+0xb2>
 8010052:	4a2a      	ldr	r2, [pc, #168]	@ (80100fc <__sflush_r+0x104>)
 8010054:	410a      	asrs	r2, r1
 8010056:	07d6      	lsls	r6, r2, #31
 8010058:	d427      	bmi.n	80100aa <__sflush_r+0xb2>
 801005a:	2200      	movs	r2, #0
 801005c:	6062      	str	r2, [r4, #4]
 801005e:	04d9      	lsls	r1, r3, #19
 8010060:	6922      	ldr	r2, [r4, #16]
 8010062:	6022      	str	r2, [r4, #0]
 8010064:	d504      	bpl.n	8010070 <__sflush_r+0x78>
 8010066:	1c42      	adds	r2, r0, #1
 8010068:	d101      	bne.n	801006e <__sflush_r+0x76>
 801006a:	682b      	ldr	r3, [r5, #0]
 801006c:	b903      	cbnz	r3, 8010070 <__sflush_r+0x78>
 801006e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010070:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010072:	602f      	str	r7, [r5, #0]
 8010074:	b1b9      	cbz	r1, 80100a6 <__sflush_r+0xae>
 8010076:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801007a:	4299      	cmp	r1, r3
 801007c:	d002      	beq.n	8010084 <__sflush_r+0x8c>
 801007e:	4628      	mov	r0, r5
 8010080:	f7fd ffc6 	bl	800e010 <_free_r>
 8010084:	2300      	movs	r3, #0
 8010086:	6363      	str	r3, [r4, #52]	@ 0x34
 8010088:	e00d      	b.n	80100a6 <__sflush_r+0xae>
 801008a:	2301      	movs	r3, #1
 801008c:	4628      	mov	r0, r5
 801008e:	47b0      	blx	r6
 8010090:	4602      	mov	r2, r0
 8010092:	1c50      	adds	r0, r2, #1
 8010094:	d1c9      	bne.n	801002a <__sflush_r+0x32>
 8010096:	682b      	ldr	r3, [r5, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d0c6      	beq.n	801002a <__sflush_r+0x32>
 801009c:	2b1d      	cmp	r3, #29
 801009e:	d001      	beq.n	80100a4 <__sflush_r+0xac>
 80100a0:	2b16      	cmp	r3, #22
 80100a2:	d11e      	bne.n	80100e2 <__sflush_r+0xea>
 80100a4:	602f      	str	r7, [r5, #0]
 80100a6:	2000      	movs	r0, #0
 80100a8:	e022      	b.n	80100f0 <__sflush_r+0xf8>
 80100aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100ae:	b21b      	sxth	r3, r3
 80100b0:	e01b      	b.n	80100ea <__sflush_r+0xf2>
 80100b2:	690f      	ldr	r7, [r1, #16]
 80100b4:	2f00      	cmp	r7, #0
 80100b6:	d0f6      	beq.n	80100a6 <__sflush_r+0xae>
 80100b8:	0793      	lsls	r3, r2, #30
 80100ba:	680e      	ldr	r6, [r1, #0]
 80100bc:	bf08      	it	eq
 80100be:	694b      	ldreq	r3, [r1, #20]
 80100c0:	600f      	str	r7, [r1, #0]
 80100c2:	bf18      	it	ne
 80100c4:	2300      	movne	r3, #0
 80100c6:	eba6 0807 	sub.w	r8, r6, r7
 80100ca:	608b      	str	r3, [r1, #8]
 80100cc:	f1b8 0f00 	cmp.w	r8, #0
 80100d0:	dde9      	ble.n	80100a6 <__sflush_r+0xae>
 80100d2:	6a21      	ldr	r1, [r4, #32]
 80100d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80100d6:	4643      	mov	r3, r8
 80100d8:	463a      	mov	r2, r7
 80100da:	4628      	mov	r0, r5
 80100dc:	47b0      	blx	r6
 80100de:	2800      	cmp	r0, #0
 80100e0:	dc08      	bgt.n	80100f4 <__sflush_r+0xfc>
 80100e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80100e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80100ea:	81a3      	strh	r3, [r4, #12]
 80100ec:	f04f 30ff 	mov.w	r0, #4294967295
 80100f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f4:	4407      	add	r7, r0
 80100f6:	eba8 0800 	sub.w	r8, r8, r0
 80100fa:	e7e7      	b.n	80100cc <__sflush_r+0xd4>
 80100fc:	dfbffffe 	.word	0xdfbffffe

08010100 <_fflush_r>:
 8010100:	b538      	push	{r3, r4, r5, lr}
 8010102:	690b      	ldr	r3, [r1, #16]
 8010104:	4605      	mov	r5, r0
 8010106:	460c      	mov	r4, r1
 8010108:	b913      	cbnz	r3, 8010110 <_fflush_r+0x10>
 801010a:	2500      	movs	r5, #0
 801010c:	4628      	mov	r0, r5
 801010e:	bd38      	pop	{r3, r4, r5, pc}
 8010110:	b118      	cbz	r0, 801011a <_fflush_r+0x1a>
 8010112:	6a03      	ldr	r3, [r0, #32]
 8010114:	b90b      	cbnz	r3, 801011a <_fflush_r+0x1a>
 8010116:	f7fc ff6f 	bl	800cff8 <__sinit>
 801011a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801011e:	2b00      	cmp	r3, #0
 8010120:	d0f3      	beq.n	801010a <_fflush_r+0xa>
 8010122:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010124:	07d0      	lsls	r0, r2, #31
 8010126:	d404      	bmi.n	8010132 <_fflush_r+0x32>
 8010128:	0599      	lsls	r1, r3, #22
 801012a:	d402      	bmi.n	8010132 <_fflush_r+0x32>
 801012c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801012e:	f7fd f90c 	bl	800d34a <__retarget_lock_acquire_recursive>
 8010132:	4628      	mov	r0, r5
 8010134:	4621      	mov	r1, r4
 8010136:	f7ff ff5f 	bl	800fff8 <__sflush_r>
 801013a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801013c:	07da      	lsls	r2, r3, #31
 801013e:	4605      	mov	r5, r0
 8010140:	d4e4      	bmi.n	801010c <_fflush_r+0xc>
 8010142:	89a3      	ldrh	r3, [r4, #12]
 8010144:	059b      	lsls	r3, r3, #22
 8010146:	d4e1      	bmi.n	801010c <_fflush_r+0xc>
 8010148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801014a:	f7fd f8ff 	bl	800d34c <__retarget_lock_release_recursive>
 801014e:	e7dd      	b.n	801010c <_fflush_r+0xc>

08010150 <__sccl>:
 8010150:	b570      	push	{r4, r5, r6, lr}
 8010152:	780b      	ldrb	r3, [r1, #0]
 8010154:	4604      	mov	r4, r0
 8010156:	2b5e      	cmp	r3, #94	@ 0x5e
 8010158:	bf0b      	itete	eq
 801015a:	784b      	ldrbeq	r3, [r1, #1]
 801015c:	1c4a      	addne	r2, r1, #1
 801015e:	1c8a      	addeq	r2, r1, #2
 8010160:	2100      	movne	r1, #0
 8010162:	bf08      	it	eq
 8010164:	2101      	moveq	r1, #1
 8010166:	3801      	subs	r0, #1
 8010168:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801016c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8010170:	42a8      	cmp	r0, r5
 8010172:	d1fb      	bne.n	801016c <__sccl+0x1c>
 8010174:	b90b      	cbnz	r3, 801017a <__sccl+0x2a>
 8010176:	1e50      	subs	r0, r2, #1
 8010178:	bd70      	pop	{r4, r5, r6, pc}
 801017a:	f081 0101 	eor.w	r1, r1, #1
 801017e:	54e1      	strb	r1, [r4, r3]
 8010180:	4610      	mov	r0, r2
 8010182:	4602      	mov	r2, r0
 8010184:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010188:	2d2d      	cmp	r5, #45	@ 0x2d
 801018a:	d005      	beq.n	8010198 <__sccl+0x48>
 801018c:	2d5d      	cmp	r5, #93	@ 0x5d
 801018e:	d016      	beq.n	80101be <__sccl+0x6e>
 8010190:	2d00      	cmp	r5, #0
 8010192:	d0f1      	beq.n	8010178 <__sccl+0x28>
 8010194:	462b      	mov	r3, r5
 8010196:	e7f2      	b.n	801017e <__sccl+0x2e>
 8010198:	7846      	ldrb	r6, [r0, #1]
 801019a:	2e5d      	cmp	r6, #93	@ 0x5d
 801019c:	d0fa      	beq.n	8010194 <__sccl+0x44>
 801019e:	42b3      	cmp	r3, r6
 80101a0:	dcf8      	bgt.n	8010194 <__sccl+0x44>
 80101a2:	3002      	adds	r0, #2
 80101a4:	461a      	mov	r2, r3
 80101a6:	3201      	adds	r2, #1
 80101a8:	4296      	cmp	r6, r2
 80101aa:	54a1      	strb	r1, [r4, r2]
 80101ac:	dcfb      	bgt.n	80101a6 <__sccl+0x56>
 80101ae:	1af2      	subs	r2, r6, r3
 80101b0:	3a01      	subs	r2, #1
 80101b2:	1c5d      	adds	r5, r3, #1
 80101b4:	42b3      	cmp	r3, r6
 80101b6:	bfa8      	it	ge
 80101b8:	2200      	movge	r2, #0
 80101ba:	18ab      	adds	r3, r5, r2
 80101bc:	e7e1      	b.n	8010182 <__sccl+0x32>
 80101be:	4610      	mov	r0, r2
 80101c0:	e7da      	b.n	8010178 <__sccl+0x28>

080101c2 <__submore>:
 80101c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101c6:	460c      	mov	r4, r1
 80101c8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80101ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80101ce:	4299      	cmp	r1, r3
 80101d0:	d11d      	bne.n	801020e <__submore+0x4c>
 80101d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80101d6:	f7fb ff8b 	bl	800c0f0 <_malloc_r>
 80101da:	b918      	cbnz	r0, 80101e4 <__submore+0x22>
 80101dc:	f04f 30ff 	mov.w	r0, #4294967295
 80101e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80101e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80101e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80101ea:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80101ee:	6360      	str	r0, [r4, #52]	@ 0x34
 80101f0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80101f4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80101f8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80101fc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010200:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010204:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010208:	6020      	str	r0, [r4, #0]
 801020a:	2000      	movs	r0, #0
 801020c:	e7e8      	b.n	80101e0 <__submore+0x1e>
 801020e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010210:	0077      	lsls	r7, r6, #1
 8010212:	463a      	mov	r2, r7
 8010214:	f000 fbc1 	bl	801099a <_realloc_r>
 8010218:	4605      	mov	r5, r0
 801021a:	2800      	cmp	r0, #0
 801021c:	d0de      	beq.n	80101dc <__submore+0x1a>
 801021e:	eb00 0806 	add.w	r8, r0, r6
 8010222:	4601      	mov	r1, r0
 8010224:	4632      	mov	r2, r6
 8010226:	4640      	mov	r0, r8
 8010228:	f7fd f891 	bl	800d34e <memcpy>
 801022c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010230:	f8c4 8000 	str.w	r8, [r4]
 8010234:	e7e9      	b.n	801020a <__submore+0x48>

08010236 <memmove>:
 8010236:	4288      	cmp	r0, r1
 8010238:	b510      	push	{r4, lr}
 801023a:	eb01 0402 	add.w	r4, r1, r2
 801023e:	d902      	bls.n	8010246 <memmove+0x10>
 8010240:	4284      	cmp	r4, r0
 8010242:	4623      	mov	r3, r4
 8010244:	d807      	bhi.n	8010256 <memmove+0x20>
 8010246:	1e43      	subs	r3, r0, #1
 8010248:	42a1      	cmp	r1, r4
 801024a:	d008      	beq.n	801025e <memmove+0x28>
 801024c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010250:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010254:	e7f8      	b.n	8010248 <memmove+0x12>
 8010256:	4402      	add	r2, r0
 8010258:	4601      	mov	r1, r0
 801025a:	428a      	cmp	r2, r1
 801025c:	d100      	bne.n	8010260 <memmove+0x2a>
 801025e:	bd10      	pop	{r4, pc}
 8010260:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010264:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010268:	e7f7      	b.n	801025a <memmove+0x24>

0801026a <strncmp>:
 801026a:	b510      	push	{r4, lr}
 801026c:	b16a      	cbz	r2, 801028a <strncmp+0x20>
 801026e:	3901      	subs	r1, #1
 8010270:	1884      	adds	r4, r0, r2
 8010272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010276:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801027a:	429a      	cmp	r2, r3
 801027c:	d103      	bne.n	8010286 <strncmp+0x1c>
 801027e:	42a0      	cmp	r0, r4
 8010280:	d001      	beq.n	8010286 <strncmp+0x1c>
 8010282:	2a00      	cmp	r2, #0
 8010284:	d1f5      	bne.n	8010272 <strncmp+0x8>
 8010286:	1ad0      	subs	r0, r2, r3
 8010288:	bd10      	pop	{r4, pc}
 801028a:	4610      	mov	r0, r2
 801028c:	e7fc      	b.n	8010288 <strncmp+0x1e>
	...

08010290 <nan>:
 8010290:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8010298 <nan+0x8>
 8010294:	4770      	bx	lr
 8010296:	bf00      	nop
 8010298:	00000000 	.word	0x00000000
 801029c:	7ff80000 	.word	0x7ff80000

080102a0 <__assert_func>:
 80102a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102a2:	4614      	mov	r4, r2
 80102a4:	461a      	mov	r2, r3
 80102a6:	4b09      	ldr	r3, [pc, #36]	@ (80102cc <__assert_func+0x2c>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	4605      	mov	r5, r0
 80102ac:	68d8      	ldr	r0, [r3, #12]
 80102ae:	b954      	cbnz	r4, 80102c6 <__assert_func+0x26>
 80102b0:	4b07      	ldr	r3, [pc, #28]	@ (80102d0 <__assert_func+0x30>)
 80102b2:	461c      	mov	r4, r3
 80102b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80102b8:	9100      	str	r1, [sp, #0]
 80102ba:	462b      	mov	r3, r5
 80102bc:	4905      	ldr	r1, [pc, #20]	@ (80102d4 <__assert_func+0x34>)
 80102be:	f000 fc19 	bl	8010af4 <fiprintf>
 80102c2:	f000 fc29 	bl	8010b18 <abort>
 80102c6:	4b04      	ldr	r3, [pc, #16]	@ (80102d8 <__assert_func+0x38>)
 80102c8:	e7f4      	b.n	80102b4 <__assert_func+0x14>
 80102ca:	bf00      	nop
 80102cc:	20000028 	.word	0x20000028
 80102d0:	08011630 	.word	0x08011630
 80102d4:	08011602 	.word	0x08011602
 80102d8:	080115f5 	.word	0x080115f5

080102dc <_calloc_r>:
 80102dc:	b570      	push	{r4, r5, r6, lr}
 80102de:	fba1 5402 	umull	r5, r4, r1, r2
 80102e2:	b93c      	cbnz	r4, 80102f4 <_calloc_r+0x18>
 80102e4:	4629      	mov	r1, r5
 80102e6:	f7fb ff03 	bl	800c0f0 <_malloc_r>
 80102ea:	4606      	mov	r6, r0
 80102ec:	b928      	cbnz	r0, 80102fa <_calloc_r+0x1e>
 80102ee:	2600      	movs	r6, #0
 80102f0:	4630      	mov	r0, r6
 80102f2:	bd70      	pop	{r4, r5, r6, pc}
 80102f4:	220c      	movs	r2, #12
 80102f6:	6002      	str	r2, [r0, #0]
 80102f8:	e7f9      	b.n	80102ee <_calloc_r+0x12>
 80102fa:	462a      	mov	r2, r5
 80102fc:	4621      	mov	r1, r4
 80102fe:	f7fc ff40 	bl	800d182 <memset>
 8010302:	e7f5      	b.n	80102f0 <_calloc_r+0x14>

08010304 <rshift>:
 8010304:	6903      	ldr	r3, [r0, #16]
 8010306:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801030a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801030e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010312:	f100 0414 	add.w	r4, r0, #20
 8010316:	dd45      	ble.n	80103a4 <rshift+0xa0>
 8010318:	f011 011f 	ands.w	r1, r1, #31
 801031c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010320:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010324:	d10c      	bne.n	8010340 <rshift+0x3c>
 8010326:	f100 0710 	add.w	r7, r0, #16
 801032a:	4629      	mov	r1, r5
 801032c:	42b1      	cmp	r1, r6
 801032e:	d334      	bcc.n	801039a <rshift+0x96>
 8010330:	1a9b      	subs	r3, r3, r2
 8010332:	009b      	lsls	r3, r3, #2
 8010334:	1eea      	subs	r2, r5, #3
 8010336:	4296      	cmp	r6, r2
 8010338:	bf38      	it	cc
 801033a:	2300      	movcc	r3, #0
 801033c:	4423      	add	r3, r4
 801033e:	e015      	b.n	801036c <rshift+0x68>
 8010340:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010344:	f1c1 0820 	rsb	r8, r1, #32
 8010348:	40cf      	lsrs	r7, r1
 801034a:	f105 0e04 	add.w	lr, r5, #4
 801034e:	46a1      	mov	r9, r4
 8010350:	4576      	cmp	r6, lr
 8010352:	46f4      	mov	ip, lr
 8010354:	d815      	bhi.n	8010382 <rshift+0x7e>
 8010356:	1a9a      	subs	r2, r3, r2
 8010358:	0092      	lsls	r2, r2, #2
 801035a:	3a04      	subs	r2, #4
 801035c:	3501      	adds	r5, #1
 801035e:	42ae      	cmp	r6, r5
 8010360:	bf38      	it	cc
 8010362:	2200      	movcc	r2, #0
 8010364:	18a3      	adds	r3, r4, r2
 8010366:	50a7      	str	r7, [r4, r2]
 8010368:	b107      	cbz	r7, 801036c <rshift+0x68>
 801036a:	3304      	adds	r3, #4
 801036c:	1b1a      	subs	r2, r3, r4
 801036e:	42a3      	cmp	r3, r4
 8010370:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010374:	bf08      	it	eq
 8010376:	2300      	moveq	r3, #0
 8010378:	6102      	str	r2, [r0, #16]
 801037a:	bf08      	it	eq
 801037c:	6143      	streq	r3, [r0, #20]
 801037e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010382:	f8dc c000 	ldr.w	ip, [ip]
 8010386:	fa0c fc08 	lsl.w	ip, ip, r8
 801038a:	ea4c 0707 	orr.w	r7, ip, r7
 801038e:	f849 7b04 	str.w	r7, [r9], #4
 8010392:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010396:	40cf      	lsrs	r7, r1
 8010398:	e7da      	b.n	8010350 <rshift+0x4c>
 801039a:	f851 cb04 	ldr.w	ip, [r1], #4
 801039e:	f847 cf04 	str.w	ip, [r7, #4]!
 80103a2:	e7c3      	b.n	801032c <rshift+0x28>
 80103a4:	4623      	mov	r3, r4
 80103a6:	e7e1      	b.n	801036c <rshift+0x68>

080103a8 <__hexdig_fun>:
 80103a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80103ac:	2b09      	cmp	r3, #9
 80103ae:	d802      	bhi.n	80103b6 <__hexdig_fun+0xe>
 80103b0:	3820      	subs	r0, #32
 80103b2:	b2c0      	uxtb	r0, r0
 80103b4:	4770      	bx	lr
 80103b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80103ba:	2b05      	cmp	r3, #5
 80103bc:	d801      	bhi.n	80103c2 <__hexdig_fun+0x1a>
 80103be:	3847      	subs	r0, #71	@ 0x47
 80103c0:	e7f7      	b.n	80103b2 <__hexdig_fun+0xa>
 80103c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80103c6:	2b05      	cmp	r3, #5
 80103c8:	d801      	bhi.n	80103ce <__hexdig_fun+0x26>
 80103ca:	3827      	subs	r0, #39	@ 0x27
 80103cc:	e7f1      	b.n	80103b2 <__hexdig_fun+0xa>
 80103ce:	2000      	movs	r0, #0
 80103d0:	4770      	bx	lr
	...

080103d4 <__gethex>:
 80103d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d8:	b085      	sub	sp, #20
 80103da:	468a      	mov	sl, r1
 80103dc:	9302      	str	r3, [sp, #8]
 80103de:	680b      	ldr	r3, [r1, #0]
 80103e0:	9001      	str	r0, [sp, #4]
 80103e2:	4690      	mov	r8, r2
 80103e4:	1c9c      	adds	r4, r3, #2
 80103e6:	46a1      	mov	r9, r4
 80103e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80103ec:	2830      	cmp	r0, #48	@ 0x30
 80103ee:	d0fa      	beq.n	80103e6 <__gethex+0x12>
 80103f0:	eba9 0303 	sub.w	r3, r9, r3
 80103f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80103f8:	f7ff ffd6 	bl	80103a8 <__hexdig_fun>
 80103fc:	4605      	mov	r5, r0
 80103fe:	2800      	cmp	r0, #0
 8010400:	d168      	bne.n	80104d4 <__gethex+0x100>
 8010402:	49a0      	ldr	r1, [pc, #640]	@ (8010684 <__gethex+0x2b0>)
 8010404:	2201      	movs	r2, #1
 8010406:	4648      	mov	r0, r9
 8010408:	f7ff ff2f 	bl	801026a <strncmp>
 801040c:	4607      	mov	r7, r0
 801040e:	2800      	cmp	r0, #0
 8010410:	d167      	bne.n	80104e2 <__gethex+0x10e>
 8010412:	f899 0001 	ldrb.w	r0, [r9, #1]
 8010416:	4626      	mov	r6, r4
 8010418:	f7ff ffc6 	bl	80103a8 <__hexdig_fun>
 801041c:	2800      	cmp	r0, #0
 801041e:	d062      	beq.n	80104e6 <__gethex+0x112>
 8010420:	4623      	mov	r3, r4
 8010422:	7818      	ldrb	r0, [r3, #0]
 8010424:	2830      	cmp	r0, #48	@ 0x30
 8010426:	4699      	mov	r9, r3
 8010428:	f103 0301 	add.w	r3, r3, #1
 801042c:	d0f9      	beq.n	8010422 <__gethex+0x4e>
 801042e:	f7ff ffbb 	bl	80103a8 <__hexdig_fun>
 8010432:	fab0 f580 	clz	r5, r0
 8010436:	096d      	lsrs	r5, r5, #5
 8010438:	f04f 0b01 	mov.w	fp, #1
 801043c:	464a      	mov	r2, r9
 801043e:	4616      	mov	r6, r2
 8010440:	3201      	adds	r2, #1
 8010442:	7830      	ldrb	r0, [r6, #0]
 8010444:	f7ff ffb0 	bl	80103a8 <__hexdig_fun>
 8010448:	2800      	cmp	r0, #0
 801044a:	d1f8      	bne.n	801043e <__gethex+0x6a>
 801044c:	498d      	ldr	r1, [pc, #564]	@ (8010684 <__gethex+0x2b0>)
 801044e:	2201      	movs	r2, #1
 8010450:	4630      	mov	r0, r6
 8010452:	f7ff ff0a 	bl	801026a <strncmp>
 8010456:	2800      	cmp	r0, #0
 8010458:	d13f      	bne.n	80104da <__gethex+0x106>
 801045a:	b944      	cbnz	r4, 801046e <__gethex+0x9a>
 801045c:	1c74      	adds	r4, r6, #1
 801045e:	4622      	mov	r2, r4
 8010460:	4616      	mov	r6, r2
 8010462:	3201      	adds	r2, #1
 8010464:	7830      	ldrb	r0, [r6, #0]
 8010466:	f7ff ff9f 	bl	80103a8 <__hexdig_fun>
 801046a:	2800      	cmp	r0, #0
 801046c:	d1f8      	bne.n	8010460 <__gethex+0x8c>
 801046e:	1ba4      	subs	r4, r4, r6
 8010470:	00a7      	lsls	r7, r4, #2
 8010472:	7833      	ldrb	r3, [r6, #0]
 8010474:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010478:	2b50      	cmp	r3, #80	@ 0x50
 801047a:	d13e      	bne.n	80104fa <__gethex+0x126>
 801047c:	7873      	ldrb	r3, [r6, #1]
 801047e:	2b2b      	cmp	r3, #43	@ 0x2b
 8010480:	d033      	beq.n	80104ea <__gethex+0x116>
 8010482:	2b2d      	cmp	r3, #45	@ 0x2d
 8010484:	d034      	beq.n	80104f0 <__gethex+0x11c>
 8010486:	1c71      	adds	r1, r6, #1
 8010488:	2400      	movs	r4, #0
 801048a:	7808      	ldrb	r0, [r1, #0]
 801048c:	f7ff ff8c 	bl	80103a8 <__hexdig_fun>
 8010490:	1e43      	subs	r3, r0, #1
 8010492:	b2db      	uxtb	r3, r3
 8010494:	2b18      	cmp	r3, #24
 8010496:	d830      	bhi.n	80104fa <__gethex+0x126>
 8010498:	f1a0 0210 	sub.w	r2, r0, #16
 801049c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80104a0:	f7ff ff82 	bl	80103a8 <__hexdig_fun>
 80104a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80104a8:	fa5f fc8c 	uxtb.w	ip, ip
 80104ac:	f1bc 0f18 	cmp.w	ip, #24
 80104b0:	f04f 030a 	mov.w	r3, #10
 80104b4:	d91e      	bls.n	80104f4 <__gethex+0x120>
 80104b6:	b104      	cbz	r4, 80104ba <__gethex+0xe6>
 80104b8:	4252      	negs	r2, r2
 80104ba:	4417      	add	r7, r2
 80104bc:	f8ca 1000 	str.w	r1, [sl]
 80104c0:	b1ed      	cbz	r5, 80104fe <__gethex+0x12a>
 80104c2:	f1bb 0f00 	cmp.w	fp, #0
 80104c6:	bf0c      	ite	eq
 80104c8:	2506      	moveq	r5, #6
 80104ca:	2500      	movne	r5, #0
 80104cc:	4628      	mov	r0, r5
 80104ce:	b005      	add	sp, #20
 80104d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104d4:	2500      	movs	r5, #0
 80104d6:	462c      	mov	r4, r5
 80104d8:	e7b0      	b.n	801043c <__gethex+0x68>
 80104da:	2c00      	cmp	r4, #0
 80104dc:	d1c7      	bne.n	801046e <__gethex+0x9a>
 80104de:	4627      	mov	r7, r4
 80104e0:	e7c7      	b.n	8010472 <__gethex+0x9e>
 80104e2:	464e      	mov	r6, r9
 80104e4:	462f      	mov	r7, r5
 80104e6:	2501      	movs	r5, #1
 80104e8:	e7c3      	b.n	8010472 <__gethex+0x9e>
 80104ea:	2400      	movs	r4, #0
 80104ec:	1cb1      	adds	r1, r6, #2
 80104ee:	e7cc      	b.n	801048a <__gethex+0xb6>
 80104f0:	2401      	movs	r4, #1
 80104f2:	e7fb      	b.n	80104ec <__gethex+0x118>
 80104f4:	fb03 0002 	mla	r0, r3, r2, r0
 80104f8:	e7ce      	b.n	8010498 <__gethex+0xc4>
 80104fa:	4631      	mov	r1, r6
 80104fc:	e7de      	b.n	80104bc <__gethex+0xe8>
 80104fe:	eba6 0309 	sub.w	r3, r6, r9
 8010502:	3b01      	subs	r3, #1
 8010504:	4629      	mov	r1, r5
 8010506:	2b07      	cmp	r3, #7
 8010508:	dc0a      	bgt.n	8010520 <__gethex+0x14c>
 801050a:	9801      	ldr	r0, [sp, #4]
 801050c:	f7fd fdca 	bl	800e0a4 <_Balloc>
 8010510:	4604      	mov	r4, r0
 8010512:	b940      	cbnz	r0, 8010526 <__gethex+0x152>
 8010514:	4b5c      	ldr	r3, [pc, #368]	@ (8010688 <__gethex+0x2b4>)
 8010516:	4602      	mov	r2, r0
 8010518:	21e4      	movs	r1, #228	@ 0xe4
 801051a:	485c      	ldr	r0, [pc, #368]	@ (801068c <__gethex+0x2b8>)
 801051c:	f7ff fec0 	bl	80102a0 <__assert_func>
 8010520:	3101      	adds	r1, #1
 8010522:	105b      	asrs	r3, r3, #1
 8010524:	e7ef      	b.n	8010506 <__gethex+0x132>
 8010526:	f100 0a14 	add.w	sl, r0, #20
 801052a:	2300      	movs	r3, #0
 801052c:	4655      	mov	r5, sl
 801052e:	469b      	mov	fp, r3
 8010530:	45b1      	cmp	r9, r6
 8010532:	d337      	bcc.n	80105a4 <__gethex+0x1d0>
 8010534:	f845 bb04 	str.w	fp, [r5], #4
 8010538:	eba5 050a 	sub.w	r5, r5, sl
 801053c:	10ad      	asrs	r5, r5, #2
 801053e:	6125      	str	r5, [r4, #16]
 8010540:	4658      	mov	r0, fp
 8010542:	f7fd fea1 	bl	800e288 <__hi0bits>
 8010546:	016d      	lsls	r5, r5, #5
 8010548:	f8d8 6000 	ldr.w	r6, [r8]
 801054c:	1a2d      	subs	r5, r5, r0
 801054e:	42b5      	cmp	r5, r6
 8010550:	dd54      	ble.n	80105fc <__gethex+0x228>
 8010552:	1bad      	subs	r5, r5, r6
 8010554:	4629      	mov	r1, r5
 8010556:	4620      	mov	r0, r4
 8010558:	f7fe fa35 	bl	800e9c6 <__any_on>
 801055c:	4681      	mov	r9, r0
 801055e:	b178      	cbz	r0, 8010580 <__gethex+0x1ac>
 8010560:	1e6b      	subs	r3, r5, #1
 8010562:	1159      	asrs	r1, r3, #5
 8010564:	f003 021f 	and.w	r2, r3, #31
 8010568:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801056c:	f04f 0901 	mov.w	r9, #1
 8010570:	fa09 f202 	lsl.w	r2, r9, r2
 8010574:	420a      	tst	r2, r1
 8010576:	d003      	beq.n	8010580 <__gethex+0x1ac>
 8010578:	454b      	cmp	r3, r9
 801057a:	dc36      	bgt.n	80105ea <__gethex+0x216>
 801057c:	f04f 0902 	mov.w	r9, #2
 8010580:	4629      	mov	r1, r5
 8010582:	4620      	mov	r0, r4
 8010584:	f7ff febe 	bl	8010304 <rshift>
 8010588:	442f      	add	r7, r5
 801058a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801058e:	42bb      	cmp	r3, r7
 8010590:	da42      	bge.n	8010618 <__gethex+0x244>
 8010592:	9801      	ldr	r0, [sp, #4]
 8010594:	4621      	mov	r1, r4
 8010596:	f7fd fdc5 	bl	800e124 <_Bfree>
 801059a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801059c:	2300      	movs	r3, #0
 801059e:	6013      	str	r3, [r2, #0]
 80105a0:	25a3      	movs	r5, #163	@ 0xa3
 80105a2:	e793      	b.n	80104cc <__gethex+0xf8>
 80105a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80105a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80105aa:	d012      	beq.n	80105d2 <__gethex+0x1fe>
 80105ac:	2b20      	cmp	r3, #32
 80105ae:	d104      	bne.n	80105ba <__gethex+0x1e6>
 80105b0:	f845 bb04 	str.w	fp, [r5], #4
 80105b4:	f04f 0b00 	mov.w	fp, #0
 80105b8:	465b      	mov	r3, fp
 80105ba:	7830      	ldrb	r0, [r6, #0]
 80105bc:	9303      	str	r3, [sp, #12]
 80105be:	f7ff fef3 	bl	80103a8 <__hexdig_fun>
 80105c2:	9b03      	ldr	r3, [sp, #12]
 80105c4:	f000 000f 	and.w	r0, r0, #15
 80105c8:	4098      	lsls	r0, r3
 80105ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80105ce:	3304      	adds	r3, #4
 80105d0:	e7ae      	b.n	8010530 <__gethex+0x15c>
 80105d2:	45b1      	cmp	r9, r6
 80105d4:	d8ea      	bhi.n	80105ac <__gethex+0x1d8>
 80105d6:	492b      	ldr	r1, [pc, #172]	@ (8010684 <__gethex+0x2b0>)
 80105d8:	9303      	str	r3, [sp, #12]
 80105da:	2201      	movs	r2, #1
 80105dc:	4630      	mov	r0, r6
 80105de:	f7ff fe44 	bl	801026a <strncmp>
 80105e2:	9b03      	ldr	r3, [sp, #12]
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d1e1      	bne.n	80105ac <__gethex+0x1d8>
 80105e8:	e7a2      	b.n	8010530 <__gethex+0x15c>
 80105ea:	1ea9      	subs	r1, r5, #2
 80105ec:	4620      	mov	r0, r4
 80105ee:	f7fe f9ea 	bl	800e9c6 <__any_on>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d0c2      	beq.n	801057c <__gethex+0x1a8>
 80105f6:	f04f 0903 	mov.w	r9, #3
 80105fa:	e7c1      	b.n	8010580 <__gethex+0x1ac>
 80105fc:	da09      	bge.n	8010612 <__gethex+0x23e>
 80105fe:	1b75      	subs	r5, r6, r5
 8010600:	4621      	mov	r1, r4
 8010602:	9801      	ldr	r0, [sp, #4]
 8010604:	462a      	mov	r2, r5
 8010606:	f7fd ffa5 	bl	800e554 <__lshift>
 801060a:	1b7f      	subs	r7, r7, r5
 801060c:	4604      	mov	r4, r0
 801060e:	f100 0a14 	add.w	sl, r0, #20
 8010612:	f04f 0900 	mov.w	r9, #0
 8010616:	e7b8      	b.n	801058a <__gethex+0x1b6>
 8010618:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801061c:	42bd      	cmp	r5, r7
 801061e:	dd6f      	ble.n	8010700 <__gethex+0x32c>
 8010620:	1bed      	subs	r5, r5, r7
 8010622:	42ae      	cmp	r6, r5
 8010624:	dc34      	bgt.n	8010690 <__gethex+0x2bc>
 8010626:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801062a:	2b02      	cmp	r3, #2
 801062c:	d022      	beq.n	8010674 <__gethex+0x2a0>
 801062e:	2b03      	cmp	r3, #3
 8010630:	d024      	beq.n	801067c <__gethex+0x2a8>
 8010632:	2b01      	cmp	r3, #1
 8010634:	d115      	bne.n	8010662 <__gethex+0x28e>
 8010636:	42ae      	cmp	r6, r5
 8010638:	d113      	bne.n	8010662 <__gethex+0x28e>
 801063a:	2e01      	cmp	r6, #1
 801063c:	d10b      	bne.n	8010656 <__gethex+0x282>
 801063e:	9a02      	ldr	r2, [sp, #8]
 8010640:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010644:	6013      	str	r3, [r2, #0]
 8010646:	2301      	movs	r3, #1
 8010648:	6123      	str	r3, [r4, #16]
 801064a:	f8ca 3000 	str.w	r3, [sl]
 801064e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010650:	2562      	movs	r5, #98	@ 0x62
 8010652:	601c      	str	r4, [r3, #0]
 8010654:	e73a      	b.n	80104cc <__gethex+0xf8>
 8010656:	1e71      	subs	r1, r6, #1
 8010658:	4620      	mov	r0, r4
 801065a:	f7fe f9b4 	bl	800e9c6 <__any_on>
 801065e:	2800      	cmp	r0, #0
 8010660:	d1ed      	bne.n	801063e <__gethex+0x26a>
 8010662:	9801      	ldr	r0, [sp, #4]
 8010664:	4621      	mov	r1, r4
 8010666:	f7fd fd5d 	bl	800e124 <_Bfree>
 801066a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801066c:	2300      	movs	r3, #0
 801066e:	6013      	str	r3, [r2, #0]
 8010670:	2550      	movs	r5, #80	@ 0x50
 8010672:	e72b      	b.n	80104cc <__gethex+0xf8>
 8010674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010676:	2b00      	cmp	r3, #0
 8010678:	d1f3      	bne.n	8010662 <__gethex+0x28e>
 801067a:	e7e0      	b.n	801063e <__gethex+0x26a>
 801067c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801067e:	2b00      	cmp	r3, #0
 8010680:	d1dd      	bne.n	801063e <__gethex+0x26a>
 8010682:	e7ee      	b.n	8010662 <__gethex+0x28e>
 8010684:	08011468 	.word	0x08011468
 8010688:	080112ff 	.word	0x080112ff
 801068c:	08011631 	.word	0x08011631
 8010690:	1e6f      	subs	r7, r5, #1
 8010692:	f1b9 0f00 	cmp.w	r9, #0
 8010696:	d130      	bne.n	80106fa <__gethex+0x326>
 8010698:	b127      	cbz	r7, 80106a4 <__gethex+0x2d0>
 801069a:	4639      	mov	r1, r7
 801069c:	4620      	mov	r0, r4
 801069e:	f7fe f992 	bl	800e9c6 <__any_on>
 80106a2:	4681      	mov	r9, r0
 80106a4:	117a      	asrs	r2, r7, #5
 80106a6:	2301      	movs	r3, #1
 80106a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80106ac:	f007 071f 	and.w	r7, r7, #31
 80106b0:	40bb      	lsls	r3, r7
 80106b2:	4213      	tst	r3, r2
 80106b4:	4629      	mov	r1, r5
 80106b6:	4620      	mov	r0, r4
 80106b8:	bf18      	it	ne
 80106ba:	f049 0902 	orrne.w	r9, r9, #2
 80106be:	f7ff fe21 	bl	8010304 <rshift>
 80106c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80106c6:	1b76      	subs	r6, r6, r5
 80106c8:	2502      	movs	r5, #2
 80106ca:	f1b9 0f00 	cmp.w	r9, #0
 80106ce:	d047      	beq.n	8010760 <__gethex+0x38c>
 80106d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80106d4:	2b02      	cmp	r3, #2
 80106d6:	d015      	beq.n	8010704 <__gethex+0x330>
 80106d8:	2b03      	cmp	r3, #3
 80106da:	d017      	beq.n	801070c <__gethex+0x338>
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d109      	bne.n	80106f4 <__gethex+0x320>
 80106e0:	f019 0f02 	tst.w	r9, #2
 80106e4:	d006      	beq.n	80106f4 <__gethex+0x320>
 80106e6:	f8da 3000 	ldr.w	r3, [sl]
 80106ea:	ea49 0903 	orr.w	r9, r9, r3
 80106ee:	f019 0f01 	tst.w	r9, #1
 80106f2:	d10e      	bne.n	8010712 <__gethex+0x33e>
 80106f4:	f045 0510 	orr.w	r5, r5, #16
 80106f8:	e032      	b.n	8010760 <__gethex+0x38c>
 80106fa:	f04f 0901 	mov.w	r9, #1
 80106fe:	e7d1      	b.n	80106a4 <__gethex+0x2d0>
 8010700:	2501      	movs	r5, #1
 8010702:	e7e2      	b.n	80106ca <__gethex+0x2f6>
 8010704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010706:	f1c3 0301 	rsb	r3, r3, #1
 801070a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801070c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801070e:	2b00      	cmp	r3, #0
 8010710:	d0f0      	beq.n	80106f4 <__gethex+0x320>
 8010712:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010716:	f104 0314 	add.w	r3, r4, #20
 801071a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801071e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010722:	f04f 0c00 	mov.w	ip, #0
 8010726:	4618      	mov	r0, r3
 8010728:	f853 2b04 	ldr.w	r2, [r3], #4
 801072c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010730:	d01b      	beq.n	801076a <__gethex+0x396>
 8010732:	3201      	adds	r2, #1
 8010734:	6002      	str	r2, [r0, #0]
 8010736:	2d02      	cmp	r5, #2
 8010738:	f104 0314 	add.w	r3, r4, #20
 801073c:	d13c      	bne.n	80107b8 <__gethex+0x3e4>
 801073e:	f8d8 2000 	ldr.w	r2, [r8]
 8010742:	3a01      	subs	r2, #1
 8010744:	42b2      	cmp	r2, r6
 8010746:	d109      	bne.n	801075c <__gethex+0x388>
 8010748:	1171      	asrs	r1, r6, #5
 801074a:	2201      	movs	r2, #1
 801074c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010750:	f006 061f 	and.w	r6, r6, #31
 8010754:	fa02 f606 	lsl.w	r6, r2, r6
 8010758:	421e      	tst	r6, r3
 801075a:	d13a      	bne.n	80107d2 <__gethex+0x3fe>
 801075c:	f045 0520 	orr.w	r5, r5, #32
 8010760:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010762:	601c      	str	r4, [r3, #0]
 8010764:	9b02      	ldr	r3, [sp, #8]
 8010766:	601f      	str	r7, [r3, #0]
 8010768:	e6b0      	b.n	80104cc <__gethex+0xf8>
 801076a:	4299      	cmp	r1, r3
 801076c:	f843 cc04 	str.w	ip, [r3, #-4]
 8010770:	d8d9      	bhi.n	8010726 <__gethex+0x352>
 8010772:	68a3      	ldr	r3, [r4, #8]
 8010774:	459b      	cmp	fp, r3
 8010776:	db17      	blt.n	80107a8 <__gethex+0x3d4>
 8010778:	6861      	ldr	r1, [r4, #4]
 801077a:	9801      	ldr	r0, [sp, #4]
 801077c:	3101      	adds	r1, #1
 801077e:	f7fd fc91 	bl	800e0a4 <_Balloc>
 8010782:	4681      	mov	r9, r0
 8010784:	b918      	cbnz	r0, 801078e <__gethex+0x3ba>
 8010786:	4b1a      	ldr	r3, [pc, #104]	@ (80107f0 <__gethex+0x41c>)
 8010788:	4602      	mov	r2, r0
 801078a:	2184      	movs	r1, #132	@ 0x84
 801078c:	e6c5      	b.n	801051a <__gethex+0x146>
 801078e:	6922      	ldr	r2, [r4, #16]
 8010790:	3202      	adds	r2, #2
 8010792:	f104 010c 	add.w	r1, r4, #12
 8010796:	0092      	lsls	r2, r2, #2
 8010798:	300c      	adds	r0, #12
 801079a:	f7fc fdd8 	bl	800d34e <memcpy>
 801079e:	4621      	mov	r1, r4
 80107a0:	9801      	ldr	r0, [sp, #4]
 80107a2:	f7fd fcbf 	bl	800e124 <_Bfree>
 80107a6:	464c      	mov	r4, r9
 80107a8:	6923      	ldr	r3, [r4, #16]
 80107aa:	1c5a      	adds	r2, r3, #1
 80107ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80107b0:	6122      	str	r2, [r4, #16]
 80107b2:	2201      	movs	r2, #1
 80107b4:	615a      	str	r2, [r3, #20]
 80107b6:	e7be      	b.n	8010736 <__gethex+0x362>
 80107b8:	6922      	ldr	r2, [r4, #16]
 80107ba:	455a      	cmp	r2, fp
 80107bc:	dd0b      	ble.n	80107d6 <__gethex+0x402>
 80107be:	2101      	movs	r1, #1
 80107c0:	4620      	mov	r0, r4
 80107c2:	f7ff fd9f 	bl	8010304 <rshift>
 80107c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80107ca:	3701      	adds	r7, #1
 80107cc:	42bb      	cmp	r3, r7
 80107ce:	f6ff aee0 	blt.w	8010592 <__gethex+0x1be>
 80107d2:	2501      	movs	r5, #1
 80107d4:	e7c2      	b.n	801075c <__gethex+0x388>
 80107d6:	f016 061f 	ands.w	r6, r6, #31
 80107da:	d0fa      	beq.n	80107d2 <__gethex+0x3fe>
 80107dc:	4453      	add	r3, sl
 80107de:	f1c6 0620 	rsb	r6, r6, #32
 80107e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80107e6:	f7fd fd4f 	bl	800e288 <__hi0bits>
 80107ea:	42b0      	cmp	r0, r6
 80107ec:	dbe7      	blt.n	80107be <__gethex+0x3ea>
 80107ee:	e7f0      	b.n	80107d2 <__gethex+0x3fe>
 80107f0:	080112ff 	.word	0x080112ff

080107f4 <L_shift>:
 80107f4:	f1c2 0208 	rsb	r2, r2, #8
 80107f8:	0092      	lsls	r2, r2, #2
 80107fa:	b570      	push	{r4, r5, r6, lr}
 80107fc:	f1c2 0620 	rsb	r6, r2, #32
 8010800:	6843      	ldr	r3, [r0, #4]
 8010802:	6804      	ldr	r4, [r0, #0]
 8010804:	fa03 f506 	lsl.w	r5, r3, r6
 8010808:	432c      	orrs	r4, r5
 801080a:	40d3      	lsrs	r3, r2
 801080c:	6004      	str	r4, [r0, #0]
 801080e:	f840 3f04 	str.w	r3, [r0, #4]!
 8010812:	4288      	cmp	r0, r1
 8010814:	d3f4      	bcc.n	8010800 <L_shift+0xc>
 8010816:	bd70      	pop	{r4, r5, r6, pc}

08010818 <__match>:
 8010818:	b530      	push	{r4, r5, lr}
 801081a:	6803      	ldr	r3, [r0, #0]
 801081c:	3301      	adds	r3, #1
 801081e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010822:	b914      	cbnz	r4, 801082a <__match+0x12>
 8010824:	6003      	str	r3, [r0, #0]
 8010826:	2001      	movs	r0, #1
 8010828:	bd30      	pop	{r4, r5, pc}
 801082a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801082e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8010832:	2d19      	cmp	r5, #25
 8010834:	bf98      	it	ls
 8010836:	3220      	addls	r2, #32
 8010838:	42a2      	cmp	r2, r4
 801083a:	d0f0      	beq.n	801081e <__match+0x6>
 801083c:	2000      	movs	r0, #0
 801083e:	e7f3      	b.n	8010828 <__match+0x10>

08010840 <__hexnan>:
 8010840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010844:	680b      	ldr	r3, [r1, #0]
 8010846:	6801      	ldr	r1, [r0, #0]
 8010848:	115e      	asrs	r6, r3, #5
 801084a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801084e:	f013 031f 	ands.w	r3, r3, #31
 8010852:	b087      	sub	sp, #28
 8010854:	bf18      	it	ne
 8010856:	3604      	addne	r6, #4
 8010858:	2500      	movs	r5, #0
 801085a:	1f37      	subs	r7, r6, #4
 801085c:	4682      	mov	sl, r0
 801085e:	4690      	mov	r8, r2
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	f846 5c04 	str.w	r5, [r6, #-4]
 8010866:	46b9      	mov	r9, r7
 8010868:	463c      	mov	r4, r7
 801086a:	9502      	str	r5, [sp, #8]
 801086c:	46ab      	mov	fp, r5
 801086e:	784a      	ldrb	r2, [r1, #1]
 8010870:	1c4b      	adds	r3, r1, #1
 8010872:	9303      	str	r3, [sp, #12]
 8010874:	b342      	cbz	r2, 80108c8 <__hexnan+0x88>
 8010876:	4610      	mov	r0, r2
 8010878:	9105      	str	r1, [sp, #20]
 801087a:	9204      	str	r2, [sp, #16]
 801087c:	f7ff fd94 	bl	80103a8 <__hexdig_fun>
 8010880:	2800      	cmp	r0, #0
 8010882:	d151      	bne.n	8010928 <__hexnan+0xe8>
 8010884:	9a04      	ldr	r2, [sp, #16]
 8010886:	9905      	ldr	r1, [sp, #20]
 8010888:	2a20      	cmp	r2, #32
 801088a:	d818      	bhi.n	80108be <__hexnan+0x7e>
 801088c:	9b02      	ldr	r3, [sp, #8]
 801088e:	459b      	cmp	fp, r3
 8010890:	dd13      	ble.n	80108ba <__hexnan+0x7a>
 8010892:	454c      	cmp	r4, r9
 8010894:	d206      	bcs.n	80108a4 <__hexnan+0x64>
 8010896:	2d07      	cmp	r5, #7
 8010898:	dc04      	bgt.n	80108a4 <__hexnan+0x64>
 801089a:	462a      	mov	r2, r5
 801089c:	4649      	mov	r1, r9
 801089e:	4620      	mov	r0, r4
 80108a0:	f7ff ffa8 	bl	80107f4 <L_shift>
 80108a4:	4544      	cmp	r4, r8
 80108a6:	d952      	bls.n	801094e <__hexnan+0x10e>
 80108a8:	2300      	movs	r3, #0
 80108aa:	f1a4 0904 	sub.w	r9, r4, #4
 80108ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80108b2:	f8cd b008 	str.w	fp, [sp, #8]
 80108b6:	464c      	mov	r4, r9
 80108b8:	461d      	mov	r5, r3
 80108ba:	9903      	ldr	r1, [sp, #12]
 80108bc:	e7d7      	b.n	801086e <__hexnan+0x2e>
 80108be:	2a29      	cmp	r2, #41	@ 0x29
 80108c0:	d157      	bne.n	8010972 <__hexnan+0x132>
 80108c2:	3102      	adds	r1, #2
 80108c4:	f8ca 1000 	str.w	r1, [sl]
 80108c8:	f1bb 0f00 	cmp.w	fp, #0
 80108cc:	d051      	beq.n	8010972 <__hexnan+0x132>
 80108ce:	454c      	cmp	r4, r9
 80108d0:	d206      	bcs.n	80108e0 <__hexnan+0xa0>
 80108d2:	2d07      	cmp	r5, #7
 80108d4:	dc04      	bgt.n	80108e0 <__hexnan+0xa0>
 80108d6:	462a      	mov	r2, r5
 80108d8:	4649      	mov	r1, r9
 80108da:	4620      	mov	r0, r4
 80108dc:	f7ff ff8a 	bl	80107f4 <L_shift>
 80108e0:	4544      	cmp	r4, r8
 80108e2:	d936      	bls.n	8010952 <__hexnan+0x112>
 80108e4:	f1a8 0204 	sub.w	r2, r8, #4
 80108e8:	4623      	mov	r3, r4
 80108ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80108ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80108f2:	429f      	cmp	r7, r3
 80108f4:	d2f9      	bcs.n	80108ea <__hexnan+0xaa>
 80108f6:	1b3b      	subs	r3, r7, r4
 80108f8:	f023 0303 	bic.w	r3, r3, #3
 80108fc:	3304      	adds	r3, #4
 80108fe:	3401      	adds	r4, #1
 8010900:	3e03      	subs	r6, #3
 8010902:	42b4      	cmp	r4, r6
 8010904:	bf88      	it	hi
 8010906:	2304      	movhi	r3, #4
 8010908:	4443      	add	r3, r8
 801090a:	2200      	movs	r2, #0
 801090c:	f843 2b04 	str.w	r2, [r3], #4
 8010910:	429f      	cmp	r7, r3
 8010912:	d2fb      	bcs.n	801090c <__hexnan+0xcc>
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	b91b      	cbnz	r3, 8010920 <__hexnan+0xe0>
 8010918:	4547      	cmp	r7, r8
 801091a:	d128      	bne.n	801096e <__hexnan+0x12e>
 801091c:	2301      	movs	r3, #1
 801091e:	603b      	str	r3, [r7, #0]
 8010920:	2005      	movs	r0, #5
 8010922:	b007      	add	sp, #28
 8010924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010928:	3501      	adds	r5, #1
 801092a:	2d08      	cmp	r5, #8
 801092c:	f10b 0b01 	add.w	fp, fp, #1
 8010930:	dd06      	ble.n	8010940 <__hexnan+0x100>
 8010932:	4544      	cmp	r4, r8
 8010934:	d9c1      	bls.n	80108ba <__hexnan+0x7a>
 8010936:	2300      	movs	r3, #0
 8010938:	f844 3c04 	str.w	r3, [r4, #-4]
 801093c:	2501      	movs	r5, #1
 801093e:	3c04      	subs	r4, #4
 8010940:	6822      	ldr	r2, [r4, #0]
 8010942:	f000 000f 	and.w	r0, r0, #15
 8010946:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801094a:	6020      	str	r0, [r4, #0]
 801094c:	e7b5      	b.n	80108ba <__hexnan+0x7a>
 801094e:	2508      	movs	r5, #8
 8010950:	e7b3      	b.n	80108ba <__hexnan+0x7a>
 8010952:	9b01      	ldr	r3, [sp, #4]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d0dd      	beq.n	8010914 <__hexnan+0xd4>
 8010958:	f1c3 0320 	rsb	r3, r3, #32
 801095c:	f04f 32ff 	mov.w	r2, #4294967295
 8010960:	40da      	lsrs	r2, r3
 8010962:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010966:	4013      	ands	r3, r2
 8010968:	f846 3c04 	str.w	r3, [r6, #-4]
 801096c:	e7d2      	b.n	8010914 <__hexnan+0xd4>
 801096e:	3f04      	subs	r7, #4
 8010970:	e7d0      	b.n	8010914 <__hexnan+0xd4>
 8010972:	2004      	movs	r0, #4
 8010974:	e7d5      	b.n	8010922 <__hexnan+0xe2>

08010976 <__ascii_mbtowc>:
 8010976:	b082      	sub	sp, #8
 8010978:	b901      	cbnz	r1, 801097c <__ascii_mbtowc+0x6>
 801097a:	a901      	add	r1, sp, #4
 801097c:	b142      	cbz	r2, 8010990 <__ascii_mbtowc+0x1a>
 801097e:	b14b      	cbz	r3, 8010994 <__ascii_mbtowc+0x1e>
 8010980:	7813      	ldrb	r3, [r2, #0]
 8010982:	600b      	str	r3, [r1, #0]
 8010984:	7812      	ldrb	r2, [r2, #0]
 8010986:	1e10      	subs	r0, r2, #0
 8010988:	bf18      	it	ne
 801098a:	2001      	movne	r0, #1
 801098c:	b002      	add	sp, #8
 801098e:	4770      	bx	lr
 8010990:	4610      	mov	r0, r2
 8010992:	e7fb      	b.n	801098c <__ascii_mbtowc+0x16>
 8010994:	f06f 0001 	mvn.w	r0, #1
 8010998:	e7f8      	b.n	801098c <__ascii_mbtowc+0x16>

0801099a <_realloc_r>:
 801099a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801099e:	4680      	mov	r8, r0
 80109a0:	4615      	mov	r5, r2
 80109a2:	460c      	mov	r4, r1
 80109a4:	b921      	cbnz	r1, 80109b0 <_realloc_r+0x16>
 80109a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109aa:	4611      	mov	r1, r2
 80109ac:	f7fb bba0 	b.w	800c0f0 <_malloc_r>
 80109b0:	b92a      	cbnz	r2, 80109be <_realloc_r+0x24>
 80109b2:	f7fd fb2d 	bl	800e010 <_free_r>
 80109b6:	2400      	movs	r4, #0
 80109b8:	4620      	mov	r0, r4
 80109ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109be:	f000 f8b2 	bl	8010b26 <_malloc_usable_size_r>
 80109c2:	4285      	cmp	r5, r0
 80109c4:	4606      	mov	r6, r0
 80109c6:	d802      	bhi.n	80109ce <_realloc_r+0x34>
 80109c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80109cc:	d8f4      	bhi.n	80109b8 <_realloc_r+0x1e>
 80109ce:	4629      	mov	r1, r5
 80109d0:	4640      	mov	r0, r8
 80109d2:	f7fb fb8d 	bl	800c0f0 <_malloc_r>
 80109d6:	4607      	mov	r7, r0
 80109d8:	2800      	cmp	r0, #0
 80109da:	d0ec      	beq.n	80109b6 <_realloc_r+0x1c>
 80109dc:	42b5      	cmp	r5, r6
 80109de:	462a      	mov	r2, r5
 80109e0:	4621      	mov	r1, r4
 80109e2:	bf28      	it	cs
 80109e4:	4632      	movcs	r2, r6
 80109e6:	f7fc fcb2 	bl	800d34e <memcpy>
 80109ea:	4621      	mov	r1, r4
 80109ec:	4640      	mov	r0, r8
 80109ee:	f7fd fb0f 	bl	800e010 <_free_r>
 80109f2:	463c      	mov	r4, r7
 80109f4:	e7e0      	b.n	80109b8 <_realloc_r+0x1e>
	...

080109f8 <_strtoul_l.constprop.0>:
 80109f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109fc:	4e34      	ldr	r6, [pc, #208]	@ (8010ad0 <_strtoul_l.constprop.0+0xd8>)
 80109fe:	4686      	mov	lr, r0
 8010a00:	460d      	mov	r5, r1
 8010a02:	4628      	mov	r0, r5
 8010a04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a08:	5d37      	ldrb	r7, [r6, r4]
 8010a0a:	f017 0708 	ands.w	r7, r7, #8
 8010a0e:	d1f8      	bne.n	8010a02 <_strtoul_l.constprop.0+0xa>
 8010a10:	2c2d      	cmp	r4, #45	@ 0x2d
 8010a12:	d12f      	bne.n	8010a74 <_strtoul_l.constprop.0+0x7c>
 8010a14:	782c      	ldrb	r4, [r5, #0]
 8010a16:	2701      	movs	r7, #1
 8010a18:	1c85      	adds	r5, r0, #2
 8010a1a:	f033 0010 	bics.w	r0, r3, #16
 8010a1e:	d109      	bne.n	8010a34 <_strtoul_l.constprop.0+0x3c>
 8010a20:	2c30      	cmp	r4, #48	@ 0x30
 8010a22:	d12c      	bne.n	8010a7e <_strtoul_l.constprop.0+0x86>
 8010a24:	7828      	ldrb	r0, [r5, #0]
 8010a26:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8010a2a:	2858      	cmp	r0, #88	@ 0x58
 8010a2c:	d127      	bne.n	8010a7e <_strtoul_l.constprop.0+0x86>
 8010a2e:	786c      	ldrb	r4, [r5, #1]
 8010a30:	2310      	movs	r3, #16
 8010a32:	3502      	adds	r5, #2
 8010a34:	f04f 38ff 	mov.w	r8, #4294967295
 8010a38:	2600      	movs	r6, #0
 8010a3a:	fbb8 f8f3 	udiv	r8, r8, r3
 8010a3e:	fb03 f908 	mul.w	r9, r3, r8
 8010a42:	ea6f 0909 	mvn.w	r9, r9
 8010a46:	4630      	mov	r0, r6
 8010a48:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8010a4c:	f1bc 0f09 	cmp.w	ip, #9
 8010a50:	d81c      	bhi.n	8010a8c <_strtoul_l.constprop.0+0x94>
 8010a52:	4664      	mov	r4, ip
 8010a54:	42a3      	cmp	r3, r4
 8010a56:	dd2a      	ble.n	8010aae <_strtoul_l.constprop.0+0xb6>
 8010a58:	f1b6 3fff 	cmp.w	r6, #4294967295
 8010a5c:	d007      	beq.n	8010a6e <_strtoul_l.constprop.0+0x76>
 8010a5e:	4580      	cmp	r8, r0
 8010a60:	d322      	bcc.n	8010aa8 <_strtoul_l.constprop.0+0xb0>
 8010a62:	d101      	bne.n	8010a68 <_strtoul_l.constprop.0+0x70>
 8010a64:	45a1      	cmp	r9, r4
 8010a66:	db1f      	blt.n	8010aa8 <_strtoul_l.constprop.0+0xb0>
 8010a68:	fb00 4003 	mla	r0, r0, r3, r4
 8010a6c:	2601      	movs	r6, #1
 8010a6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010a72:	e7e9      	b.n	8010a48 <_strtoul_l.constprop.0+0x50>
 8010a74:	2c2b      	cmp	r4, #43	@ 0x2b
 8010a76:	bf04      	itt	eq
 8010a78:	782c      	ldrbeq	r4, [r5, #0]
 8010a7a:	1c85      	addeq	r5, r0, #2
 8010a7c:	e7cd      	b.n	8010a1a <_strtoul_l.constprop.0+0x22>
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d1d8      	bne.n	8010a34 <_strtoul_l.constprop.0+0x3c>
 8010a82:	2c30      	cmp	r4, #48	@ 0x30
 8010a84:	bf0c      	ite	eq
 8010a86:	2308      	moveq	r3, #8
 8010a88:	230a      	movne	r3, #10
 8010a8a:	e7d3      	b.n	8010a34 <_strtoul_l.constprop.0+0x3c>
 8010a8c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8010a90:	f1bc 0f19 	cmp.w	ip, #25
 8010a94:	d801      	bhi.n	8010a9a <_strtoul_l.constprop.0+0xa2>
 8010a96:	3c37      	subs	r4, #55	@ 0x37
 8010a98:	e7dc      	b.n	8010a54 <_strtoul_l.constprop.0+0x5c>
 8010a9a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8010a9e:	f1bc 0f19 	cmp.w	ip, #25
 8010aa2:	d804      	bhi.n	8010aae <_strtoul_l.constprop.0+0xb6>
 8010aa4:	3c57      	subs	r4, #87	@ 0x57
 8010aa6:	e7d5      	b.n	8010a54 <_strtoul_l.constprop.0+0x5c>
 8010aa8:	f04f 36ff 	mov.w	r6, #4294967295
 8010aac:	e7df      	b.n	8010a6e <_strtoul_l.constprop.0+0x76>
 8010aae:	1c73      	adds	r3, r6, #1
 8010ab0:	d106      	bne.n	8010ac0 <_strtoul_l.constprop.0+0xc8>
 8010ab2:	2322      	movs	r3, #34	@ 0x22
 8010ab4:	f8ce 3000 	str.w	r3, [lr]
 8010ab8:	4630      	mov	r0, r6
 8010aba:	b932      	cbnz	r2, 8010aca <_strtoul_l.constprop.0+0xd2>
 8010abc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010ac0:	b107      	cbz	r7, 8010ac4 <_strtoul_l.constprop.0+0xcc>
 8010ac2:	4240      	negs	r0, r0
 8010ac4:	2a00      	cmp	r2, #0
 8010ac6:	d0f9      	beq.n	8010abc <_strtoul_l.constprop.0+0xc4>
 8010ac8:	b106      	cbz	r6, 8010acc <_strtoul_l.constprop.0+0xd4>
 8010aca:	1e69      	subs	r1, r5, #1
 8010acc:	6011      	str	r1, [r2, #0]
 8010ace:	e7f5      	b.n	8010abc <_strtoul_l.constprop.0+0xc4>
 8010ad0:	080114c1 	.word	0x080114c1

08010ad4 <_strtoul_r>:
 8010ad4:	f7ff bf90 	b.w	80109f8 <_strtoul_l.constprop.0>

08010ad8 <__ascii_wctomb>:
 8010ad8:	4603      	mov	r3, r0
 8010ada:	4608      	mov	r0, r1
 8010adc:	b141      	cbz	r1, 8010af0 <__ascii_wctomb+0x18>
 8010ade:	2aff      	cmp	r2, #255	@ 0xff
 8010ae0:	d904      	bls.n	8010aec <__ascii_wctomb+0x14>
 8010ae2:	228a      	movs	r2, #138	@ 0x8a
 8010ae4:	601a      	str	r2, [r3, #0]
 8010ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8010aea:	4770      	bx	lr
 8010aec:	700a      	strb	r2, [r1, #0]
 8010aee:	2001      	movs	r0, #1
 8010af0:	4770      	bx	lr
	...

08010af4 <fiprintf>:
 8010af4:	b40e      	push	{r1, r2, r3}
 8010af6:	b503      	push	{r0, r1, lr}
 8010af8:	4601      	mov	r1, r0
 8010afa:	ab03      	add	r3, sp, #12
 8010afc:	4805      	ldr	r0, [pc, #20]	@ (8010b14 <fiprintf+0x20>)
 8010afe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b02:	6800      	ldr	r0, [r0, #0]
 8010b04:	9301      	str	r3, [sp, #4]
 8010b06:	f000 f83f 	bl	8010b88 <_vfiprintf_r>
 8010b0a:	b002      	add	sp, #8
 8010b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b10:	b003      	add	sp, #12
 8010b12:	4770      	bx	lr
 8010b14:	20000028 	.word	0x20000028

08010b18 <abort>:
 8010b18:	b508      	push	{r3, lr}
 8010b1a:	2006      	movs	r0, #6
 8010b1c:	f000 fa08 	bl	8010f30 <raise>
 8010b20:	2001      	movs	r0, #1
 8010b22:	f7f1 fe97 	bl	8002854 <_exit>

08010b26 <_malloc_usable_size_r>:
 8010b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b2a:	1f18      	subs	r0, r3, #4
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	bfbc      	itt	lt
 8010b30:	580b      	ldrlt	r3, [r1, r0]
 8010b32:	18c0      	addlt	r0, r0, r3
 8010b34:	4770      	bx	lr

08010b36 <__sfputc_r>:
 8010b36:	6893      	ldr	r3, [r2, #8]
 8010b38:	3b01      	subs	r3, #1
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	b410      	push	{r4}
 8010b3e:	6093      	str	r3, [r2, #8]
 8010b40:	da08      	bge.n	8010b54 <__sfputc_r+0x1e>
 8010b42:	6994      	ldr	r4, [r2, #24]
 8010b44:	42a3      	cmp	r3, r4
 8010b46:	db01      	blt.n	8010b4c <__sfputc_r+0x16>
 8010b48:	290a      	cmp	r1, #10
 8010b4a:	d103      	bne.n	8010b54 <__sfputc_r+0x1e>
 8010b4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b50:	f000 b932 	b.w	8010db8 <__swbuf_r>
 8010b54:	6813      	ldr	r3, [r2, #0]
 8010b56:	1c58      	adds	r0, r3, #1
 8010b58:	6010      	str	r0, [r2, #0]
 8010b5a:	7019      	strb	r1, [r3, #0]
 8010b5c:	4608      	mov	r0, r1
 8010b5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b62:	4770      	bx	lr

08010b64 <__sfputs_r>:
 8010b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b66:	4606      	mov	r6, r0
 8010b68:	460f      	mov	r7, r1
 8010b6a:	4614      	mov	r4, r2
 8010b6c:	18d5      	adds	r5, r2, r3
 8010b6e:	42ac      	cmp	r4, r5
 8010b70:	d101      	bne.n	8010b76 <__sfputs_r+0x12>
 8010b72:	2000      	movs	r0, #0
 8010b74:	e007      	b.n	8010b86 <__sfputs_r+0x22>
 8010b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b7a:	463a      	mov	r2, r7
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	f7ff ffda 	bl	8010b36 <__sfputc_r>
 8010b82:	1c43      	adds	r3, r0, #1
 8010b84:	d1f3      	bne.n	8010b6e <__sfputs_r+0xa>
 8010b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b88 <_vfiprintf_r>:
 8010b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8c:	460d      	mov	r5, r1
 8010b8e:	b09d      	sub	sp, #116	@ 0x74
 8010b90:	4614      	mov	r4, r2
 8010b92:	4698      	mov	r8, r3
 8010b94:	4606      	mov	r6, r0
 8010b96:	b118      	cbz	r0, 8010ba0 <_vfiprintf_r+0x18>
 8010b98:	6a03      	ldr	r3, [r0, #32]
 8010b9a:	b90b      	cbnz	r3, 8010ba0 <_vfiprintf_r+0x18>
 8010b9c:	f7fc fa2c 	bl	800cff8 <__sinit>
 8010ba0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ba2:	07d9      	lsls	r1, r3, #31
 8010ba4:	d405      	bmi.n	8010bb2 <_vfiprintf_r+0x2a>
 8010ba6:	89ab      	ldrh	r3, [r5, #12]
 8010ba8:	059a      	lsls	r2, r3, #22
 8010baa:	d402      	bmi.n	8010bb2 <_vfiprintf_r+0x2a>
 8010bac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010bae:	f7fc fbcc 	bl	800d34a <__retarget_lock_acquire_recursive>
 8010bb2:	89ab      	ldrh	r3, [r5, #12]
 8010bb4:	071b      	lsls	r3, r3, #28
 8010bb6:	d501      	bpl.n	8010bbc <_vfiprintf_r+0x34>
 8010bb8:	692b      	ldr	r3, [r5, #16]
 8010bba:	b99b      	cbnz	r3, 8010be4 <_vfiprintf_r+0x5c>
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	4630      	mov	r0, r6
 8010bc0:	f000 f938 	bl	8010e34 <__swsetup_r>
 8010bc4:	b170      	cbz	r0, 8010be4 <_vfiprintf_r+0x5c>
 8010bc6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010bc8:	07dc      	lsls	r4, r3, #31
 8010bca:	d504      	bpl.n	8010bd6 <_vfiprintf_r+0x4e>
 8010bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8010bd0:	b01d      	add	sp, #116	@ 0x74
 8010bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd6:	89ab      	ldrh	r3, [r5, #12]
 8010bd8:	0598      	lsls	r0, r3, #22
 8010bda:	d4f7      	bmi.n	8010bcc <_vfiprintf_r+0x44>
 8010bdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010bde:	f7fc fbb5 	bl	800d34c <__retarget_lock_release_recursive>
 8010be2:	e7f3      	b.n	8010bcc <_vfiprintf_r+0x44>
 8010be4:	2300      	movs	r3, #0
 8010be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010be8:	2320      	movs	r3, #32
 8010bea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010bee:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bf2:	2330      	movs	r3, #48	@ 0x30
 8010bf4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010da4 <_vfiprintf_r+0x21c>
 8010bf8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010bfc:	f04f 0901 	mov.w	r9, #1
 8010c00:	4623      	mov	r3, r4
 8010c02:	469a      	mov	sl, r3
 8010c04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c08:	b10a      	cbz	r2, 8010c0e <_vfiprintf_r+0x86>
 8010c0a:	2a25      	cmp	r2, #37	@ 0x25
 8010c0c:	d1f9      	bne.n	8010c02 <_vfiprintf_r+0x7a>
 8010c0e:	ebba 0b04 	subs.w	fp, sl, r4
 8010c12:	d00b      	beq.n	8010c2c <_vfiprintf_r+0xa4>
 8010c14:	465b      	mov	r3, fp
 8010c16:	4622      	mov	r2, r4
 8010c18:	4629      	mov	r1, r5
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	f7ff ffa2 	bl	8010b64 <__sfputs_r>
 8010c20:	3001      	adds	r0, #1
 8010c22:	f000 80a7 	beq.w	8010d74 <_vfiprintf_r+0x1ec>
 8010c26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010c28:	445a      	add	r2, fp
 8010c2a:	9209      	str	r2, [sp, #36]	@ 0x24
 8010c2c:	f89a 3000 	ldrb.w	r3, [sl]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f000 809f 	beq.w	8010d74 <_vfiprintf_r+0x1ec>
 8010c36:	2300      	movs	r3, #0
 8010c38:	f04f 32ff 	mov.w	r2, #4294967295
 8010c3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c40:	f10a 0a01 	add.w	sl, sl, #1
 8010c44:	9304      	str	r3, [sp, #16]
 8010c46:	9307      	str	r3, [sp, #28]
 8010c48:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010c4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8010c4e:	4654      	mov	r4, sl
 8010c50:	2205      	movs	r2, #5
 8010c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c56:	4853      	ldr	r0, [pc, #332]	@ (8010da4 <_vfiprintf_r+0x21c>)
 8010c58:	f7ef fac2 	bl	80001e0 <memchr>
 8010c5c:	9a04      	ldr	r2, [sp, #16]
 8010c5e:	b9d8      	cbnz	r0, 8010c98 <_vfiprintf_r+0x110>
 8010c60:	06d1      	lsls	r1, r2, #27
 8010c62:	bf44      	itt	mi
 8010c64:	2320      	movmi	r3, #32
 8010c66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c6a:	0713      	lsls	r3, r2, #28
 8010c6c:	bf44      	itt	mi
 8010c6e:	232b      	movmi	r3, #43	@ 0x2b
 8010c70:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010c74:	f89a 3000 	ldrb.w	r3, [sl]
 8010c78:	2b2a      	cmp	r3, #42	@ 0x2a
 8010c7a:	d015      	beq.n	8010ca8 <_vfiprintf_r+0x120>
 8010c7c:	9a07      	ldr	r2, [sp, #28]
 8010c7e:	4654      	mov	r4, sl
 8010c80:	2000      	movs	r0, #0
 8010c82:	f04f 0c0a 	mov.w	ip, #10
 8010c86:	4621      	mov	r1, r4
 8010c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c8c:	3b30      	subs	r3, #48	@ 0x30
 8010c8e:	2b09      	cmp	r3, #9
 8010c90:	d94b      	bls.n	8010d2a <_vfiprintf_r+0x1a2>
 8010c92:	b1b0      	cbz	r0, 8010cc2 <_vfiprintf_r+0x13a>
 8010c94:	9207      	str	r2, [sp, #28]
 8010c96:	e014      	b.n	8010cc2 <_vfiprintf_r+0x13a>
 8010c98:	eba0 0308 	sub.w	r3, r0, r8
 8010c9c:	fa09 f303 	lsl.w	r3, r9, r3
 8010ca0:	4313      	orrs	r3, r2
 8010ca2:	9304      	str	r3, [sp, #16]
 8010ca4:	46a2      	mov	sl, r4
 8010ca6:	e7d2      	b.n	8010c4e <_vfiprintf_r+0xc6>
 8010ca8:	9b03      	ldr	r3, [sp, #12]
 8010caa:	1d19      	adds	r1, r3, #4
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	9103      	str	r1, [sp, #12]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	bfbb      	ittet	lt
 8010cb4:	425b      	neglt	r3, r3
 8010cb6:	f042 0202 	orrlt.w	r2, r2, #2
 8010cba:	9307      	strge	r3, [sp, #28]
 8010cbc:	9307      	strlt	r3, [sp, #28]
 8010cbe:	bfb8      	it	lt
 8010cc0:	9204      	strlt	r2, [sp, #16]
 8010cc2:	7823      	ldrb	r3, [r4, #0]
 8010cc4:	2b2e      	cmp	r3, #46	@ 0x2e
 8010cc6:	d10a      	bne.n	8010cde <_vfiprintf_r+0x156>
 8010cc8:	7863      	ldrb	r3, [r4, #1]
 8010cca:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ccc:	d132      	bne.n	8010d34 <_vfiprintf_r+0x1ac>
 8010cce:	9b03      	ldr	r3, [sp, #12]
 8010cd0:	1d1a      	adds	r2, r3, #4
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	9203      	str	r2, [sp, #12]
 8010cd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010cda:	3402      	adds	r4, #2
 8010cdc:	9305      	str	r3, [sp, #20]
 8010cde:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010db4 <_vfiprintf_r+0x22c>
 8010ce2:	7821      	ldrb	r1, [r4, #0]
 8010ce4:	2203      	movs	r2, #3
 8010ce6:	4650      	mov	r0, sl
 8010ce8:	f7ef fa7a 	bl	80001e0 <memchr>
 8010cec:	b138      	cbz	r0, 8010cfe <_vfiprintf_r+0x176>
 8010cee:	9b04      	ldr	r3, [sp, #16]
 8010cf0:	eba0 000a 	sub.w	r0, r0, sl
 8010cf4:	2240      	movs	r2, #64	@ 0x40
 8010cf6:	4082      	lsls	r2, r0
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	3401      	adds	r4, #1
 8010cfc:	9304      	str	r3, [sp, #16]
 8010cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d02:	4829      	ldr	r0, [pc, #164]	@ (8010da8 <_vfiprintf_r+0x220>)
 8010d04:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010d08:	2206      	movs	r2, #6
 8010d0a:	f7ef fa69 	bl	80001e0 <memchr>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d03f      	beq.n	8010d92 <_vfiprintf_r+0x20a>
 8010d12:	4b26      	ldr	r3, [pc, #152]	@ (8010dac <_vfiprintf_r+0x224>)
 8010d14:	bb1b      	cbnz	r3, 8010d5e <_vfiprintf_r+0x1d6>
 8010d16:	9b03      	ldr	r3, [sp, #12]
 8010d18:	3307      	adds	r3, #7
 8010d1a:	f023 0307 	bic.w	r3, r3, #7
 8010d1e:	3308      	adds	r3, #8
 8010d20:	9303      	str	r3, [sp, #12]
 8010d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010d24:	443b      	add	r3, r7
 8010d26:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d28:	e76a      	b.n	8010c00 <_vfiprintf_r+0x78>
 8010d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d2e:	460c      	mov	r4, r1
 8010d30:	2001      	movs	r0, #1
 8010d32:	e7a8      	b.n	8010c86 <_vfiprintf_r+0xfe>
 8010d34:	2300      	movs	r3, #0
 8010d36:	3401      	adds	r4, #1
 8010d38:	9305      	str	r3, [sp, #20]
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	f04f 0c0a 	mov.w	ip, #10
 8010d40:	4620      	mov	r0, r4
 8010d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d46:	3a30      	subs	r2, #48	@ 0x30
 8010d48:	2a09      	cmp	r2, #9
 8010d4a:	d903      	bls.n	8010d54 <_vfiprintf_r+0x1cc>
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d0c6      	beq.n	8010cde <_vfiprintf_r+0x156>
 8010d50:	9105      	str	r1, [sp, #20]
 8010d52:	e7c4      	b.n	8010cde <_vfiprintf_r+0x156>
 8010d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d58:	4604      	mov	r4, r0
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e7f0      	b.n	8010d40 <_vfiprintf_r+0x1b8>
 8010d5e:	ab03      	add	r3, sp, #12
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	462a      	mov	r2, r5
 8010d64:	4b12      	ldr	r3, [pc, #72]	@ (8010db0 <_vfiprintf_r+0x228>)
 8010d66:	a904      	add	r1, sp, #16
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7fb faed 	bl	800c348 <_printf_float>
 8010d6e:	4607      	mov	r7, r0
 8010d70:	1c78      	adds	r0, r7, #1
 8010d72:	d1d6      	bne.n	8010d22 <_vfiprintf_r+0x19a>
 8010d74:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d76:	07d9      	lsls	r1, r3, #31
 8010d78:	d405      	bmi.n	8010d86 <_vfiprintf_r+0x1fe>
 8010d7a:	89ab      	ldrh	r3, [r5, #12]
 8010d7c:	059a      	lsls	r2, r3, #22
 8010d7e:	d402      	bmi.n	8010d86 <_vfiprintf_r+0x1fe>
 8010d80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d82:	f7fc fae3 	bl	800d34c <__retarget_lock_release_recursive>
 8010d86:	89ab      	ldrh	r3, [r5, #12]
 8010d88:	065b      	lsls	r3, r3, #25
 8010d8a:	f53f af1f 	bmi.w	8010bcc <_vfiprintf_r+0x44>
 8010d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010d90:	e71e      	b.n	8010bd0 <_vfiprintf_r+0x48>
 8010d92:	ab03      	add	r3, sp, #12
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	462a      	mov	r2, r5
 8010d98:	4b05      	ldr	r3, [pc, #20]	@ (8010db0 <_vfiprintf_r+0x228>)
 8010d9a:	a904      	add	r1, sp, #16
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	f7fb fd6b 	bl	800c878 <_printf_i>
 8010da2:	e7e4      	b.n	8010d6e <_vfiprintf_r+0x1e6>
 8010da4:	080115c1 	.word	0x080115c1
 8010da8:	080115cb 	.word	0x080115cb
 8010dac:	0800c349 	.word	0x0800c349
 8010db0:	08010b65 	.word	0x08010b65
 8010db4:	080115c7 	.word	0x080115c7

08010db8 <__swbuf_r>:
 8010db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dba:	460e      	mov	r6, r1
 8010dbc:	4614      	mov	r4, r2
 8010dbe:	4605      	mov	r5, r0
 8010dc0:	b118      	cbz	r0, 8010dca <__swbuf_r+0x12>
 8010dc2:	6a03      	ldr	r3, [r0, #32]
 8010dc4:	b90b      	cbnz	r3, 8010dca <__swbuf_r+0x12>
 8010dc6:	f7fc f917 	bl	800cff8 <__sinit>
 8010dca:	69a3      	ldr	r3, [r4, #24]
 8010dcc:	60a3      	str	r3, [r4, #8]
 8010dce:	89a3      	ldrh	r3, [r4, #12]
 8010dd0:	071a      	lsls	r2, r3, #28
 8010dd2:	d501      	bpl.n	8010dd8 <__swbuf_r+0x20>
 8010dd4:	6923      	ldr	r3, [r4, #16]
 8010dd6:	b943      	cbnz	r3, 8010dea <__swbuf_r+0x32>
 8010dd8:	4621      	mov	r1, r4
 8010dda:	4628      	mov	r0, r5
 8010ddc:	f000 f82a 	bl	8010e34 <__swsetup_r>
 8010de0:	b118      	cbz	r0, 8010dea <__swbuf_r+0x32>
 8010de2:	f04f 37ff 	mov.w	r7, #4294967295
 8010de6:	4638      	mov	r0, r7
 8010de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	6922      	ldr	r2, [r4, #16]
 8010dee:	1a98      	subs	r0, r3, r2
 8010df0:	6963      	ldr	r3, [r4, #20]
 8010df2:	b2f6      	uxtb	r6, r6
 8010df4:	4283      	cmp	r3, r0
 8010df6:	4637      	mov	r7, r6
 8010df8:	dc05      	bgt.n	8010e06 <__swbuf_r+0x4e>
 8010dfa:	4621      	mov	r1, r4
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	f7ff f97f 	bl	8010100 <_fflush_r>
 8010e02:	2800      	cmp	r0, #0
 8010e04:	d1ed      	bne.n	8010de2 <__swbuf_r+0x2a>
 8010e06:	68a3      	ldr	r3, [r4, #8]
 8010e08:	3b01      	subs	r3, #1
 8010e0a:	60a3      	str	r3, [r4, #8]
 8010e0c:	6823      	ldr	r3, [r4, #0]
 8010e0e:	1c5a      	adds	r2, r3, #1
 8010e10:	6022      	str	r2, [r4, #0]
 8010e12:	701e      	strb	r6, [r3, #0]
 8010e14:	6962      	ldr	r2, [r4, #20]
 8010e16:	1c43      	adds	r3, r0, #1
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d004      	beq.n	8010e26 <__swbuf_r+0x6e>
 8010e1c:	89a3      	ldrh	r3, [r4, #12]
 8010e1e:	07db      	lsls	r3, r3, #31
 8010e20:	d5e1      	bpl.n	8010de6 <__swbuf_r+0x2e>
 8010e22:	2e0a      	cmp	r6, #10
 8010e24:	d1df      	bne.n	8010de6 <__swbuf_r+0x2e>
 8010e26:	4621      	mov	r1, r4
 8010e28:	4628      	mov	r0, r5
 8010e2a:	f7ff f969 	bl	8010100 <_fflush_r>
 8010e2e:	2800      	cmp	r0, #0
 8010e30:	d0d9      	beq.n	8010de6 <__swbuf_r+0x2e>
 8010e32:	e7d6      	b.n	8010de2 <__swbuf_r+0x2a>

08010e34 <__swsetup_r>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	4b29      	ldr	r3, [pc, #164]	@ (8010edc <__swsetup_r+0xa8>)
 8010e38:	4605      	mov	r5, r0
 8010e3a:	6818      	ldr	r0, [r3, #0]
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	b118      	cbz	r0, 8010e48 <__swsetup_r+0x14>
 8010e40:	6a03      	ldr	r3, [r0, #32]
 8010e42:	b90b      	cbnz	r3, 8010e48 <__swsetup_r+0x14>
 8010e44:	f7fc f8d8 	bl	800cff8 <__sinit>
 8010e48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e4c:	0719      	lsls	r1, r3, #28
 8010e4e:	d422      	bmi.n	8010e96 <__swsetup_r+0x62>
 8010e50:	06da      	lsls	r2, r3, #27
 8010e52:	d407      	bmi.n	8010e64 <__swsetup_r+0x30>
 8010e54:	2209      	movs	r2, #9
 8010e56:	602a      	str	r2, [r5, #0]
 8010e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e5c:	81a3      	strh	r3, [r4, #12]
 8010e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010e62:	e033      	b.n	8010ecc <__swsetup_r+0x98>
 8010e64:	0758      	lsls	r0, r3, #29
 8010e66:	d512      	bpl.n	8010e8e <__swsetup_r+0x5a>
 8010e68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e6a:	b141      	cbz	r1, 8010e7e <__swsetup_r+0x4a>
 8010e6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e70:	4299      	cmp	r1, r3
 8010e72:	d002      	beq.n	8010e7a <__swsetup_r+0x46>
 8010e74:	4628      	mov	r0, r5
 8010e76:	f7fd f8cb 	bl	800e010 <_free_r>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e7e:	89a3      	ldrh	r3, [r4, #12]
 8010e80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e84:	81a3      	strh	r3, [r4, #12]
 8010e86:	2300      	movs	r3, #0
 8010e88:	6063      	str	r3, [r4, #4]
 8010e8a:	6923      	ldr	r3, [r4, #16]
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	89a3      	ldrh	r3, [r4, #12]
 8010e90:	f043 0308 	orr.w	r3, r3, #8
 8010e94:	81a3      	strh	r3, [r4, #12]
 8010e96:	6923      	ldr	r3, [r4, #16]
 8010e98:	b94b      	cbnz	r3, 8010eae <__swsetup_r+0x7a>
 8010e9a:	89a3      	ldrh	r3, [r4, #12]
 8010e9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010ea4:	d003      	beq.n	8010eae <__swsetup_r+0x7a>
 8010ea6:	4621      	mov	r1, r4
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	f000 f883 	bl	8010fb4 <__smakebuf_r>
 8010eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010eb2:	f013 0201 	ands.w	r2, r3, #1
 8010eb6:	d00a      	beq.n	8010ece <__swsetup_r+0x9a>
 8010eb8:	2200      	movs	r2, #0
 8010eba:	60a2      	str	r2, [r4, #8]
 8010ebc:	6962      	ldr	r2, [r4, #20]
 8010ebe:	4252      	negs	r2, r2
 8010ec0:	61a2      	str	r2, [r4, #24]
 8010ec2:	6922      	ldr	r2, [r4, #16]
 8010ec4:	b942      	cbnz	r2, 8010ed8 <__swsetup_r+0xa4>
 8010ec6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010eca:	d1c5      	bne.n	8010e58 <__swsetup_r+0x24>
 8010ecc:	bd38      	pop	{r3, r4, r5, pc}
 8010ece:	0799      	lsls	r1, r3, #30
 8010ed0:	bf58      	it	pl
 8010ed2:	6962      	ldrpl	r2, [r4, #20]
 8010ed4:	60a2      	str	r2, [r4, #8]
 8010ed6:	e7f4      	b.n	8010ec2 <__swsetup_r+0x8e>
 8010ed8:	2000      	movs	r0, #0
 8010eda:	e7f7      	b.n	8010ecc <__swsetup_r+0x98>
 8010edc:	20000028 	.word	0x20000028

08010ee0 <_raise_r>:
 8010ee0:	291f      	cmp	r1, #31
 8010ee2:	b538      	push	{r3, r4, r5, lr}
 8010ee4:	4605      	mov	r5, r0
 8010ee6:	460c      	mov	r4, r1
 8010ee8:	d904      	bls.n	8010ef4 <_raise_r+0x14>
 8010eea:	2316      	movs	r3, #22
 8010eec:	6003      	str	r3, [r0, #0]
 8010eee:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef2:	bd38      	pop	{r3, r4, r5, pc}
 8010ef4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010ef6:	b112      	cbz	r2, 8010efe <_raise_r+0x1e>
 8010ef8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010efc:	b94b      	cbnz	r3, 8010f12 <_raise_r+0x32>
 8010efe:	4628      	mov	r0, r5
 8010f00:	f000 f830 	bl	8010f64 <_getpid_r>
 8010f04:	4622      	mov	r2, r4
 8010f06:	4601      	mov	r1, r0
 8010f08:	4628      	mov	r0, r5
 8010f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f0e:	f000 b817 	b.w	8010f40 <_kill_r>
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d00a      	beq.n	8010f2c <_raise_r+0x4c>
 8010f16:	1c59      	adds	r1, r3, #1
 8010f18:	d103      	bne.n	8010f22 <_raise_r+0x42>
 8010f1a:	2316      	movs	r3, #22
 8010f1c:	6003      	str	r3, [r0, #0]
 8010f1e:	2001      	movs	r0, #1
 8010f20:	e7e7      	b.n	8010ef2 <_raise_r+0x12>
 8010f22:	2100      	movs	r1, #0
 8010f24:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010f28:	4620      	mov	r0, r4
 8010f2a:	4798      	blx	r3
 8010f2c:	2000      	movs	r0, #0
 8010f2e:	e7e0      	b.n	8010ef2 <_raise_r+0x12>

08010f30 <raise>:
 8010f30:	4b02      	ldr	r3, [pc, #8]	@ (8010f3c <raise+0xc>)
 8010f32:	4601      	mov	r1, r0
 8010f34:	6818      	ldr	r0, [r3, #0]
 8010f36:	f7ff bfd3 	b.w	8010ee0 <_raise_r>
 8010f3a:	bf00      	nop
 8010f3c:	20000028 	.word	0x20000028

08010f40 <_kill_r>:
 8010f40:	b538      	push	{r3, r4, r5, lr}
 8010f42:	4d07      	ldr	r5, [pc, #28]	@ (8010f60 <_kill_r+0x20>)
 8010f44:	2300      	movs	r3, #0
 8010f46:	4604      	mov	r4, r0
 8010f48:	4608      	mov	r0, r1
 8010f4a:	4611      	mov	r1, r2
 8010f4c:	602b      	str	r3, [r5, #0]
 8010f4e:	f7f1 fc71 	bl	8002834 <_kill>
 8010f52:	1c43      	adds	r3, r0, #1
 8010f54:	d102      	bne.n	8010f5c <_kill_r+0x1c>
 8010f56:	682b      	ldr	r3, [r5, #0]
 8010f58:	b103      	cbz	r3, 8010f5c <_kill_r+0x1c>
 8010f5a:	6023      	str	r3, [r4, #0]
 8010f5c:	bd38      	pop	{r3, r4, r5, pc}
 8010f5e:	bf00      	nop
 8010f60:	200020e4 	.word	0x200020e4

08010f64 <_getpid_r>:
 8010f64:	f7f1 bc5e 	b.w	8002824 <_getpid>

08010f68 <__swhatbuf_r>:
 8010f68:	b570      	push	{r4, r5, r6, lr}
 8010f6a:	460c      	mov	r4, r1
 8010f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f70:	2900      	cmp	r1, #0
 8010f72:	b096      	sub	sp, #88	@ 0x58
 8010f74:	4615      	mov	r5, r2
 8010f76:	461e      	mov	r6, r3
 8010f78:	da0d      	bge.n	8010f96 <__swhatbuf_r+0x2e>
 8010f7a:	89a3      	ldrh	r3, [r4, #12]
 8010f7c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f80:	f04f 0100 	mov.w	r1, #0
 8010f84:	bf14      	ite	ne
 8010f86:	2340      	movne	r3, #64	@ 0x40
 8010f88:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f8c:	2000      	movs	r0, #0
 8010f8e:	6031      	str	r1, [r6, #0]
 8010f90:	602b      	str	r3, [r5, #0]
 8010f92:	b016      	add	sp, #88	@ 0x58
 8010f94:	bd70      	pop	{r4, r5, r6, pc}
 8010f96:	466a      	mov	r2, sp
 8010f98:	f000 f848 	bl	801102c <_fstat_r>
 8010f9c:	2800      	cmp	r0, #0
 8010f9e:	dbec      	blt.n	8010f7a <__swhatbuf_r+0x12>
 8010fa0:	9901      	ldr	r1, [sp, #4]
 8010fa2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010fa6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010faa:	4259      	negs	r1, r3
 8010fac:	4159      	adcs	r1, r3
 8010fae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fb2:	e7eb      	b.n	8010f8c <__swhatbuf_r+0x24>

08010fb4 <__smakebuf_r>:
 8010fb4:	898b      	ldrh	r3, [r1, #12]
 8010fb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fb8:	079d      	lsls	r5, r3, #30
 8010fba:	4606      	mov	r6, r0
 8010fbc:	460c      	mov	r4, r1
 8010fbe:	d507      	bpl.n	8010fd0 <__smakebuf_r+0x1c>
 8010fc0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010fc4:	6023      	str	r3, [r4, #0]
 8010fc6:	6123      	str	r3, [r4, #16]
 8010fc8:	2301      	movs	r3, #1
 8010fca:	6163      	str	r3, [r4, #20]
 8010fcc:	b003      	add	sp, #12
 8010fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010fd0:	ab01      	add	r3, sp, #4
 8010fd2:	466a      	mov	r2, sp
 8010fd4:	f7ff ffc8 	bl	8010f68 <__swhatbuf_r>
 8010fd8:	9f00      	ldr	r7, [sp, #0]
 8010fda:	4605      	mov	r5, r0
 8010fdc:	4639      	mov	r1, r7
 8010fde:	4630      	mov	r0, r6
 8010fe0:	f7fb f886 	bl	800c0f0 <_malloc_r>
 8010fe4:	b948      	cbnz	r0, 8010ffa <__smakebuf_r+0x46>
 8010fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fea:	059a      	lsls	r2, r3, #22
 8010fec:	d4ee      	bmi.n	8010fcc <__smakebuf_r+0x18>
 8010fee:	f023 0303 	bic.w	r3, r3, #3
 8010ff2:	f043 0302 	orr.w	r3, r3, #2
 8010ff6:	81a3      	strh	r3, [r4, #12]
 8010ff8:	e7e2      	b.n	8010fc0 <__smakebuf_r+0xc>
 8010ffa:	89a3      	ldrh	r3, [r4, #12]
 8010ffc:	6020      	str	r0, [r4, #0]
 8010ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011002:	81a3      	strh	r3, [r4, #12]
 8011004:	9b01      	ldr	r3, [sp, #4]
 8011006:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801100a:	b15b      	cbz	r3, 8011024 <__smakebuf_r+0x70>
 801100c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011010:	4630      	mov	r0, r6
 8011012:	f000 f81d 	bl	8011050 <_isatty_r>
 8011016:	b128      	cbz	r0, 8011024 <__smakebuf_r+0x70>
 8011018:	89a3      	ldrh	r3, [r4, #12]
 801101a:	f023 0303 	bic.w	r3, r3, #3
 801101e:	f043 0301 	orr.w	r3, r3, #1
 8011022:	81a3      	strh	r3, [r4, #12]
 8011024:	89a3      	ldrh	r3, [r4, #12]
 8011026:	431d      	orrs	r5, r3
 8011028:	81a5      	strh	r5, [r4, #12]
 801102a:	e7cf      	b.n	8010fcc <__smakebuf_r+0x18>

0801102c <_fstat_r>:
 801102c:	b538      	push	{r3, r4, r5, lr}
 801102e:	4d07      	ldr	r5, [pc, #28]	@ (801104c <_fstat_r+0x20>)
 8011030:	2300      	movs	r3, #0
 8011032:	4604      	mov	r4, r0
 8011034:	4608      	mov	r0, r1
 8011036:	4611      	mov	r1, r2
 8011038:	602b      	str	r3, [r5, #0]
 801103a:	f7f1 fc5b 	bl	80028f4 <_fstat>
 801103e:	1c43      	adds	r3, r0, #1
 8011040:	d102      	bne.n	8011048 <_fstat_r+0x1c>
 8011042:	682b      	ldr	r3, [r5, #0]
 8011044:	b103      	cbz	r3, 8011048 <_fstat_r+0x1c>
 8011046:	6023      	str	r3, [r4, #0]
 8011048:	bd38      	pop	{r3, r4, r5, pc}
 801104a:	bf00      	nop
 801104c:	200020e4 	.word	0x200020e4

08011050 <_isatty_r>:
 8011050:	b538      	push	{r3, r4, r5, lr}
 8011052:	4d06      	ldr	r5, [pc, #24]	@ (801106c <_isatty_r+0x1c>)
 8011054:	2300      	movs	r3, #0
 8011056:	4604      	mov	r4, r0
 8011058:	4608      	mov	r0, r1
 801105a:	602b      	str	r3, [r5, #0]
 801105c:	f7f1 fc5a 	bl	8002914 <_isatty>
 8011060:	1c43      	adds	r3, r0, #1
 8011062:	d102      	bne.n	801106a <_isatty_r+0x1a>
 8011064:	682b      	ldr	r3, [r5, #0]
 8011066:	b103      	cbz	r3, 801106a <_isatty_r+0x1a>
 8011068:	6023      	str	r3, [r4, #0]
 801106a:	bd38      	pop	{r3, r4, r5, pc}
 801106c:	200020e4 	.word	0x200020e4

08011070 <_init>:
 8011070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011072:	bf00      	nop
 8011074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011076:	bc08      	pop	{r3}
 8011078:	469e      	mov	lr, r3
 801107a:	4770      	bx	lr

0801107c <_fini>:
 801107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801107e:	bf00      	nop
 8011080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011082:	bc08      	pop	{r3}
 8011084:	469e      	mov	lr, r3
 8011086:	4770      	bx	lr
